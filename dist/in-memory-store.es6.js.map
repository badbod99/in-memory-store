{"version":3,"file":"in-memory-store.es6.js","sources":["../src/common.js","../src/indexes/hashindex.js","../src/indexes/binaryarray.js","../src/indexes/binaryindex.js","../src/index.js"],"sourcesContent":["export function oneOrMany(items) {\r\n    if (!items) {\r\n        return [];\r\n    } else if (items instanceof Map) {\r\n        return Array.from(items.values());\r\n    } else if (!Array.isArray(items)) {\r\n        return [items];\r\n    } else {\r\n        return items;\r\n    }\r\n}\r\n\r\nexport function lt(comparer, a, b) {\r\n    return comparer(a, b) === -1;\r\n}\r\n\r\nexport function gt(comparer, a, b) {\r\n    return comparer(a, b) === 1;\r\n}\r\n\r\nexport function eq(comparer, a, b) {\r\n    return comparer(a, b) === 0;\r\n}\r\n\r\nexport function defaultComparer(a, b) {\r\n    return a > b ? 1 : a < b ? -1 : 0;\r\n}\r\n\r\nexport function keyWrapComparer(comparer) {\r\n    return function(a, b) {\r\n        return comparer(a.key, b.key);\r\n    };\r\n}\r\n\r\nexport function intersect(arrays) {\r\n    const ordered = (arrays.length===1\r\n        ? arrays : \r\n        arrays.sort((a1,a2) => a1.length - a2.length));\r\n    const shortest = ordered[0],\r\n        set = new Set(), \r\n        result = [];\r\n\r\n    for (let i=0; i < shortest.length; i++) {\r\n        const item = shortest[i];\r\n        let every = true; // don't use ordered.every ... it is slow\r\n        for(let j=1;j<ordered.length;j++) {\r\n            if(ordered[j].includes(item)) continue;\r\n            every = false;\r\n            break;\r\n        }\r\n        // ignore if not in every other array, or if already captured\r\n        if(!every || set.has(item)) continue;\r\n        // otherwise, add to bookeeping set and the result\r\n        set.add(item);\r\n        result[result.length] = item;\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function extract(map, keys) {\r\n    const r = [];\r\n    keys.forEach((key) => {\r\n        if (map.has(key)) {\r\n            r.push(map.get(key));\r\n        }\r\n    });    \r\n    return r;\r\n}","import * as mem from '../common';\r\n\r\nclass HashIndex {\r\n    constructor (name, itemFn, keyFn, comparer) {\r\n        this.comparer = comparer || mem.defaultComparer;\r\n        this.index = new Map([]);\r\n        this.name = name;\r\n        this.itemFn = itemFn;\r\n        this.keyFn = keyFn;\r\n    }\r\n    \r\n    static build(name, itemFn, keyFn, items, comparer) {\r\n        let bin = new HashIndex(name, itemFn, keyFn, comparer);\r\n        bin.populate(items);\r\n        return bin;\r\n    }\r\n\r\n    get keys() {\r\n        return Array.from(this.index.keys());\r\n    }\r\n\r\n    clear() {\r\n        this.index = new Map([]);\r\n    }\r\n\r\n    findMany(keys) {\r\n        keys = mem.oneOrMany(keys);\r\n        let data = keys.map(m => this.find(m));\r\n        return [].concat.apply([], data);\r\n    }\r\n\r\n    find(key) {\r\n        return this.index.get(key);\r\n    }\r\n\r\n    remove(item) {\r\n        const key = this.keyFn(item);\r\n        if (this.index.has(key)) {\r\n            const col = this.index.get(key);\r\n            const it = this.itemFn(item);\r\n            const i = col.indexOf(it);\r\n            if (i > -1) {\r\n                col.splice(i, 1);\r\n            }\r\n            if (col.length === 0) {\r\n                this.index.delete(key);\r\n            }\r\n        }\r\n    }\r\n\r\n    populate(items) {\r\n        items = mem.oneOrMany(items);\r\n        items.forEach(item => this.insert(item));\r\n    }\r\n\r\n    insert(item) {\r\n        const key = this.keyFn(item);\r\n        const it = this.itemFn(item);\r\n        if (it && key) {\r\n            if (this.index.has(key)) {\r\n                this.index.get(key).push(it);\r\n            } else {\r\n                this.index.set(key, [it]);\r\n            }\r\n        }\r\n    }\r\n\r\n    update(item, olditem) {\r\n        this.remove(olditem);\r\n        this.insert(item);\r\n    }\r\n}\r\n\r\nexport default HashIndex;","import * as mem from '../common';\r\n\r\nclass BinaryArray {\r\n    constructor (comparer) {\r\n        this.arr = [];\r\n        this.comparer = comparer || mem.defaultComparer;\r\n    }\r\n    \r\n    clear() {\r\n        this.arr = [];\r\n    }\r\n\r\n    get keys() {\r\n        return this.arr.map(m => m.key);\r\n    }\r\n\r\n    indexOf(key) {\r\n        let i = this.insertPos(key);\r\n        if (this.arr[i] && mem.eq(this.comparer, this.arr[i].key, key)) {\r\n            return i;\r\n        } else {\r\n            return -1;\r\n        }\r\n    }\r\n\r\n    insertPos(key) {\r\n        let low = 0, high = this.arr.length, mid;\r\n        while (low < high) {\r\n            // faster version of Math.floor((low + high) / 2)\r\n            mid = (low + high) >>> 1; \r\n            mem.lt(this.comparer, this.arr[mid].key, key) ? low = mid + 1 : high = mid\r\n        }\r\n        return low;\r\n    }\r\n\r\n    get(key) {\r\n        const i = this.indexOf(key);\r\n        if (i > -1) {\r\n            return this.arr[i].value;\r\n        }\r\n    }\r\n\r\n    remove(key) {\r\n        const i = this.indexOf(key);\r\n        if (i > -1) {\r\n            this.removeAt(i);\r\n        }\r\n    }\r\n\r\n    add(key, value) {\r\n        const ix = this.insertPos(key);\r\n        let item = { key: key, value: value };\r\n        this.addAt(ix, key, value);\r\n    }\r\n\r\n    addAt(pos, key, value) {\r\n        let item = { key: key, value: value };\r\n        this.arr.splice(pos, 0, item);\r\n    }\r\n\r\n    removeAt(pos) {\r\n        this.arr.splice(pos, 1);\r\n    }\r\n\r\n    getAt(pos) {\r\n        return this.arr[pos];\r\n    }\r\n\r\n    update(item) {\r\n        this.indexOf(item.key);\r\n        if (i !== undefined) {\r\n            this.arr[i].value = item;\r\n        }\r\n    }\r\n}\r\n\r\nexport default BinaryArray;","import * as mem from '../common';\r\nimport BinaryArray from './binaryarray';\r\n\r\nclass BinaryIndex {\r\n    constructor (name, itemFn, keyFn, comparer) {\r\n        this.comparer = comparer || mem.defaultComparer;\r\n        this.index = new BinaryArray(this.comparer);\r\n        this.name = name;\r\n        this.itemFn = itemFn;\r\n        this.keyFn = keyFn;\r\n    }\r\n    \r\n    static build(name, itemFn, keyFn, items, comparer) {\r\n        let bin = new BinaryIndex(name, itemFn, keyFn, comparer);\r\n        bin.populate(items);\r\n        return bin;\r\n    }\r\n\r\n    get keys() {\r\n        return this.index.keys;\r\n    }\r\n\r\n    clear() {\r\n        this.index = new BinaryArray(this.comparer);\r\n    }\r\n\r\n    findMany(keys) {\r\n        keys = mem.oneOrMany(keys);\r\n        let data = keys.map(m => this.find(m));\r\n        return [].concat.apply([], data);\r\n    }\r\n\r\n    find(key) {\r\n        return this.index.get(key);\r\n    }\r\n\r\n    remove(item) {\r\n        const key = this.keyFn(item);\r\n        const pos = this.index.indexOf(key);\r\n        \r\n        if (pos > -1) {\r\n            const entry = this.index.getAt(pos);\r\n            const it = this.itemFn(item);\r\n            const i = entry.value.indexOf(it);\r\n            if (i > -1) {\r\n                entry.value.splice(i, 1);\r\n            }\r\n            if (entry.value.length === 0) {\r\n                this.index.removeAt(pos);\r\n            }\r\n        }\r\n    }\r\n\r\n    populate(items) {\r\n        items = mem.oneOrMany(items);\r\n        items.forEach(item => this.insert(item));\r\n    }\r\n    \r\n    insert(item) {\r\n        const key = this.keyFn(item);\r\n        const it = this.itemFn(item);\r\n        const pos = this.index.insertPos(key);\r\n        const entry = this.index.getAt(pos);\r\n        \r\n        if (entry && mem.eq(this.comparer, entry.key, key)) {\r\n            entry.value.push(it);\r\n        } else {\r\n            this.index.addAt(pos, key, [it]); \r\n        }\r\n    }\r\n\r\n    update(item, olditem) {\r\n        this.remove(olditem);\r\n        this.insert(item);\r\n    }\r\n}\r\n\r\nexport default BinaryIndex;","import HashIndex from './indexes/hashindex';\r\nimport BinaryIndex from './indexes/binaryindex';\r\nimport * as mem from './common';\r\n\r\nclass InMemoryStore {\r\n    constructor(keyFn, comparer) {\r\n        this.indexes = new Map([]);\r\n        this.entries = new Map([]);\r\n        this.keyFn = keyFn;\r\n        this.comparer = comparer || mem.defaultComparer;\r\n    }\r\n\r\n    get isEmpty() {\r\n        return this.entries.size === 0;\r\n    }\r\n\r\n    getIndexKeys(indexName) {\r\n        return this.indexes.get(indexName).keys;\r\n    }\r\n\r\n    populate(items) {\r\n        items = mem.oneOrMany(items);\r\n        this.indexes.forEach(index => index.populate(items));\r\n        const data = items.map(item => [this.keyFn(item), item]);\r\n        this.entries = new Map(data);\r\n    }\r\n\r\n    rebuild(items) {\r\n        this.entries = new Map([]);\r\n        this.indexes.forEach(index => index.clear());\r\n        this.populate(items);\r\n    }\r\n\r\n    destroy() {\r\n        this.indexes = new Map([]);\r\n        this.entries = new Map([]);\r\n        this.keyFn = undefined;\r\n    }\r\n\t\r\n\tget(indexName, values) {\r\n        const data = this.indexes.has(indexName) ? \r\n            this.indexes.get(indexName).findMany(values) : [];\r\n        return mem.extract(this.entries, data);\r\n    }\r\n\r\n    getOne(indexName, value) {\r\n        const data = this.indexes.has(indexName) ? \r\n            this.indexes.get(indexName).find(value) : [];\r\n        return mem.extract(this.entries, data);\r\n    }\r\n\r\n    // Takes array of [indexName, [exactMatch, exactMatch]]\r\n    getFromSet(valueSet) {\r\n        const dataSets = valueSet.map((q) => {\r\n            return this.get(q[0], q[1]);\r\n        });\r\n        const data = mem.intersect(dataSets);\r\n        return mem.extract(this.entries, data);\r\n    }\r\n\r\n    buildIndex(indexName, ixFn) {\r\n        return this.buildBinaryIndex(indexName, ixFn, this.comparer);\r\n    }\r\n\r\n    buildHashIndex(indexName, ixFn) {\r\n        const newIndex = HashIndex.build(indexName, this.keyFn, ixFn, this.entries, this.comparer);\r\n        this.indexes.set(indexName, newIndex);\r\n        return newIndex;\r\n    }\r\n\r\n    buildBinaryIndex(indexName, ixFn) {\r\n        const newIndex = BinaryIndex.build(indexName, this.keyFn, ixFn, this.entries, this.comparer);\r\n        this.indexes.set(indexName, newIndex);\r\n        return newIndex;\r\n    }\r\n\r\n    remove(items) {\r\n        items = mem.oneOrMany(items);\r\n        items.forEach(item => {\r\n            this.removeOne(item);\r\n        });\r\n    }\r\n\r\n    removeOne(item) {\r\n        if (this.indexes.size > 0) {\r\n            this.indexes.forEach(index => index.remove(item));\r\n        }\r\n        return this.entries.delete(this.keyFn(item));\r\n    }\r\n\r\n    removeKey(key) {\r\n        const item = this.entries.get(key);\r\n        if (this.indexes.size > 0) {\r\n            this.indexes.forEach(index => index.remove(item));\r\n        }\r\n        return this.entries.delete(key);\r\n    }\r\n\r\n    add(items) {\r\n        items = mem.oneOrMany(items);\r\n        items.forEach(item => {\r\n            this.updateOne(item);\r\n        });\r\n    }\r\n\r\n    addOne(item) {\r\n        this.updateOne(item);\r\n    }\r\n\r\n    update(items) {\r\n        items = mem.oneOrMany(items);\r\n        items.forEach(item => {\r\n            this.updateOne(item);\r\n        });\r\n    }\r\n\r\n    updateOne(item) {\r\n        let old;\r\n        const key = this.keyFn(item);\r\n        if (this.entries.has(key)) {\r\n            old = this.entries.get(key);\r\n        }\r\n        if (this.indexes.size > 0) {\r\n            this.indexes.forEach(index => index.update(item, old));\r\n        }\r\n        this.entries.set(key, item);\r\n    }\r\n}\r\n\r\nexport default InMemoryStore;"],"names":["mem.defaultComparer","mem.oneOrMany","mem.eq","mem.lt","mem.extract","mem.intersect"],"mappings":";;;;;;;;;;;;;;;IAAO,SAAS,SAAS,CAAC,KAAK,EAAE;IACjC,IAAI,IAAI,CAAC,KAAK,EAAE;IAChB,QAAQ,OAAO,EAAE,CAAC;IAClB,KAAK,MAAM,IAAI,KAAK,YAAY,GAAG,EAAE;IACrC,QAAQ,OAAO,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC;IAC1C,KAAK,MAAM,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;IACtC,QAAQ,OAAO,CAAC,KAAK,CAAC,CAAC;IACvB,KAAK,MAAM;IACX,QAAQ,OAAO,KAAK,CAAC;IACrB,KAAK;IACL,CAAC;;AAED,IAAO,SAAS,EAAE,CAAC,QAAQ,EAAE,CAAC,EAAE,CAAC,EAAE;IACnC,IAAI,OAAO,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;IACjC,CAAC;AACD,AAIA;AACA,IAAO,SAAS,EAAE,CAAC,QAAQ,EAAE,CAAC,EAAE,CAAC,EAAE;IACnC,IAAI,OAAO,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC;IAChC,CAAC;;AAED,IAAO,SAAS,eAAe,CAAC,CAAC,EAAE,CAAC,EAAE;IACtC,IAAI,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;IACtC,CAAC;AACD,AAMA;AACA,IAAO,SAAS,SAAS,CAAC,MAAM,EAAE;IAClC,IAAI,MAAM,OAAO,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC;IACtC,UAAU,MAAM;IAChB,QAAQ,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,MAAM,GAAG,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;IACvD,IAAI,MAAM,QAAQ,GAAG,OAAO,CAAC,CAAC,CAAC;IAC/B,QAAQ,GAAG,GAAG,IAAI,GAAG,EAAE;IACvB,QAAQ,MAAM,GAAG,EAAE,CAAC;;IAEpB,IAAI,KAAK,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IAC5C,QAAQ,MAAM,IAAI,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;IACjC,QAAQ,IAAI,KAAK,GAAG,IAAI,CAAC;IACzB,QAAQ,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE;IAC1C,YAAY,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,SAAS;IACnD,YAAY,KAAK,GAAG,KAAK,CAAC;IAC1B,YAAY,MAAM;IAClB,SAAS;IACT;IACA,QAAQ,GAAG,CAAC,KAAK,IAAI,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,SAAS;IAC7C;IACA,QAAQ,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IACtB,QAAQ,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC;IACrC,KAAK;IACL,IAAI,OAAO,MAAM,CAAC;IAClB,CAAC;;AAED,IAAO,SAAS,OAAO,CAAC,GAAG,EAAE,IAAI,EAAE;IACnC,IAAI,MAAM,CAAC,GAAG,EAAE,CAAC;IACjB,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,KAAK;IAC1B,QAAQ,IAAI,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;IAC1B,YAAY,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IACjC,SAAS;IACT,KAAK,CAAC,CAAC;IACP,IAAI,OAAO,CAAC,CAAC;IACb;;KAAC,DCjED,MAAM,SAAS,CAAC;IAChB,IAAI,WAAW,CAAC,CAAC,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE;IAChD,QAAQ,IAAI,CAAC,QAAQ,GAAG,QAAQ,IAAIA,eAAmB,CAAC;IACxD,QAAQ,IAAI,CAAC,KAAK,GAAG,IAAI,GAAG,CAAC,EAAE,CAAC,CAAC;IACjC,QAAQ,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACzB,QAAQ,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IAC7B,QAAQ,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IAC3B,KAAK;IACL;IACA,IAAI,OAAO,KAAK,CAAC,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,QAAQ,EAAE;IACvD,QAAQ,IAAI,GAAG,GAAG,IAAI,SAAS,CAAC,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;IAC/D,QAAQ,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IAC5B,QAAQ,OAAO,GAAG,CAAC;IACnB,KAAK;;IAEL,IAAI,IAAI,IAAI,GAAG;IACf,QAAQ,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC;IAC7C,KAAK;;IAEL,IAAI,KAAK,GAAG;IACZ,QAAQ,IAAI,CAAC,KAAK,GAAG,IAAI,GAAG,CAAC,EAAE,CAAC,CAAC;IACjC,KAAK;;IAEL,IAAI,QAAQ,CAAC,IAAI,EAAE;IACnB,QAAQ,IAAI,GAAGC,SAAa,CAAC,IAAI,CAAC,CAAC;IACnC,QAAQ,IAAI,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IAC/C,QAAQ,OAAO,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;IACzC,KAAK;;IAEL,IAAI,IAAI,CAAC,GAAG,EAAE;IACd,QAAQ,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IACnC,KAAK;;IAEL,IAAI,MAAM,CAAC,IAAI,EAAE;IACjB,QAAQ,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IACrC,QAAQ,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;IACjC,YAAY,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAC5C,YAAY,MAAM,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IACzC,YAAY,MAAM,CAAC,GAAG,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IACtC,YAAY,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE;IACxB,gBAAgB,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACjC,aAAa;IACb,YAAY,IAAI,GAAG,CAAC,MAAM,KAAK,CAAC,EAAE;IAClC,gBAAgB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;IACvC,aAAa;IACb,SAAS;IACT,KAAK;;IAEL,IAAI,QAAQ,CAAC,KAAK,EAAE;IACpB,QAAQ,KAAK,GAAGA,SAAa,CAAC,KAAK,CAAC,CAAC;IACrC,QAAQ,KAAK,CAAC,OAAO,CAAC,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;IACjD,KAAK;;IAEL,IAAI,MAAM,CAAC,IAAI,EAAE;IACjB,QAAQ,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IACrC,QAAQ,MAAM,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IACrC,QAAQ,IAAI,EAAE,IAAI,GAAG,EAAE;IACvB,YAAY,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;IACrC,gBAAgB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAC7C,aAAa,MAAM;IACnB,gBAAgB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAC1C,aAAa;IACb,SAAS;IACT,KAAK;;IAEL,IAAI,MAAM,CAAC,IAAI,EAAE,OAAO,EAAE;IAC1B,QAAQ,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IAC7B,QAAQ,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAC1B,KAAK;IACL,CAAC;;ICrED,MAAM,WAAW,CAAC;IAClB,IAAI,WAAW,CAAC,CAAC,QAAQ,EAAE;IAC3B,QAAQ,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC;IACtB,QAAQ,IAAI,CAAC,QAAQ,GAAG,QAAQ,IAAID,eAAmB,CAAC;IACxD,KAAK;IACL;IACA,IAAI,KAAK,GAAG;IACZ,QAAQ,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC;IACtB,KAAK;;IAEL,IAAI,IAAI,IAAI,GAAG;IACf,QAAQ,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;IACxC,KAAK;;IAEL,IAAI,OAAO,CAAC,GAAG,EAAE;IACjB,QAAQ,IAAI,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;IACpC,QAAQ,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,IAAIE,EAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE;IACxE,YAAY,OAAO,CAAC,CAAC;IACrB,SAAS,MAAM;IACf,YAAY,OAAO,CAAC,CAAC,CAAC;IACtB,SAAS;IACT,KAAK;;IAEL,IAAI,SAAS,CAAC,GAAG,EAAE;IACnB,QAAQ,IAAI,GAAG,GAAG,CAAC,EAAE,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC;IACjD,QAAQ,OAAO,GAAG,GAAG,IAAI,EAAE;IAC3B;IACA,YAAY,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,MAAM,CAAC,CAAC;IACrC,YAAYC,EAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,IAAI,GAAG,IAAG;IACtF,SAAS;IACT,QAAQ,OAAO,GAAG,CAAC;IACnB,KAAK;;IAEL,IAAI,GAAG,CAAC,GAAG,EAAE;IACb,QAAQ,MAAM,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;IACpC,QAAQ,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE;IACpB,YAAY,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;IACrC,SAAS;IACT,KAAK;;IAEL,IAAI,MAAM,CAAC,GAAG,EAAE;IAChB,QAAQ,MAAM,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;IACpC,QAAQ,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE;IACpB,YAAY,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;IAC7B,SAAS;IACT,KAAK;;IAEL,IAAI,GAAG,CAAC,GAAG,EAAE,KAAK,EAAE;IACpB,QAAQ,MAAM,EAAE,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;AACvC,IACA,QAAQ,IAAI,CAAC,KAAK,CAAC,EAAE,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;IACnC,KAAK;;IAEL,IAAI,KAAK,CAAC,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE;IAC3B,QAAQ,IAAI,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC;IAC9C,QAAQ,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;IACtC,KAAK;;IAEL,IAAI,QAAQ,CAAC,GAAG,EAAE;IAClB,QAAQ,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;IAChC,KAAK;;IAEL,IAAI,KAAK,CAAC,GAAG,EAAE;IACf,QAAQ,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAC7B,KAAK;;IAEL,IAAI,MAAM,CAAC,IAAI,EAAE;IACjB,QAAQ,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAC/B,QAAQ,IAAI,CAAC,KAAK,SAAS,EAAE;IAC7B,YAAY,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC;IACrC,SAAS;IACT,KAAK;IACL,CAAC;;ICvED,MAAM,WAAW,CAAC;IAClB,IAAI,WAAW,CAAC,CAAC,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE;IAChD,QAAQ,IAAI,CAAC,QAAQ,GAAG,QAAQ,IAAIH,eAAmB,CAAC;IACxD,QAAQ,IAAI,CAAC,KAAK,GAAG,IAAI,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACpD,QAAQ,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACzB,QAAQ,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IAC7B,QAAQ,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IAC3B,KAAK;IACL;IACA,IAAI,OAAO,KAAK,CAAC,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,QAAQ,EAAE;IACvD,QAAQ,IAAI,GAAG,GAAG,IAAI,WAAW,CAAC,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;IACjE,QAAQ,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IAC5B,QAAQ,OAAO,GAAG,CAAC;IACnB,KAAK;;IAEL,IAAI,IAAI,IAAI,GAAG;IACf,QAAQ,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;IAC/B,KAAK;;IAEL,IAAI,KAAK,GAAG;IACZ,QAAQ,IAAI,CAAC,KAAK,GAAG,IAAI,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACpD,KAAK;;IAEL,IAAI,QAAQ,CAAC,IAAI,EAAE;IACnB,QAAQ,IAAI,GAAGC,SAAa,CAAC,IAAI,CAAC,CAAC;IACnC,QAAQ,IAAI,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IAC/C,QAAQ,OAAO,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;IACzC,KAAK;;IAEL,IAAI,IAAI,CAAC,GAAG,EAAE;IACd,QAAQ,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IACnC,KAAK;;IAEL,IAAI,MAAM,CAAC,IAAI,EAAE;IACjB,QAAQ,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IACrC,QAAQ,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;IAC5C;IACA,QAAQ,IAAI,GAAG,GAAG,CAAC,CAAC,EAAE;IACtB,YAAY,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAChD,YAAY,MAAM,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IACzC,YAAY,MAAM,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IAC9C,YAAY,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE;IACxB,gBAAgB,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACzC,aAAa;IACb,YAAY,IAAI,KAAK,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;IAC1C,gBAAgB,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;IACzC,aAAa;IACb,SAAS;IACT,KAAK;;IAEL,IAAI,QAAQ,CAAC,KAAK,EAAE;IACpB,QAAQ,KAAK,GAAGA,SAAa,CAAC,KAAK,CAAC,CAAC;IACrC,QAAQ,KAAK,CAAC,OAAO,CAAC,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;IACjD,KAAK;IACL;IACA,IAAI,MAAM,CAAC,IAAI,EAAE;IACjB,QAAQ,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IACrC,QAAQ,MAAM,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IACrC,QAAQ,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;IAC9C,QAAQ,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAC5C;IACA,QAAQ,IAAI,KAAK,IAAIC,EAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE;IAC5D,YAAY,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IACjC,SAAS,MAAM;IACf,YAAY,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAC7C,SAAS;IACT,KAAK;;IAEL,IAAI,MAAM,CAAC,IAAI,EAAE,OAAO,EAAE;IAC1B,QAAQ,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IAC7B,QAAQ,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAC1B,KAAK;IACL,CAAC;;ICvED,MAAM,aAAa,CAAC;IACpB,IAAI,WAAW,CAAC,KAAK,EAAE,QAAQ,EAAE;IACjC,QAAQ,IAAI,CAAC,OAAO,GAAG,IAAI,GAAG,CAAC,EAAE,CAAC,CAAC;IACnC,QAAQ,IAAI,CAAC,OAAO,GAAG,IAAI,GAAG,CAAC,EAAE,CAAC,CAAC;IACnC,QAAQ,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IAC3B,QAAQ,IAAI,CAAC,QAAQ,GAAG,QAAQ,IAAIF,eAAmB,CAAC;IACxD,KAAK;;IAEL,IAAI,IAAI,OAAO,GAAG;IAClB,QAAQ,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,KAAK,CAAC,CAAC;IACvC,KAAK;;IAEL,IAAI,YAAY,CAAC,SAAS,EAAE;IAC5B,QAAQ,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC;IAChD,KAAK;;IAEL,IAAI,QAAQ,CAAC,KAAK,EAAE;IACpB,QAAQ,KAAK,GAAGC,SAAa,CAAC,KAAK,CAAC,CAAC;IACrC,QAAQ,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,IAAI,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;IAC7D,QAAQ,MAAM,IAAI,GAAG,KAAK,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;IACjE,QAAQ,IAAI,CAAC,OAAO,GAAG,IAAI,GAAG,CAAC,IAAI,CAAC,CAAC;IACrC,KAAK;;IAEL,IAAI,OAAO,CAAC,KAAK,EAAE;IACnB,QAAQ,IAAI,CAAC,OAAO,GAAG,IAAI,GAAG,CAAC,EAAE,CAAC,CAAC;IACnC,QAAQ,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,IAAI,KAAK,CAAC,KAAK,EAAE,CAAC,CAAC;IACrD,QAAQ,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IAC7B,KAAK;;IAEL,IAAI,OAAO,GAAG;IACd,QAAQ,IAAI,CAAC,OAAO,GAAG,IAAI,GAAG,CAAC,EAAE,CAAC,CAAC;IACnC,QAAQ,IAAI,CAAC,OAAO,GAAG,IAAI,GAAG,CAAC,EAAE,CAAC,CAAC;IACnC,QAAQ,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC;IAC/B,KAAK;IACL;IACA,CAAC,GAAG,CAAC,SAAS,EAAE,MAAM,EAAE;IACxB,QAAQ,MAAM,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC;IAChD,YAAY,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC;IAC9D,QAAQ,OAAOG,OAAW,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;IAC/C,KAAK;;IAEL,IAAI,MAAM,CAAC,SAAS,EAAE,KAAK,EAAE;IAC7B,QAAQ,MAAM,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC;IAChD,YAAY,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;IACzD,QAAQ,OAAOA,OAAW,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;IAC/C,KAAK;;IAEL;IACA,IAAI,UAAU,CAAC,QAAQ,EAAE;IACzB,QAAQ,MAAM,QAAQ,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK;IAC7C,YAAY,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACxC,SAAS,CAAC,CAAC;IACX,QAAQ,MAAM,IAAI,GAAGC,SAAa,CAAC,QAAQ,CAAC,CAAC;IAC7C,QAAQ,OAAOD,OAAW,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;IAC/C,KAAK;;IAEL,IAAI,UAAU,CAAC,SAAS,EAAE,IAAI,EAAE;IAChC,QAAQ,OAAO,IAAI,CAAC,gBAAgB,CAAC,SAAS,EAAE,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;IACrE,KAAK;;IAEL,IAAI,cAAc,CAAC,SAAS,EAAE,IAAI,EAAE;IACpC,QAAQ,MAAM,QAAQ,GAAG,SAAS,CAAC,KAAK,CAAC,SAAS,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;IACnG,QAAQ,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;IAC9C,QAAQ,OAAO,QAAQ,CAAC;IACxB,KAAK;;IAEL,IAAI,gBAAgB,CAAC,SAAS,EAAE,IAAI,EAAE;IACtC,QAAQ,MAAM,QAAQ,GAAG,WAAW,CAAC,KAAK,CAAC,SAAS,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;IACrG,QAAQ,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;IAC9C,QAAQ,OAAO,QAAQ,CAAC;IACxB,KAAK;;IAEL,IAAI,MAAM,CAAC,KAAK,EAAE;IAClB,QAAQ,KAAK,GAAGH,SAAa,CAAC,KAAK,CAAC,CAAC;IACrC,QAAQ,KAAK,CAAC,OAAO,CAAC,IAAI,IAAI;IAC9B,YAAY,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;IACjC,SAAS,CAAC,CAAC;IACX,KAAK;;IAEL,IAAI,SAAS,CAAC,IAAI,EAAE;IACpB,QAAQ,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,GAAG,CAAC,EAAE;IACnC,YAAY,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,IAAI,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;IAC9D,SAAS;IACT,QAAQ,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;IACrD,KAAK;;IAEL,IAAI,SAAS,CAAC,GAAG,EAAE;IACnB,QAAQ,MAAM,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAC3C,QAAQ,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,GAAG,CAAC,EAAE;IACnC,YAAY,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,IAAI,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;IAC9D,SAAS;IACT,QAAQ,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;IACxC,KAAK;;IAEL,IAAI,GAAG,CAAC,KAAK,EAAE;IACf,QAAQ,KAAK,GAAGA,SAAa,CAAC,KAAK,CAAC,CAAC;IACrC,QAAQ,KAAK,CAAC,OAAO,CAAC,IAAI,IAAI;IAC9B,YAAY,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;IACjC,SAAS,CAAC,CAAC;IACX,KAAK;;IAEL,IAAI,MAAM,CAAC,IAAI,EAAE;IACjB,QAAQ,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;IAC7B,KAAK;;IAEL,IAAI,MAAM,CAAC,KAAK,EAAE;IAClB,QAAQ,KAAK,GAAGA,SAAa,CAAC,KAAK,CAAC,CAAC;IACrC,QAAQ,KAAK,CAAC,OAAO,CAAC,IAAI,IAAI;IAC9B,YAAY,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;IACjC,SAAS,CAAC,CAAC;IACX,KAAK;;IAEL,IAAI,SAAS,CAAC,IAAI,EAAE;IACpB,QAAQ,IAAI,GAAG,CAAC;IAChB,QAAQ,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IACrC,QAAQ,IAAI,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;IACnC,YAAY,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IACxC,SAAS;IACT,QAAQ,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,GAAG,CAAC,EAAE;IACnC,YAAY,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,IAAI,KAAK,CAAC,MAAM,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC;IACnE,SAAS;IACT,QAAQ,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;IACpC,KAAK;IACL,CAAC;;;;;;;;"}