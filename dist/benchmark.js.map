{"version":3,"file":"benchmark.js","sources":["../src/common.js","../src/find.js","../src/in-memory-store.js","../node_modules/avl/src/utils.js","../node_modules/avl/src/index.js","../src/indexes/baseindex.js","../src/indexes/avlindex.js","../node_modules/bintrees/lib/treebase.js","../node_modules/bintrees/lib/rbtree.js","../node_modules/bintrees/lib/bintree.js","../node_modules/bintrees/index.js","../bench/rbindex.js","../src/indexes/hashindex.js","../src/indexes/binaryarray.js","../src/indexes/binaryindex.js","../bench/index.js"],"sourcesContent":["/**\r\n* Callback for comparer\r\n* @callback comparerCallback\r\n* @param   {Key} a\r\n* @param   {Key} b\r\n* @returns {number} -1 if a < b, 0 if a === b, 1 if a > b\r\n*/\r\n\r\n/**\r\n * Callback for item identifier\r\n * @callback itemCallback\r\n * @param   {any} item\r\n * @returns {any} unique value to identify the item\r\n */\r\n\r\n/**\r\n * Callback for key value\r\n * @callback keyCallback\r\n * @param   {any} item\r\n * @returns {any} value to index this item on\r\n */\r\n\r\n/**\r\n * Converts a passed value into an array.  Useful if you don't know\r\n * if your passed parameter is an array or single value.\r\n * @param  {any} items single item, array or javascript Map object\r\n * @return {Array<any>} array of passed item(s)\r\n */\r\nexport function oneOrMany(items) {\r\n    if (!items) {\r\n        return [];\r\n    } else if (items instanceof Map) {\r\n        return Array.from(items.values());\r\n    } else if (!Array.isArray(items)) {\r\n        return [items];\r\n    } else {\r\n        return items;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns whether or not a < b\r\n * @param  {comparerCallback} comparer comparer to use\r\n * @param  {any} a \r\n * @param  {any} b \r\n * @return {boolean} whether or not a <= b\r\n */\r\nexport function lte(comparer, a, b) {\r\n    return comparer(a, b) <= 0;\r\n}\r\n\r\n/**\r\n * Returns whether or not a > b\r\n * @param  {comparerCallback} comparer comparer to use\r\n * @param  {any} a \r\n * @param  {any} b \r\n * @return {boolean} whether or not a => b\r\n */\r\nexport function gte(comparer, a, b) {\r\n    return comparer(a, b) >= 0;\r\n}\r\n\r\n/**\r\n * Returns whether or not a < b\r\n * @param  {comparerCallback} comparer comparer to use\r\n * @param  {any} a \r\n * @param  {any} b \r\n * @return {boolean} whether or not a < b\r\n */\r\nexport function lt(comparer, a, b) {\r\n    return comparer(a, b) < 0;\r\n}\r\n\r\n/**\r\n * Returns whether or not a > b\r\n * @param  {comparerCallback} comparer comparer to use\r\n * @param  {any} a \r\n * @param  {any} b \r\n * @return {boolean} whether or not a > b\r\n */\r\nexport function gt(comparer, a, b) {\r\n    return comparer(a, b) > 0;\r\n}\r\n\r\n/**\r\n * Returns whether or not a === b\r\n * @param  {comparerCallback} comparer comparer to use\r\n * @param  {any} a \r\n * @param  {any} b \r\n * @return {boolean} whether or not a === b\r\n */\r\nexport function eq(comparer, a, b) {\r\n    return comparer(a, b) === 0;\r\n}\r\n\r\n/**\r\n * Default comparer equal to as used on Array.sort\r\n * @param  {any} a \r\n * @param  {any} b \r\n * @return {number} result of comparison\r\n */\r\nexport function defaultComparer(a, b) {\r\n    return a > b ? 1 : a < b ? -1 : 0;\r\n}\r\n\r\n/**\r\n * Wraps any comparer with a call to .key on both a and b.\r\n * Useful if you comparer is a value comparer but the values\r\n * are objects with keys to compare.\r\n * @param  {comparerCallback} comparer comparer to use\r\n * @return {comparerCallback} comparer wrapped in .key calls\r\n */\r\nexport function keyWrapComparer(comparer) {\r\n    return function(a, b) {\r\n        return comparer(a.key, b.key);\r\n    };\r\n}\r\n\r\n/**\r\n * Intersects N arrays\r\n * @param  {Array<Array<any>>} arrays N arrays with values to intersect\r\n * @return {Array<any>} array of values where that value is in all array\r\n */\r\nexport function intersect(arrays) {\r\n    const ordered = (arrays.length === 1\r\n        ? arrays : \r\n        arrays.sort((a1,a2) => a1.length - a2.length));\r\n    const shortest = ordered[0],\r\n        set = new Set(), \r\n        result = [];\r\n\r\n    for (let i=0; i < shortest.length; i++) {\r\n        const item = shortest[i];\r\n        let every = true; // don't use ordered.every ... it is slow\r\n        for(let j=1;j<ordered.length;j++) {\r\n            if(ordered[j].includes(item)) continue;\r\n            every = false;\r\n            break;\r\n        }\r\n        // ignore if not in every other array, or if already captured\r\n        if(!every || set.has(item)) continue;\r\n        // otherwise, add to book keeping set and the result\r\n        set.add(item);\r\n        result[result.length] = item;\r\n    }\r\n    return result;\r\n}\r\n\r\n/**\r\n * Extracts items passed by an array of keys from the passed map.\r\n * @param  {Map} map javascript map object containing all keys and values\r\n * @param  {Array<any>} keys keys to extract from the map\r\n * @return {Array<any>} array of values extracted from the passed map\r\n */\r\nexport function extract(map, keys) {\r\n    const r = [];\r\n    keys = oneOrMany(keys);\r\n    map = map || new Map([]);\r\n\r\n    keys.forEach((key) => {\r\n        if (map.has(key)) {\r\n            r.push(map.get(key));\r\n        }\r\n    });    \r\n    return r;\r\n}","import * as mem from './common';\r\n\r\n/**\r\n * Key value storage with support for grouping/returning items by index value\r\n */\r\nexport default class Find {\r\n    /**\r\n     * @param {Map<indexName, index>} indexes Map of indexes to query\r\n     */\r\n    constructor(indexes) {\r\n        this.indexes = indexes;\r\n    }\r\n\r\n    /**\r\n     * Searches one or many indexes, each using specified operator for specified value.\r\n     * @param {Array<any>} filters [{\"indexName\":{\"operator\":\"value\"}}, {\"indexName\":{\"operator\":\"value\"}}]\r\n     * @returns {Array<any>} keys found in all passed index searches\r\n     */\r\n    $and(filters) {\r\n        let filterFns = this._getFilterFns(filters, this.indexes);\r\n        let dataSets = filterFns.map(fn => fn());\r\n        return mem.intersect(dataSets);\r\n    }\r\n\r\n    /**\r\n     * Searches one or many indexes, each using specified operator for specified value.\r\n     * @param {Array<any>} filters [{\"indexName\":{\"operator\":\"value\"}}, {\"indexName\":{\"operator\":\"value\"}}]\r\n     * @returns {Array<any>} keys found in all passed index searches\r\n     */\r\n    $or(filters) {\r\n        let filterFns = this._getFilterFns(filters, this.indexes);\r\n        let dataSets = filterFns.map(fn => fn());\r\n        return [].concat.apply([], dataSets);\r\n    }\r\n\r\n    /**\r\n     * Performs a find across many indexes based on limited find selector language.\r\n     * @param {Array<any>} selector\r\n     * { $or: [{\"indexName\":{\"operator\":\"value\"}}, {\"indexName\":{\"operator\":\"value\"}}],\r\n     * $or: [{\"indexName\":{\"operator\":\"value\"}}, {\"indexName\":{\"operator\":\"value\"}}] }\r\n     * @returns {Array<any>} items from the store found in all passed index searches\r\n     */\r\n    find(query) {\r\n        let selector = this._parseQuery(query);\r\n        var joins = Object.keys(selector);\r\n        let fns = joins.map(op => this._combinatorFn(op, selector[op]));\r\n        let dataSets = fns.map(fn => fn());\r\n        // All operator results are ultimately $and together\r\n        return mem.intersect(dataSets);\r\n    }\r\n    \r\n    /**\r\n     * Gets the combinator function based on the specified combinator key.\r\n     * @param {*} key Either $and or $or\r\n     * @param {*} filters The filters to pass through to the combinator.\r\n     */\r\n    _combinatorFn(key, filters) {\r\n        switch(key) {\r\n            case \"$and\":\r\n                return () => this.$and(filters);\r\n            case \"$or\":\r\n                return () => this.$or(filters);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets a filter function based on the specified operator key..\r\n     * @param {string} operator $lt/$gt/$gte/$lte or $eq\r\n     * @returns {any} function coresponding to passed key\r\n     */\r\n    _opertatorFn(key, index, val) {\r\n        switch (key) {\r\n            case '$lt':\r\n                return () => index.$lt(val);\r\n            case '$lte':\r\n                return () => index.$lte(val);\r\n            case '$gt':\r\n                return () => index.$gt(val);\r\n            case '$gte':\r\n                return () => index.$gte(val);\r\n            case '$in':\r\n                return () => index.$in(val);\r\n            case '$eq':\r\n                return () => index.$eq(val);\r\n        }\r\n    }\r\n  \r\n    /**\r\n     * Parses loose query language to strict with implicit operators and combinators\r\n     * made explicit.\r\n     * @param {*} query Query to parse in following supported formats...\r\n     * { $or: [{\"indexName\":{\"operator\":\"value\"}}, {\"indexName\":{\"operator\":\"value\"}}],\r\n     * $or: [{\"indexName\":{\"operator\":\"value\"}}, {\"indexName\":{\"operator\":\"value\"}}] }\r\n     * OR (implicit $and)\r\n     * [{\"indexName\":{\"operator\":\"value\"}}, {\"indexName\":{\"operator\":\"value\"}}]\r\n     * OR (implicit $eq)\r\n     * {\"indexName\":\"value\", \"indexName\":\"value\"}\r\n     * OR (implicit $in)\r\n     * {\"indexName\":\"value\", \"indexName\":[\"value1\", \"value1\"]}\r\n     * @returns {object} Strict query format in format...\r\n     * { $and: [{\"indexName\":{\"operator\":\"value\"}}, {\"indexName\":{\"operator\":\"value\"}}],\r\n     * $or: [{\"indexName\":{\"operator\":\"value\"}}, {\"indexName\":{\"operator\":\"value\"}}] }\r\n     */\r\n    _parseQuery(query) {\r\n        let selector = {};\r\n        if (Array.isArray(query)) {\r\n            selector['$and'] = [];\r\n            this._parseInnerSelector(query, selector['$and']);\r\n        } else if (typeof query === 'object') {\r\n            let keys = Object.keys(query);\r\n            keys.forEach(key => {\r\n                selector[key] = [];\r\n                this._parseInnerSelector(query[key], selector[key]);\r\n            });\r\n        } else {\r\n            throw new SyntaxError(`Query should be an object or an array ${JSON.stringify(query)}`);\r\n        }\r\n        return selector;\r\n    }\r\n\r\n    _parseInnerSelector(query, selectors) {\r\n        // Inner selector should be an array\r\n        if (!Array.isArray(query)) {\r\n            query = [query];\r\n        }\r\n\r\n        let converted = query.map(part => {\r\n            let selector = {};\r\n            if (typeof part !== 'object') {\r\n                throw new SyntaxError(`Selector part should be an object ${JSON.stringify(part)}`);\r\n            }\r\n\r\n            Object.keys(part).forEach(k => {\r\n                // First part is always an index name (i.e. field name)\r\n                selector[k] = {};\r\n\r\n                // If it's an object, we've got an operator/key combination\r\n                // otherwise it's just a value\r\n                if (Array.isArray(part[k])) {\r\n                    selector[k]['$in'] = part[k];\r\n                } else if (typeof part[k] === 'object') {\r\n                    let op = Object.keys(part[k])[0];\r\n                    selector[k][op] = part[k][op];\r\n                } else {\r\n                    selector[k]['$eq'] = part[k];\r\n                }\r\n            });\r\n            return selector;\r\n        });\r\n\r\n        selectors.push(...converted);\r\n    }\r\n\r\n    /**\r\n     * Get function array based on specified find criteria.\r\n     * @param {Array<any>} filters [{\"indexName\":{\"operator\":\"value\"}}, {\"indexName\":{\"operator\":\"value\"}}]\r\n     * @returns {Array<any>} Array of functions to perform specified find operations.\r\n     */\r\n    _getFilterFns(filters, indexMap) {\r\n        filters = mem.oneOrMany(filters);\r\n        return filters.map(f => {\r\n            // only one entry per filter\r\n            let filter = Object.entries(f)[0];\r\n            let indexName = filter[0];\r\n            let action = filter[1];\r\n\r\n            if (typeof action !== 'object') {\r\n                throw new TypeError(`Filter must contain a valid action object, passed filter ${filter}`);\r\n            }\r\n            \r\n            const op = Object.keys(action)[0];\r\n            const val = action[op];\r\n\r\n            if (!this.indexes.has(indexName)) {\r\n                throw new TypeError(`Invalid index specified ${indexName}`);\r\n            }\r\n\r\n            return this._opertatorFn(op, this.indexes.get(indexName), val);\r\n        });\r\n    }\r\n}","import * as mem from './common';\r\nimport Find from './find';\r\n\r\n/**\r\n * Key value storage with support for grouping/returning items by index value\r\n */\r\nexport class InMemoryStore {\r\n   /**\r\n    * @param  {keyCallback} [keyFn] function to call to get the key of the items in this store\r\n    */\r\n    constructor(keyFn) {\r\n        this.indexes = new Map([]);\r\n        this.entries = new Map([]);\r\n        this.finder = new Find(this.indexes);\r\n        this.keyFn = keyFn;        \r\n    }\r\n\r\n    find(query) {\r\n        let data = this.finder.find(query);\r\n        return mem.extract(this.entries, data);\r\n    }\r\n\r\n    /**\r\n     * Returns whether the store is empty\r\n     * @return {boolean}\r\n     */\r\n    get isEmpty() {\r\n        return this.entries.size === 0;\r\n    }\r\n\r\n    /**\r\n     * Returns the number of items in the store\r\n     * @return {number}\r\n     */\r\n    get size() {\r\n        return this.entries.size;\r\n    }\r\n\r\n    /**\r\n     * Returns whether or not this store is empty\r\n     * @abstract\r\n     * @return {boolean}\r\n     */\r\n    get isEmpty() {\r\n        return this.size === 0;\r\n    }\r\n\r\n    /**\r\n     * Gets an index from the store by name.\r\n     * @param {string} name name of the index to get\r\n     * @returns {BaseIndex} index found\r\n     */\r\n    index(name) {\r\n        if (!this.indexes.has(name)) {\r\n            throw new Error(`Index ${name} not found in store`);\r\n        };\r\n        return this.indexes.get(name);\r\n    }\r\n\r\n    /**\r\n     * Returns all keys wihin the specified index\r\n     * @return {Array<Key>}\r\n     */\r\n    getIndexKeys(indexName) {\r\n        return this.indexes.get(indexName).keys;\r\n    }\r\n\r\n    /**\r\n     * Populates a new store with items using bulk load methods for indexes if available\r\n     * @param  {Array<any>} items items to populate store with\r\n     */\r\n    populate(items) {\r\n        if (!this.isEmpty) {\r\n            throw new Error(`Store must be empty to use populate. \r\n                Store currently has ${this.size} items.`);\r\n        }\r\n\r\n        items = mem.oneOrMany(items);\r\n        this.indexes.forEach(index => index.populate(items));\r\n        const data = items.map(item => [this.keyFn(item), item]);\r\n        this.entries = new Map(data);\r\n    }\r\n\r\n    /**\r\n     * Clears and re-populates a new store with items using bulk \r\n     * load methods for indexes if available\r\n     * @param  {Array<any>} items items to populate store with\r\n     */\r\n    rebuild(items) {\r\n        this.entries = new Map([]);\r\n        this.indexes.forEach(index => index.clear());\r\n        this.populate(items);\r\n    }\r\n\r\n    /**\r\n     * Clear the store\r\n     * @return {InMemoryStore}\r\n     */\r\n    destroy() {\r\n        this.indexes = new Map([]);\r\n        this.entries = new Map([]);\r\n        this.keyFn = undefined;\r\n    }\r\n    \r\n    /**\r\n     * Whether the store contains an item with the given key\r\n     * @param  {Key} key\r\n     * @return {boolean} true/false\r\n     */\r\n    has(item) {\r\n        return this.entries.has(this.keyFn(item));\r\n    }\r\n\r\n    /**\r\n     * Returns items within specified index matching passed values\r\n     * @param  {string} indexName index to search\r\n     * @param  {Array<any>} values specified index values\r\n     * @return {Array<any>} values found\r\n     */\r\n\tget(indexName, values) {\r\n        const data = this.indexes.has(indexName) ? \r\n            this.indexes.get(indexName).findMany(values) : [];\r\n        return mem.extract(this.entries, data);\r\n    }\r\n\r\n    /**\r\n     * Returns items within specified index matching passed value\r\n     * @param  {string} indexName index to search\r\n     * @param  {any} value specified index value\r\n     * @return {Array<any>} values found\r\n     */\r\n    getOne(indexName, value) {\r\n        const data = this.indexes.has(indexName) ? \r\n            this.indexes.get(indexName).find(value) : [];\r\n        return mem.extract(this.entries, data);\r\n    }\r\n\r\n    /**\r\n     * Adds a new index onto this store if it does not already exist. Populates index with entries\r\n     * if index not already populated.\r\n     * @param  {BaseIndex} index index ensure exists and is populated\r\n     * @return {boolean} true if index was added by this operation, false if already exists.\r\n     */\r\n    ensureIndex(index) {\r\n        if (!this.indexes.has(index.name)) {\r\n            this.indexes.set(index.name, index);\r\n            if (index.isEmpty) {\r\n                index.populate(this.entries);\r\n            }\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes items from the store and any associated indexes\r\n     * @param  {Array<any>} items items to remove\r\n     * @return {Array<boolean>} whether each remove succeeded (false if not found)\r\n     */\r\n    remove(items) {\r\n        items = mem.oneOrMany(items);\r\n        return items.map(item => this.removeOne(item));\r\n    }\r\n\r\n    /**\r\n     * Removes an item from the store and any associated indexes\r\n     * @param  {any} item item to remove\r\n     * @return {boolean} whether remove succeeded (false if not found)\r\n     */\r\n    removeOne(item) {\r\n        if (this.indexes.size > 0) {\r\n            this.indexes.forEach(index => index.remove(item));\r\n        }\r\n        return this.entries.delete(this.keyFn(item));\r\n    }\r\n\r\n    /**\r\n     * Removes an item from the store by key and any associated indexes\r\n     * @param  {any} key key of item to remove\r\n     * @return {boolean} whether remove succeeded (false if not found)\r\n     */\r\n    removeKey(key) {\r\n        const item = this.entries.get(key);\r\n        if (!item) {\r\n            return false;\r\n        }\r\n        if (this.indexes.size > 0) {\r\n            this.indexes.forEach(index => index.remove(item));\r\n        }\r\n        return this.entries.delete(key);\r\n    }\r\n\r\n    /**\r\n     * Adds items to the store and updated any associated indexes\r\n     * @param  {Array<any>} items items to add\r\n     */\r\n    add(items) {\r\n        items = mem.oneOrMany(items);\r\n        items.map(item => this.updateOne(item));\r\n    }\r\n\r\n    /**\r\n     * Adds an item to the store and updated any associated indexes\r\n     * @param  {any} item item to add\r\n     */\r\n    addOne(item) {\r\n        this.updateOne(item);\r\n    }\r\n\r\n    /**\r\n     * Updates items to the store and updated any associated indexes\r\n     * @param  {Array<any>} items items to update\r\n     */\r\n    update(items) {\r\n        items = mem.oneOrMany(items);\r\n        items.forEach(item => {\r\n            this.updateOne(item);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Updates an item in the store and updated any associated indexes\r\n     * @param  {any} item item to update\r\n     */\r\n    updateOne(item) {\r\n        let old;\r\n        const key = this.keyFn(item);\r\n        if (this.entries.has(key)) {\r\n            old = this.entries.get(key);\r\n        }\r\n        if (this.indexes.size > 0) {\r\n            this.indexes.forEach(index => index.update(item, old));\r\n        }\r\n        this.entries.set(key, item);\r\n    }\r\n}","\n/**\n * Prints tree horizontally\n * @param  {Node}                       root\n * @param  {Function(node:Node):String} [printNode]\n * @return {String}\n */\nexport function print (root, printNode = (n) => n.key) {\n  var out = [];\n  row(root, '', true, (v) => out.push(v), printNode);\n  return out.join('');\n}\n\n/**\n * Prints level of the tree\n * @param  {Node}                        root\n * @param  {String}                      prefix\n * @param  {Boolean}                     isTail\n * @param  {Function(in:string):void}    out\n * @param  {Function(node:Node):String}  printNode\n */\nfunction row (root, prefix, isTail, out, printNode) {\n  if (root) {\n    out(`${ prefix }${ isTail ? '└── ' : '├── ' }${ printNode(root) }\\n`);\n    const indent = prefix + (isTail ? '    ' : '│   ');\n    if (root.left)  row(root.left,  indent, false, out, printNode);\n    if (root.right) row(root.right, indent, true,  out, printNode);\n  }\n}\n\n\n/**\n * Is the tree balanced (none of the subtrees differ in height by more than 1)\n * @param  {Node}    root\n * @return {Boolean}\n */\nexport function isBalanced(root) {\n  if (root === null) return true; // If node is empty then return true\n\n  // Get the height of left and right sub trees\n  var lh = height(root.left);\n  var rh = height(root.right);\n\n  if (Math.abs(lh - rh) <= 1 &&\n      isBalanced(root.left)  &&\n      isBalanced(root.right)) return true;\n\n  // If we reach here then tree is not height-balanced\n  return false;\n}\n\n/**\n * The function Compute the 'height' of a tree.\n * Height is the number of nodes along the longest path\n * from the root node down to the farthest leaf node.\n *\n * @param  {Node} node\n * @return {Number}\n */\nfunction height(node) {\n  return node ? (1 + Math.max(height(node.left), height(node.right))) : 0;\n}\n\n\nexport function loadRecursive (parent, keys, values, start, end) {\n  const size = end - start;\n  if (size > 0) {\n    const middle = start + Math.floor(size / 2);\n    const key    = keys[middle];\n    const data   = values[middle];\n    const node   = { key, data, parent };\n    node.left    = loadRecursive(node, keys, values, start, middle);\n    node.right   = loadRecursive(node, keys, values, middle + 1, end);\n    return node;\n  }\n  return null;\n}\n\n\nexport function markBalance(node) {\n  if (node === null) return 0;\n  const lh = markBalance(node.left);\n  const rh = markBalance(node.right);\n\n  node.balanceFactor = lh - rh;\n  return Math.max(lh, rh) + 1;\n}\n\n\nexport function sort(keys, values, left, right, compare) {\n  if (left >= right) return;\n\n  // eslint-disable-next-line no-bitwise\n  const pivot = keys[(left + right) >> 1];\n  let i = left - 1;\n  let j = right + 1;\n\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    do i++; while (compare(keys[i], pivot) < 0);\n    do j--; while (compare(keys[j], pivot) > 0);\n    if (i >= j) break;\n\n    let tmp = keys[i];\n    keys[i] = keys[j];\n    keys[j] = tmp;\n\n    tmp = values[i];\n    values[i] = values[j];\n    values[j] = tmp;\n  }\n\n  sort(keys, values,  left,     j, compare);\n  sort(keys, values, j + 1, right, compare);\n}\n","import { print, isBalanced, loadRecursive, markBalance, sort } from './utils';\n\n\n// function createNode (parent, left, right, height, key, data) {\n//   return { parent, left, right, balanceFactor: height, key, data };\n// }\n\n/**\n * @typedef {{\n *   parent:        ?Node,\n *   left:          ?Node,\n *   right:         ?Node,\n *   balanceFactor: number,\n *   key:           Key,\n *   data:          Value\n * }} Node\n */\n\n/**\n * @typedef {*} Key\n */\n\n/**\n * @typedef {*} Value\n */\n\n/**\n * Default comparison function\n * @param {Key} a\n * @param {Key} b\n * @returns {number}\n */\nfunction DEFAULT_COMPARE (a, b) { return a > b ? 1 : a < b ? -1 : 0; }\n\n\n/**\n * Single left rotation\n * @param  {Node} node\n * @return {Node}\n */\nfunction rotateLeft (node) {\n  var rightNode = node.right;\n  node.right    = rightNode.left;\n\n  if (rightNode.left) rightNode.left.parent = node;\n\n  rightNode.parent = node.parent;\n  if (rightNode.parent) {\n    if (rightNode.parent.left === node) {\n      rightNode.parent.left = rightNode;\n    } else {\n      rightNode.parent.right = rightNode;\n    }\n  }\n\n  node.parent    = rightNode;\n  rightNode.left = node;\n\n  node.balanceFactor += 1;\n  if (rightNode.balanceFactor < 0) {\n    node.balanceFactor -= rightNode.balanceFactor;\n  }\n\n  rightNode.balanceFactor += 1;\n  if (node.balanceFactor > 0) {\n    rightNode.balanceFactor += node.balanceFactor;\n  }\n  return rightNode;\n}\n\n\nfunction rotateRight (node) {\n  var leftNode = node.left;\n  node.left = leftNode.right;\n  if (node.left) node.left.parent = node;\n\n  leftNode.parent = node.parent;\n  if (leftNode.parent) {\n    if (leftNode.parent.left === node) {\n      leftNode.parent.left = leftNode;\n    } else {\n      leftNode.parent.right = leftNode;\n    }\n  }\n\n  node.parent    = leftNode;\n  leftNode.right = node;\n\n  node.balanceFactor -= 1;\n  if (leftNode.balanceFactor > 0) {\n    node.balanceFactor -= leftNode.balanceFactor;\n  }\n\n  leftNode.balanceFactor -= 1;\n  if (node.balanceFactor < 0) {\n    leftNode.balanceFactor += node.balanceFactor;\n  }\n\n  return leftNode;\n}\n\n\n// function leftBalance (node) {\n//   if (node.left.balanceFactor === -1) rotateLeft(node.left);\n//   return rotateRight(node);\n// }\n\n\n// function rightBalance (node) {\n//   if (node.right.balanceFactor === 1) rotateRight(node.right);\n//   return rotateLeft(node);\n// }\n\n\nexport default class AVLTree {\n  /**\n   * Callback for comparator\n   * @callback comparatorCallback\n   * @param {Key} a\n   * @param {Key} b\n   * @returns {number}\n   */\n\n  /**\n   * @class AVLTree\n   * @constructor\n   * @param  {comparatorCallback} [comparator]\n   * @param  {boolean}            [noDuplicates=false] Disallow duplicates\n   */\n  constructor (comparator, noDuplicates = false) {\n    this._comparator = comparator || DEFAULT_COMPARE;\n    this._root = null;\n    this._size = 0;\n    this._noDuplicates = !!noDuplicates;\n  }\n\n\n  /**\n   * Clear the tree\n   * @return {AVLTree}\n   */\n  destroy() {\n    return this.clear();\n  }\n\n\n  /**\n   * Clear the tree\n   * @return {AVLTree}\n   */\n  clear() {\n    this._root = null;\n    this._size = 0;\n    return this;\n  }\n\n  /**\n   * Number of nodes\n   * @return {number}\n   */\n  get size () {\n    return this._size;\n  }\n\n\n  /**\n   * Whether the tree contains a node with the given key\n   * @param  {Key} key\n   * @return {boolean} true/false\n   */\n  contains (key) {\n    if (this._root)  {\n      var node       = this._root;\n      var comparator = this._comparator;\n      while (node)  {\n        var cmp = comparator(key, node.key);\n        if      (cmp === 0) return true;\n        else if (cmp < 0)   node = node.left;\n        else                node = node.right;\n      }\n    }\n    return false;\n  }\n\n\n  /* eslint-disable class-methods-use-this */\n\n  /**\n   * Successor node\n   * @param  {Node} node\n   * @return {?Node}\n   */\n  next (node) {\n    var successor = node;\n    if (successor) {\n      if (successor.right) {\n        successor = successor.right;\n        while (successor.left) successor = successor.left;\n      } else {\n        successor = node.parent;\n        while (successor && successor.right === node) {\n          node = successor; successor = successor.parent;\n        }\n      }\n    }\n    return successor;\n  }\n\n\n  /**\n   * Predecessor node\n   * @param  {Node} node\n   * @return {?Node}\n   */\n  prev (node) {\n    var predecessor = node;\n    if (predecessor) {\n      if (predecessor.left) {\n        predecessor = predecessor.left;\n        while (predecessor.right) predecessor = predecessor.right;\n      } else {\n        predecessor = node.parent;\n        while (predecessor && predecessor.left === node) {\n          node = predecessor;\n          predecessor = predecessor.parent;\n        }\n      }\n    }\n    return predecessor;\n  }\n  /* eslint-enable class-methods-use-this */\n\n\n  /**\n   * Callback for forEach\n   * @callback forEachCallback\n   * @param {Node} node\n   * @param {number} index\n   */\n\n  /**\n   * @param  {forEachCallback} callback\n   * @return {AVLTree}\n   */\n  forEach(callback) {\n    var current = this._root;\n    var s = [], done = false, i = 0;\n\n    while (!done) {\n      // Reach the left most Node of the current Node\n      if (current) {\n        // Place pointer to a tree node on the stack\n        // before traversing the node's left subtree\n        s.push(current);\n        current = current.left;\n      } else {\n        // BackTrack from the empty subtree and visit the Node\n        // at the top of the stack; however, if the stack is\n        // empty you are done\n        if (s.length > 0) {\n          current = s.pop();\n          callback(current, i++);\n\n          // We have visited the node and its left\n          // subtree. Now, it's right subtree's turn\n          current = current.right;\n        } else done = true;\n      }\n    }\n    return this;\n  }\n\n\n  /**\n   * Walk key range from `low` to `high`. Stops if `fn` returns a value.\n   * @param  {Key}      low\n   * @param  {Key}      high\n   * @param  {Function} fn\n   * @param  {*?}       ctx\n   * @return {SplayTree}\n   */\n  range(low, high, fn, ctx) {\n    const Q = [];\n    const compare = this._comparator;\n    let node = this._root, cmp;\n\n    while (Q.length !== 0 || node) {\n      if (node) {\n        Q.push(node);\n        node = node.left;\n      } else {\n        node = Q.pop();\n        cmp = compare(node.key, high);\n        if (cmp > 0) {\n          break;\n        } else if (compare(node.key, low) >= 0) {\n          if (fn.call(ctx, node)) return this; // stop if smth is returned\n        }\n        node = node.right;\n      }\n    }\n    return this;\n  }\n\n  /**\n   * Returns all keys in order\n   * @return {Array<Key>}\n   */\n  keys () {\n    var current = this._root;\n    var s = [], r = [], done = false;\n\n    while (!done) {\n      if (current) {\n        s.push(current);\n        current = current.left;\n      } else {\n        if (s.length > 0) {\n          current = s.pop();\n          r.push(current.key);\n          current = current.right;\n        } else done = true;\n      }\n    }\n    return r;\n  }\n\n\n  /**\n   * Returns `data` fields of all nodes in order.\n   * @return {Array<Value>}\n   */\n  values () {\n    var current = this._root;\n    var s = [], r = [], done = false;\n\n    while (!done) {\n      if (current) {\n        s.push(current);\n        current = current.left;\n      } else {\n        if (s.length > 0) {\n          current = s.pop();\n          r.push(current.data);\n          current = current.right;\n        } else done = true;\n      }\n    }\n    return r;\n  }\n\n\n  /**\n   * Returns node at given index\n   * @param  {number} index\n   * @return {?Node}\n   */\n  at (index) {\n    // removed after a consideration, more misleading than useful\n    // index = index % this.size;\n    // if (index < 0) index = this.size - index;\n\n    var current = this._root;\n    var s = [], done = false, i = 0;\n\n    while (!done) {\n      if (current) {\n        s.push(current);\n        current = current.left;\n      } else {\n        if (s.length > 0) {\n          current = s.pop();\n          if (i === index) return current;\n          i++;\n          current = current.right;\n        } else done = true;\n      }\n    }\n    return null;\n  }\n\n\n  /**\n   * Returns node with the minimum key\n   * @return {?Node}\n   */\n  minNode () {\n    var node = this._root;\n    if (!node) return null;\n    while (node.left) node = node.left;\n    return node;\n  }\n\n\n  /**\n   * Returns node with the max key\n   * @return {?Node}\n   */\n  maxNode () {\n    var node = this._root;\n    if (!node) return null;\n    while (node.right) node = node.right;\n    return node;\n  }\n\n\n  /**\n   * Min key\n   * @return {?Key}\n   */\n  min () {\n    var node = this._root;\n    if (!node) return null;\n    while (node.left) node = node.left;\n    return node.key;\n  }\n\n\n  /**\n   * Max key\n   * @return {?Key}\n   */\n  max () {\n    var node = this._root;\n    if (!node) return null;\n    while (node.right) node = node.right;\n    return node.key;\n  }\n\n\n  /**\n   * @return {boolean} true/false\n   */\n  isEmpty() {\n    return !this._root;\n  }\n\n\n  /**\n   * Removes and returns the node with smallest key\n   * @return {?Node}\n   */\n  pop () {\n    var node = this._root, returnValue = null;\n    if (node) {\n      while (node.left) node = node.left;\n      returnValue = { key: node.key, data: node.data };\n      this.remove(node.key);\n    }\n    return returnValue;\n  }\n\n\n  /**\n   * Find node by key\n   * @param  {Key} key\n   * @return {?Node}\n   */\n  find (key) {\n    var root = this._root;\n    // if (root === null)    return null;\n    // if (key === root.key) return root;\n\n    var subtree = root, cmp;\n    var compare = this._comparator;\n    while (subtree) {\n      cmp = compare(key, subtree.key);\n      if      (cmp === 0) return subtree;\n      else if (cmp < 0)   subtree = subtree.left;\n      else                subtree = subtree.right;\n    }\n\n    return null;\n  }\n\n\n  /**\n   * Insert a node into the tree\n   * @param  {Key} key\n   * @param  {Value} [data]\n   * @return {?Node}\n   */\n  insert (key, data) {\n    if (!this._root) {\n      this._root = {\n        parent: null, left: null, right: null, balanceFactor: 0,\n        key, data\n      };\n      this._size++;\n      return this._root;\n    }\n\n    var compare = this._comparator;\n    var node    = this._root;\n    var parent  = null;\n    var cmp     = 0;\n\n    if (this._noDuplicates) {\n      while (node) {\n        cmp = compare(key, node.key);\n        parent = node;\n        if      (cmp === 0) return null;\n        else if (cmp < 0)   node = node.left;\n        else                node = node.right;\n      }\n    } else {\n      while (node) {\n        cmp = compare(key, node.key);\n        parent = node;\n        if      (cmp <= 0)  node = node.left; //return null;\n        else                node = node.right;\n      }\n    }\n\n    var newNode = {\n      left: null,\n      right: null,\n      balanceFactor: 0,\n      parent, key, data\n    };\n    var newRoot;\n    if (cmp <= 0) parent.left  = newNode;\n    else         parent.right = newNode;\n\n    while (parent) {\n      cmp = compare(parent.key, key);\n      if (cmp < 0) parent.balanceFactor -= 1;\n      else         parent.balanceFactor += 1;\n\n      if        (parent.balanceFactor === 0) break;\n      else if   (parent.balanceFactor < -1) {\n        // inlined\n        //var newRoot = rightBalance(parent);\n        if (parent.right.balanceFactor === 1) rotateRight(parent.right);\n        newRoot = rotateLeft(parent);\n\n        if (parent === this._root) this._root = newRoot;\n        break;\n      } else if (parent.balanceFactor > 1) {\n        // inlined\n        // var newRoot = leftBalance(parent);\n        if (parent.left.balanceFactor === -1) rotateLeft(parent.left);\n        newRoot = rotateRight(parent);\n\n        if (parent === this._root) this._root = newRoot;\n        break;\n      }\n      parent = parent.parent;\n    }\n\n    this._size++;\n    return newNode;\n  }\n\n\n  /**\n   * Removes the node from the tree. If not found, returns null.\n   * @param  {Key} key\n   * @return {?Node}\n   */\n  remove (key) {\n    if (!this._root) return null;\n\n    var node = this._root;\n    var compare = this._comparator;\n    var cmp = 0;\n\n    while (node) {\n      cmp = compare(key, node.key);\n      if      (cmp === 0) break;\n      else if (cmp < 0)   node = node.left;\n      else                node = node.right;\n    }\n    if (!node) return null;\n\n    var returnValue = node.key;\n    var max, min;\n\n    if (node.left) {\n      max = node.left;\n\n      while (max.left || max.right) {\n        while (max.right) max = max.right;\n\n        node.key = max.key;\n        node.data = max.data;\n        if (max.left) {\n          node = max;\n          max = max.left;\n        }\n      }\n\n      node.key  = max.key;\n      node.data = max.data;\n      node = max;\n    }\n\n    if (node.right) {\n      min = node.right;\n\n      while (min.left || min.right) {\n        while (min.left) min = min.left;\n\n        node.key  = min.key;\n        node.data = min.data;\n        if (min.right) {\n          node = min;\n          min = min.right;\n        }\n      }\n\n      node.key  = min.key;\n      node.data = min.data;\n      node = min;\n    }\n\n    var parent = node.parent;\n    var pp     = node;\n    var newRoot;\n\n    while (parent) {\n      if (parent.left === pp) parent.balanceFactor -= 1;\n      else                    parent.balanceFactor += 1;\n\n      if        (parent.balanceFactor < -1) {\n        // inlined\n        //var newRoot = rightBalance(parent);\n        if (parent.right.balanceFactor === 1) rotateRight(parent.right);\n        newRoot = rotateLeft(parent);\n\n        if (parent === this._root) this._root = newRoot;\n        parent = newRoot;\n      } else if (parent.balanceFactor > 1) {\n        // inlined\n        // var newRoot = leftBalance(parent);\n        if (parent.left.balanceFactor === -1) rotateLeft(parent.left);\n        newRoot = rotateRight(parent);\n\n        if (parent === this._root) this._root = newRoot;\n        parent = newRoot;\n      }\n\n      if (parent.balanceFactor === -1 || parent.balanceFactor === 1) break;\n\n      pp     = parent;\n      parent = parent.parent;\n    }\n\n    if (node.parent) {\n      if (node.parent.left === node) node.parent.left  = null;\n      else                           node.parent.right = null;\n    }\n\n    if (node === this._root) this._root = null;\n\n    this._size--;\n    return returnValue;\n  }\n\n\n  /**\n   * Bulk-load items\n   * @param  {Array<Key>}  keys\n   * @param  {Array<Value>}  [values]\n   * @return {AVLTree}\n   */\n  load(keys = [], values = [], presort) {\n    if (this._size !== 0) throw new Error('bulk-load: tree is not empty');\n    const size = keys.length;\n    if (presort) sort(keys, values, 0, size - 1, this._comparator);\n    this._root = loadRecursive(null, keys, values, 0, size);\n    markBalance(this._root);\n    this._size = size;\n    return this;\n  }\n\n\n  /**\n   * Returns true if the tree is balanced\n   * @return {boolean}\n   */\n  isBalanced() {\n    return isBalanced(this._root);\n  }\n\n\n  /**\n   * String representation of the tree - primitive horizontal print-out\n   * @param  {Function(Node):string} [printNode]\n   * @return {string}\n   */\n  toString (printNode) {\n    return print(this._root, printNode);\n  }\n}\n\nAVLTree.default = AVLTree;\n","import * as mem from '../common';\r\n\r\n/**\r\n * Base index for use with in-memory-store\r\n */\r\nexport class BaseIndex {\r\n    /**\r\n     * @param  {string} name name of this index\r\n     * @param  {keyCallback} keyFn function to call to get the index key of the items in this index\r\n     * @param  {itemCallback} itemFn function to call to get the unique item key of the items in this index\r\n     */\r\n    constructor (name, itemFn, keyFn) {\r\n        if (this.constructor === BaseIndex) {\r\n            throw new TypeError(\"Cannot construct BaseIndex directly\");\r\n        }\r\n\r\n        this.name = name;\r\n        this.itemFn = itemFn;\r\n        this.keyFn = keyFn;\r\n    }\r\n\r\n    /**\r\n     * Returns whether or not this index is empty\r\n     * @abstract\r\n     * @return {boolean}\r\n     */\r\n    get isEmpty() {\r\n        throw new TypeError(`Must implement isEmpty property`);\r\n    }\r\n\r\n    /**\r\n     * Returns all keys\r\n     * @abstract\r\n     * @return {Array<Key>}\r\n     */\r\n    get keys() {\r\n        throw new TypeError(`Must implement keys property`);\r\n    }    \r\n\r\n    /**\r\n     * Removes all items from the index\r\n     * @abstract\r\n     */\r\n    clear() {\r\n        throw new TypeError(`Must implement clear method`);\r\n    }\r\n\r\n    /**\r\n     * Returns items within matching passed index keys\r\n     * @param  {Array<any>} keys specified index keys\r\n     * @return {Array<any>} values found\r\n     */\r\n    findMany(keys) {\r\n        keys = mem.oneOrMany(keys);\r\n        let data = keys.map(m => this.find(m));\r\n        return [].concat.apply([], data);\r\n    }\r\n\r\n    /**\r\n     * Returns items matching passed index key\r\n     * @abstract\r\n     * @param  {any} key specified index key\r\n     * @return {Array<any>} values found\r\n     */\r\n    find(key) {\r\n        throw new TypeError(`Must implement find method`);\r\n    }\r\n\r\n    /**\r\n     * Removes an item\r\n     * @abstract\r\n     * @param  {any} item item to remove\r\n     */\r\n    remove(item) {\r\n        throw new TypeError(`Must implement build method`);\r\n    }\r\n\r\n    /**\r\n     * Populates this index with new items and indexes as per itemFn and keyFn defined on index creation\r\n     * @param  {Array<any>} items items to populate store with\r\n     */\r\n    populate(items) {\r\n        if (!this.isEmpty) {\r\n            throw new Error(`${typeof this} index must be empty in order to use populate`);\r\n        }\r\n\r\n        items = mem.oneOrMany(items);\r\n        items.forEach(item => this.insert(item));\r\n    }\r\n\r\n    /**\r\n     * Adds an item with indexes as per itemFn and keyFn defined on index creation\r\n     * @abstract\r\n     * @param  {any} item item to add to index\r\n     */\r\n    insert(item) {\r\n        throw new TypeError(`Must implement insert method`);\r\n    }\r\n\r\n    /**\r\n     * Updates an item by removing any associated index entry based on oldItem and adding new index\r\n     * entries based on the new item.  Important to pass oldItem otherwise index may contain entries from\r\n     * item in wrong indexed key.\r\n     * @param  {any} oldItem item as it was prior to being updated\r\n     * @param  {any} item item as it is now\r\n     */\r\n    update(item, olditem) {\r\n        if (olditem) {\r\n            this.remove(olditem);\r\n        }\r\n        this.insert(item);\r\n    }\r\n}","import * as mem from '../common';\r\nimport AVLTree from 'avl';\r\nimport { BaseIndex } from './baseindex';\r\n\r\n/**\r\n * Index based on AVL Tree object for key/value storage. Groups items by index value, \r\n * stores items within index value as array using linear search.\r\n * @extends {BaseIndex}\r\n */\r\nexport class AVLIndex extends BaseIndex {\r\n    /**\r\n     * @param  {string} name name of this index\r\n     * @param  {keyCallback} keyFn function to call to get the index key of the items in this index\r\n     * @param  {itemCallback} itemFn function to call to get the unique item key of the items in this index\r\n     * @param  {comparerCallback} [comparer] comparer to use when comparing one index value to another\r\n     */\r\n    constructor (name, itemFn, keyFn, comparer) {\r\n        this.comparer = comparer || mem.defaultComparer;\r\n        this.index = new AVLTree(comparer);\r\n        super(name, itemFn, keyFn);\r\n    }\r\n\r\n    /**\r\n     * Returns whether or not this index is empty\r\n     * @abstract\r\n     * @return {boolean}\r\n     */\r\n    get isEmpty() {\r\n        return this.index.size === 0;\r\n    }\r\n\r\n    /**\r\n     * Returns all keys\r\n     * @return {Array<Key>}\r\n     */\r\n    get keys() {\r\n        return this.index.keys();\r\n    }\r\n\r\n    /**\r\n     * Removes all items from the index\r\n     */\r\n    clear() {\r\n        this.index.clear();\r\n    }\r\n\r\n    /**\r\n     * Returns all entries less than the passed key according to the\r\n     * indexes comparer.\r\n     * @param {any} key \r\n     */\r\n    $lt(key) {\r\n        let lastKey;\r\n        let data = [];\r\n        this.index.range(this.index.min, key, n => {\r\n            lastKey = n.key;\r\n            data.push(n.data);\r\n        });\r\n        if (data.length === 0) {\r\n            return [];\r\n        }\r\n        // Since Tree is unique, we only need to check last key to omit\r\n        if (mem.eq(this.comparer, lastKey, key)) {\r\n            data.pop();\r\n        }\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * Returns all entries less or equal to the passed key according to the\r\n     * indexes comparer.\r\n     * @param {any} key \r\n     */\r\n    $lte(key) {\r\n        let data = [];\r\n        this.index.range(this.index.min, key, n => {\r\n            data.push(n.data);\r\n        });\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * Returns all entries greater than or equal to the passed key according to the\r\n     * indexes comparer.\r\n     * @param {any} key \r\n     */\r\n    $gt(key) {\r\n        let firstKey;\r\n        let data = [];\r\n        this.index.range(key, this.index.max, n => {\r\n            if (firstKey === undefined) {\r\n                firstKey = n.key;\r\n            }\r\n            data.push(n.data);\r\n        });\r\n        if (data.length === 0) {\r\n            return [];\r\n        }\r\n        // Since Tree is unique, we only need to check first key to omit\r\n        if (mem.eq(this.comparer, firstKey, key)) {\r\n            data.shift();\r\n        }\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * Returns all entries greater than or equal to the passed key according to the\r\n     * indexes comparer.\r\n     * @param {any} key \r\n     */\r\n    $gte(key) {\r\n        let data = [];\r\n        this.index.range(key, this.index.max, n => {\r\n            data.push(n.data);\r\n        });\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * Returns items matching passed index key\r\n     * @param  {any} key specified index key\r\n     * @return {Array<any>} values found\r\n     */\r\n    $eq(key) {\r\n        return find(key);\r\n    }\r\n\r\n    /**\r\n     * Returns items matching passed index keys\r\n     * @param  {Array<any>} key specified index keys\r\n     * @return {Array<any>} values found\r\n     */\r\n    $in(keys) {\r\n        return this.findMany(keys);\r\n    }\r\n\r\n    /**\r\n     * Returns items matching passed index key\r\n     * @param  {any} key specified index key\r\n     * @return {Array<any>} values found\r\n     */\r\n    find(key) {\r\n        let found = this.index.find(key);\r\n        if (found) {\r\n            return found.data;\r\n        } else {\r\n            return [];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes an item\r\n     * @param  {any} item item to remove\r\n     */\r\n    remove(item) {\r\n        const key = this.keyFn(item);\r\n        const entry = this.index.find(key);\r\n\r\n        if (entry) {\r\n            const it = this.itemFn(item);\r\n            const arr = entry.data;\r\n            const i = arr.indexOf(it);\r\n            if (i > -1) {\r\n                arr.splice(i, 1);\r\n            }\r\n            if (arr.length === 0) {\r\n                this.index.remove(key);\r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Adds an item with indexes as per itemFn and keyFn defined on index creation\r\n     * @param  {any} item item to add to index\r\n     */\r\n    insert(item) {\r\n        const key = this.keyFn(item);\r\n        const it = this.itemFn(item);\r\n        const entry = this.index.find(key);\r\n        \r\n        if (entry) {\r\n            entry.data.push(it);\r\n        } else {\r\n            this.index.insert(key, [it]);\r\n        }\r\n    }\r\n}","\nfunction TreeBase() {}\n\n// removes all nodes from the tree\nTreeBase.prototype.clear = function() {\n    this._root = null;\n    this.size = 0;\n};\n\n// returns node data if found, null otherwise\nTreeBase.prototype.find = function(data) {\n    var res = this._root;\n\n    while(res !== null) {\n        var c = this._comparator(data, res.data);\n        if(c === 0) {\n            return res.data;\n        }\n        else {\n            res = res.get_child(c > 0);\n        }\n    }\n\n    return null;\n};\n\n// returns iterator to node if found, null otherwise\nTreeBase.prototype.findIter = function(data) {\n    var res = this._root;\n    var iter = this.iterator();\n\n    while(res !== null) {\n        var c = this._comparator(data, res.data);\n        if(c === 0) {\n            iter._cursor = res;\n            return iter;\n        }\n        else {\n            iter._ancestors.push(res);\n            res = res.get_child(c > 0);\n        }\n    }\n\n    return null;\n};\n\n// Returns an iterator to the tree node at or immediately after the item\nTreeBase.prototype.lowerBound = function(item) {\n    var cur = this._root;\n    var iter = this.iterator();\n    var cmp = this._comparator;\n\n    while(cur !== null) {\n        var c = cmp(item, cur.data);\n        if(c === 0) {\n            iter._cursor = cur;\n            return iter;\n        }\n        iter._ancestors.push(cur);\n        cur = cur.get_child(c > 0);\n    }\n\n    for(var i=iter._ancestors.length - 1; i >= 0; --i) {\n        cur = iter._ancestors[i];\n        if(cmp(item, cur.data) < 0) {\n            iter._cursor = cur;\n            iter._ancestors.length = i;\n            return iter;\n        }\n    }\n\n    iter._ancestors.length = 0;\n    return iter;\n};\n\n// Returns an iterator to the tree node immediately after the item\nTreeBase.prototype.upperBound = function(item) {\n    var iter = this.lowerBound(item);\n    var cmp = this._comparator;\n\n    while(iter.data() !== null && cmp(iter.data(), item) === 0) {\n        iter.next();\n    }\n\n    return iter;\n};\n\n// returns null if tree is empty\nTreeBase.prototype.min = function() {\n    var res = this._root;\n    if(res === null) {\n        return null;\n    }\n\n    while(res.left !== null) {\n        res = res.left;\n    }\n\n    return res.data;\n};\n\n// returns null if tree is empty\nTreeBase.prototype.max = function() {\n    var res = this._root;\n    if(res === null) {\n        return null;\n    }\n\n    while(res.right !== null) {\n        res = res.right;\n    }\n\n    return res.data;\n};\n\n// returns a null iterator\n// call next() or prev() to point to an element\nTreeBase.prototype.iterator = function() {\n    return new Iterator(this);\n};\n\n// calls cb on each node's data, in order\nTreeBase.prototype.each = function(cb) {\n    var it=this.iterator(), data;\n    while((data = it.next()) !== null) {\n        if(cb(data) === false) {\n            return;\n        }\n    }\n};\n\n// calls cb on each node's data, in reverse order\nTreeBase.prototype.reach = function(cb) {\n    var it=this.iterator(), data;\n    while((data = it.prev()) !== null) {\n        if(cb(data) === false) {\n            return;\n        }\n    }\n};\n\n\nfunction Iterator(tree) {\n    this._tree = tree;\n    this._ancestors = [];\n    this._cursor = null;\n}\n\nIterator.prototype.data = function() {\n    return this._cursor !== null ? this._cursor.data : null;\n};\n\n// if null-iterator, returns first node\n// otherwise, returns next node\nIterator.prototype.next = function() {\n    if(this._cursor === null) {\n        var root = this._tree._root;\n        if(root !== null) {\n            this._minNode(root);\n        }\n    }\n    else {\n        if(this._cursor.right === null) {\n            // no greater node in subtree, go up to parent\n            // if coming from a right child, continue up the stack\n            var save;\n            do {\n                save = this._cursor;\n                if(this._ancestors.length) {\n                    this._cursor = this._ancestors.pop();\n                }\n                else {\n                    this._cursor = null;\n                    break;\n                }\n            } while(this._cursor.right === save);\n        }\n        else {\n            // get the next node from the subtree\n            this._ancestors.push(this._cursor);\n            this._minNode(this._cursor.right);\n        }\n    }\n    return this._cursor !== null ? this._cursor.data : null;\n};\n\n// if null-iterator, returns last node\n// otherwise, returns previous node\nIterator.prototype.prev = function() {\n    if(this._cursor === null) {\n        var root = this._tree._root;\n        if(root !== null) {\n            this._maxNode(root);\n        }\n    }\n    else {\n        if(this._cursor.left === null) {\n            var save;\n            do {\n                save = this._cursor;\n                if(this._ancestors.length) {\n                    this._cursor = this._ancestors.pop();\n                }\n                else {\n                    this._cursor = null;\n                    break;\n                }\n            } while(this._cursor.left === save);\n        }\n        else {\n            this._ancestors.push(this._cursor);\n            this._maxNode(this._cursor.left);\n        }\n    }\n    return this._cursor !== null ? this._cursor.data : null;\n};\n\nIterator.prototype._minNode = function(start) {\n    while(start.left !== null) {\n        this._ancestors.push(start);\n        start = start.left;\n    }\n    this._cursor = start;\n};\n\nIterator.prototype._maxNode = function(start) {\n    while(start.right !== null) {\n        this._ancestors.push(start);\n        start = start.right;\n    }\n    this._cursor = start;\n};\n\nmodule.exports = TreeBase;\n\n","\nvar TreeBase = require('./treebase');\n\nfunction Node(data) {\n    this.data = data;\n    this.left = null;\n    this.right = null;\n    this.red = true;\n}\n\nNode.prototype.get_child = function(dir) {\n    return dir ? this.right : this.left;\n};\n\nNode.prototype.set_child = function(dir, val) {\n    if(dir) {\n        this.right = val;\n    }\n    else {\n        this.left = val;\n    }\n};\n\nfunction RBTree(comparator) {\n    this._root = null;\n    this._comparator = comparator;\n    this.size = 0;\n}\n\nRBTree.prototype = new TreeBase();\n\n// returns true if inserted, false if duplicate\nRBTree.prototype.insert = function(data) {\n    var ret = false;\n\n    if(this._root === null) {\n        // empty tree\n        this._root = new Node(data);\n        ret = true;\n        this.size++;\n    }\n    else {\n        var head = new Node(undefined); // fake tree root\n\n        var dir = 0;\n        var last = 0;\n\n        // setup\n        var gp = null; // grandparent\n        var ggp = head; // grand-grand-parent\n        var p = null; // parent\n        var node = this._root;\n        ggp.right = this._root;\n\n        // search down\n        while(true) {\n            if(node === null) {\n                // insert new node at the bottom\n                node = new Node(data);\n                p.set_child(dir, node);\n                ret = true;\n                this.size++;\n            }\n            else if(is_red(node.left) && is_red(node.right)) {\n                // color flip\n                node.red = true;\n                node.left.red = false;\n                node.right.red = false;\n            }\n\n            // fix red violation\n            if(is_red(node) && is_red(p)) {\n                var dir2 = ggp.right === gp;\n\n                if(node === p.get_child(last)) {\n                    ggp.set_child(dir2, single_rotate(gp, !last));\n                }\n                else {\n                    ggp.set_child(dir2, double_rotate(gp, !last));\n                }\n            }\n\n            var cmp = this._comparator(node.data, data);\n\n            // stop if found\n            if(cmp === 0) {\n                break;\n            }\n\n            last = dir;\n            dir = cmp < 0;\n\n            // update helpers\n            if(gp !== null) {\n                ggp = gp;\n            }\n            gp = p;\n            p = node;\n            node = node.get_child(dir);\n        }\n\n        // update root\n        this._root = head.right;\n    }\n\n    // make root black\n    this._root.red = false;\n\n    return ret;\n};\n\n// returns true if removed, false if not found\nRBTree.prototype.remove = function(data) {\n    if(this._root === null) {\n        return false;\n    }\n\n    var head = new Node(undefined); // fake tree root\n    var node = head;\n    node.right = this._root;\n    var p = null; // parent\n    var gp = null; // grand parent\n    var found = null; // found item\n    var dir = 1;\n\n    while(node.get_child(dir) !== null) {\n        var last = dir;\n\n        // update helpers\n        gp = p;\n        p = node;\n        node = node.get_child(dir);\n\n        var cmp = this._comparator(data, node.data);\n\n        dir = cmp > 0;\n\n        // save found node\n        if(cmp === 0) {\n            found = node;\n        }\n\n        // push the red node down\n        if(!is_red(node) && !is_red(node.get_child(dir))) {\n            if(is_red(node.get_child(!dir))) {\n                var sr = single_rotate(node, dir);\n                p.set_child(last, sr);\n                p = sr;\n            }\n            else if(!is_red(node.get_child(!dir))) {\n                var sibling = p.get_child(!last);\n                if(sibling !== null) {\n                    if(!is_red(sibling.get_child(!last)) && !is_red(sibling.get_child(last))) {\n                        // color flip\n                        p.red = false;\n                        sibling.red = true;\n                        node.red = true;\n                    }\n                    else {\n                        var dir2 = gp.right === p;\n\n                        if(is_red(sibling.get_child(last))) {\n                            gp.set_child(dir2, double_rotate(p, last));\n                        }\n                        else if(is_red(sibling.get_child(!last))) {\n                            gp.set_child(dir2, single_rotate(p, last));\n                        }\n\n                        // ensure correct coloring\n                        var gpc = gp.get_child(dir2);\n                        gpc.red = true;\n                        node.red = true;\n                        gpc.left.red = false;\n                        gpc.right.red = false;\n                    }\n                }\n            }\n        }\n    }\n\n    // replace and remove if found\n    if(found !== null) {\n        found.data = node.data;\n        p.set_child(p.right === node, node.get_child(node.left === null));\n        this.size--;\n    }\n\n    // update root and make it black\n    this._root = head.right;\n    if(this._root !== null) {\n        this._root.red = false;\n    }\n\n    return found !== null;\n};\n\nfunction is_red(node) {\n    return node !== null && node.red;\n}\n\nfunction single_rotate(root, dir) {\n    var save = root.get_child(!dir);\n\n    root.set_child(!dir, save.get_child(dir));\n    save.set_child(dir, root);\n\n    root.red = true;\n    save.red = false;\n\n    return save;\n}\n\nfunction double_rotate(root, dir) {\n    root.set_child(!dir, single_rotate(root.get_child(!dir), !dir));\n    return single_rotate(root, dir);\n}\n\nmodule.exports = RBTree;\n","\nvar TreeBase = require('./treebase');\n\nfunction Node(data) {\n    this.data = data;\n    this.left = null;\n    this.right = null;\n}\n\nNode.prototype.get_child = function(dir) {\n    return dir ? this.right : this.left;\n};\n\nNode.prototype.set_child = function(dir, val) {\n    if(dir) {\n        this.right = val;\n    }\n    else {\n        this.left = val;\n    }\n};\n\nfunction BinTree(comparator) {\n    this._root = null;\n    this._comparator = comparator;\n    this.size = 0;\n}\n\nBinTree.prototype = new TreeBase();\n\n// returns true if inserted, false if duplicate\nBinTree.prototype.insert = function(data) {\n    if(this._root === null) {\n        // empty tree\n        this._root = new Node(data);\n        this.size++;\n        return true;\n    }\n\n    var dir = 0;\n\n    // setup\n    var p = null; // parent\n    var node = this._root;\n\n    // search down\n    while(true) {\n        if(node === null) {\n            // insert new node at the bottom\n            node = new Node(data);\n            p.set_child(dir, node);\n            ret = true;\n            this.size++;\n            return true;\n        }\n\n        // stop if found\n        if(this._comparator(node.data, data) === 0) {\n            return false;\n        }\n\n        dir = this._comparator(node.data, data) < 0;\n\n        // update helpers\n        p = node;\n        node = node.get_child(dir);\n    }\n};\n\n// returns true if removed, false if not found\nBinTree.prototype.remove = function(data) {\n    if(this._root === null) {\n        return false;\n    }\n\n    var head = new Node(undefined); // fake tree root\n    var node = head;\n    node.right = this._root;\n    var p = null; // parent\n    var found = null; // found item\n    var dir = 1;\n\n    while(node.get_child(dir) !== null) {\n        p = node;\n        node = node.get_child(dir);\n        var cmp = this._comparator(data, node.data);\n        dir = cmp > 0;\n\n        if(cmp === 0) {\n            found = node;\n        }\n    }\n\n    if(found !== null) {\n        found.data = node.data;\n        p.set_child(p.right === node, node.get_child(node.left === null));\n\n        this._root = head.right;\n        this.size--;\n        return true;\n    }\n    else {\n        return false;\n    }\n};\n\nmodule.exports = BinTree;\n\n","module.exports = {\n    RBTree: require('./lib/rbtree'),\n    BinTree: require('./lib/bintree')\n};\n","// Not intended for production use.\r\n// RBTree does not provide key/value store and performs\r\n// poorly as implemented here with custom comparator and\r\n// key/value objects.\r\n\r\nimport * as mem from '../src/common';\r\nimport { RBTree } from 'bintrees';\r\nimport { BaseIndex } from '../src/indexes/baseindex';\r\n\r\nexport class RBIndex extends BaseIndex {\r\n    constructor (name, itemFn, keyFn, comparer) {\r\n        this.comparer = mem.keyWrapComparer(comparer || mem.defaultComparer);\r\n        this.index = new RBTree(this.comparer);\r\n        super(name, itemFn, keyFn);\r\n    }\r\n\r\n    /**\r\n     * Returns whether or not this index is empty\r\n     * @abstract\r\n     * @return {boolean}\r\n     */\r\n    get isEmpty() {\r\n        return this.index.size === 0;\r\n    }\r\n    \r\n    get keys() {\r\n        let arr = [];\r\n        this.index.each(f => arr.push(f.key));\r\n        return arr;\r\n    }\r\n\r\n    clear() {\r\n        this.index.clear();\r\n    }\r\n\r\n    find(key) {\r\n        let found = this.index.find({ key: key });\r\n        if (found) {\r\n            return found.value;\r\n        } else {\r\n            return [];\r\n        }\r\n    }\r\n\r\n    remove(item) {\r\n        const key = this.keyFn(item);\r\n        const entry = this.index.find({ key: key });\r\n\r\n        if (entry) {\r\n            const it = this.itemFn(item);\r\n            const arr = entry.value;\r\n            const i = arr.indexOf(it);\r\n            if (i > -1) {\r\n                arr.splice(i, 1);\r\n            }\r\n            if (entry.value.length === 0) {\r\n                this.index.remove({ key: key });\r\n            }\r\n        }\r\n    }\r\n    \r\n    insert(item) {\r\n        const key = this.keyFn(item);\r\n        const it = this.itemFn(item);\r\n        const entry = this.index.find({ key: key });\r\n        \r\n        if (entry) {\r\n            entry.value.push(it);\r\n        } else {\r\n            this.index.insert({key: key, value: [it]});\r\n        }\r\n    }\r\n}","import * as mem from '../common';\r\nimport { BaseIndex } from './baseindex';\r\n\r\n/**\r\n * Index based on javascript Map object for key/value storage. Groups items by index value, \r\n * stores items within index value as array using linear search.\r\n * @extends {BaseIndex}\r\n */\r\nexport class HashIndex extends BaseIndex {\r\n    /**\r\n     * @param  {string} name name of this index\r\n     * @param  {keyCallback} keyFn function to call to get the index key of the items in this index\r\n     * @param  {itemCallback} itemFn function to call to get the unique item key of the items in this index\r\n     * @param  {comparerCallback} [comparer] comparer to use when comparing one index value to another\r\n     */\r\n    constructor (name, itemFn, keyFn, comparer) {\r\n        this.comparer = comparer || mem.defaultComparer;\r\n        this.index = new Map([]);\r\n        super(name, itemFn, keyFn);\r\n    }\r\n\r\n    /**\r\n     * Returns whether or not this index is empty\r\n     * @abstract\r\n     * @return {boolean}\r\n     */\r\n    get isEmpty() {\r\n        return this.index.size === 0;\r\n    }\r\n\r\n    /**\r\n     * Returns all keys\r\n     * @return {Array<Key>}\r\n     */\r\n    get keys() {\r\n        return Array.from(this.index.keys());\r\n    }\r\n\r\n    /**\r\n     * Returns all entries less than the passed key according to the\r\n     * indexes comparer.\r\n     * @param {any} key \r\n     */\r\n    $lt(key) {\r\n        let keys = this.keys.filter(k => {\r\n            return mem.lt(this.comparer, k, key);\r\n        });\r\n        return this.findMany(keys);\r\n    }\r\n\r\n    /**\r\n     * Returns all entries less or equal to the passed key according to the\r\n     * indexes comparer.\r\n     * @param {any} key \r\n     */\r\n    $lte(key) {\r\n        let keys = this.keys.filter(k => {\r\n            return mem.lte(this.comparer, k, key);\r\n        });\r\n        return this.findMany(keys);\r\n    }\r\n\r\n    /**\r\n     * Returns all entries greater than the passed key according to the\r\n     * indexes comparer.\r\n     * @param {any} key \r\n     */\r\n    $gt(key) {\r\n        let keys = this.keys.filter(k => {\r\n            return mem.gt(this.comparer, k, key);\r\n        });\r\n        return this.findMany(keys);\r\n    }\r\n\r\n    /**\r\n     * Returns all entries greater than or equal to the passed key according to the\r\n     * indexes comparer.\r\n     * @param {any} key \r\n     */\r\n    $gte(key) {\r\n        let keys = this.keys.filter(k => {\r\n            return mem.gte(this.comparer, k, key);\r\n        });\r\n        return this.findMany(keys);\r\n    }\r\n\r\n    /**\r\n     * Returns items matching passed index key\r\n     * @param  {any} key specified index key\r\n     * @return {Array<any>} values found\r\n     */\r\n    $eq(key) {\r\n        return this.index.get(key);\r\n    }\r\n\r\n    /**\r\n     * Returns items matching passed index keys\r\n     * @param  {Array<any>} key specified index keys\r\n     * @return {Array<any>} values found\r\n     */\r\n    $in(keys) {\r\n        return this.findMany(keys);\r\n    }\r\n\r\n    /**\r\n     * Removes all items from the index\r\n     */\r\n    clear() {\r\n        this.index = new Map([]);\r\n    }\r\n\r\n    /**\r\n     * Returns items matching passed index key\r\n     * @param  {any} key specified index key\r\n     * @return {Array<any>} values found\r\n     */\r\n    find(key) {\r\n        return this.index.get(key);\r\n    }\r\n\r\n    /**\r\n     * Removes an item\r\n     * @param  {any} item item to remove\r\n     */\r\n    remove(item) {\r\n        const key = this.keyFn(item);\r\n        if (this.index.has(key)) {\r\n            const col = this.index.get(key);\r\n            const it = this.itemFn(item);\r\n            const i = col.indexOf(it);\r\n            if (i > -1) {\r\n                col.splice(i, 1);\r\n            }\r\n            if (col.length === 0) {\r\n                this.index.delete(key);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds an item with indexes as per itemFn and keyFn defined on index creation\r\n     * @param  {any} item item to add to index\r\n     */\r\n    insert(item) {\r\n        const key = this.keyFn(item);\r\n        const it = this.itemFn(item);\r\n        if (it && key) {\r\n            if (this.index.has(key)) {\r\n                this.index.get(key).push(it);\r\n            } else {\r\n                this.index.set(key, [it]);\r\n            }\r\n        }\r\n    }\r\n}","import * as mem from '../common';\r\n\r\n/**\r\n * Binary key/value storage backed by native javascript array. Performs binary search on entries and\r\n * keeps items in sorted order based on comparer.\r\n */\r\nexport class BinaryArray {\r\n    /**\r\n     * @param  {comparerCallback} [comparer] comparer to use when comparing one index value to another\r\n     */\r\n    constructor (comparer) {\r\n        this.arr = [];\r\n        this.comparer = comparer || mem.defaultComparer;\r\n    }\r\n    \r\n    /**\r\n     * Removes all items from the index\r\n     */\r\n    clear() {\r\n        this.arr = [];\r\n    }\r\n\r\n    /**\r\n     * Returns an array of keys stored in this Key Value array\r\n     * @returns {Array<any>} all keys\r\n     */\r\n    get keys() {\r\n        return this.arr.map(m => m.key);\r\n    }\r\n\r\n    /**\r\n     * Returns an array of values stored in this Key Value array\r\n     * @returns {Array<any>} all values\r\n     */\r\n    get values() {\r\n        return this.arr.map(m => m.value);\r\n    }\r\n\r\n    /**\r\n     * Returns the number of items in this BinaryArray\r\n     * @returns {number}\r\n     */\r\n    get length() {\r\n        return this.arr.length;\r\n    }\r\n\r\n    /**\r\n     * Returns all entries less than the passed key according to the\r\n     * indexes comparer.\r\n     * @param {any} key \r\n     */\r\n    lt(key) {\r\n        let i = this.insertPos(key);\r\n        let data = this.arr.slice(0, i);\r\n        return data.map(d => d.value);\r\n    }\r\n\r\n    /**\r\n     * Returns all entries less or equal to the passed key according to the\r\n     * indexes comparer.\r\n     * @param {any} key \r\n     */\r\n    lte(key) {\r\n        let i = this.insertPos(key);\r\n        let data = i >= 0 ? this.arr.slice(0, i + 1) : [];\r\n        return data.map(d => d.value);\r\n    }\r\n\r\n    /**\r\n     * Returns all entries greater than the passed key according to the\r\n     * indexes comparer.\r\n     * @param {any} key \r\n     */\r\n    gt(key) {\r\n        let i = this.insertPos(key);\r\n        let data = i < this.arr.length ? this.arr.slice(i + 1, this.arr.length) : [];\r\n        return data.map(d => d.value);\r\n    }\r\n\r\n    /**\r\n     * Returns all entries greater than or equal to the passed key according to the\r\n     * indexes comparer.\r\n     * @param {any} key \r\n     */\r\n    gte(key) {\r\n        let i = this.insertPos(key);\r\n        let data = i < this.arr.length ? this.arr.slice(i, this.arr.length) : [];\r\n        return data.map(d => d.value);\r\n    }\r\n\r\n    /**\r\n     * Returns the index in this array of the specified key\r\n     * @param {any} key \r\n     * @returns {number}\r\n     */\r\n    indexOf(key) {\r\n        let i = this.insertPos(key);\r\n        if (this.arr[i] && mem.eq(this.comparer, this.arr[i].key, key)) {\r\n            return i;\r\n        } else {\r\n            return -1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The insert position where to insert an item into the underlying sorted array.     \r\n     * @param {any} key key to find in the array\r\n     * @returns {number} position at which a new item should be inserted into this array\r\n     */\r\n    insertPos(key) {\r\n        let low = 0, high = this.arr.length, mid;\r\n        while (low < high) {\r\n            // faster version of Math.floor((low + high) / 2)\r\n            mid = (low + high) >>> 1; \r\n            mem.lt(this.comparer, this.arr[mid].key, key) ? low = mid + 1 : high = mid\r\n        }\r\n        return low;\r\n    }\r\n\r\n    /**\r\n     * Returns items matching passed index key\r\n     * @param  {any} key specified index key\r\n     * @return {any} value found\r\n     */\r\n    get(key) {\r\n        const i = this.indexOf(key);\r\n        if (i > -1) {\r\n            return this.arr[i].value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns whether or not a given key exists.\r\n     * @param  {any} key specified index key\r\n     * @return {boolean} if key exists or not\r\n     */\r\n    has(key) {\r\n        const i = this.indexOf(key);\r\n        return (i > -1);\r\n    }\r\n\r\n    /**\r\n     * Removes an item by key\r\n     * @param  {any} key key of item to remove\r\n     */\r\n    remove(key) {\r\n        const i = this.indexOf(key);\r\n        if (i > -1) {\r\n            this.removeAt(i);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds an key/value with array\r\n     * @param  {any} key key to add\r\n     * @param  {any} value item related to the specified key\r\n     */\r\n    add(key, value) {\r\n        const ix = this.insertPos(key);\r\n        this.addAt(ix, key, value);\r\n    }\r\n\r\n    /**\r\n     * Replaces an existing entry in the array with a new one.\r\n     * @param {any} key key to add\r\n     * @param {any} value item related to the specified key\r\n     */\r\n    replace(key, value) {\r\n        const i = this.indexOf(key);\r\n        if (i > -1) {\r\n            this.replaceAt(i, key, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds a key/value entry at a specified position in the array.\r\n     * Will not replace any existing item in that postion, instead\r\n     * inserting before it.\r\n     * @param {number} pos index of where to add this entry\r\n     * @param {any} key key to add\r\n     */\r\n    addAt(pos, key, value) {\r\n        let item = { key: key, value: value };\r\n        this.arr.splice(pos, 0, item);\r\n    }\r\n\r\n    /**\r\n     * Replaces an existing entry in the array at specified position with a new one.\r\n     * @param {number} pos index of where to replace this entry\r\n     * @param {any} key key to add\r\n     * @param {any} value item related to the specified key\r\n     */\r\n    replaceAt(pos, key, value) {\r\n        let item = { key: key, value: value };\r\n        this.arr.splice(pos, 1, item);\r\n    }\r\n\r\n    /**\r\n     * Removes a key/value entry at a specified position\r\n     * @param {number} pos index of the item to remove.\r\n     */\r\n    removeAt(pos) {\r\n        this.arr.splice(pos, 1);\r\n    }\r\n\r\n    /**\r\n     * Returns key matching passed index position\r\n     * @param  {number} pos index of where to add this entry\r\n     * @return {any} key found at this position\r\n     */\r\n    getAt(pos) {\r\n        return this.arr[pos];\r\n    }\r\n}","import * as mem from '../common';\r\nimport { BinaryArray } from './binaryarray';\r\nimport { BaseIndex } from './baseindex';\r\n\r\n/**\r\n * Index based on BinaryArray for key/value storage. Groups items by index value, \r\n * stores items within index value as array using linear search.\r\n * @extends {BaseIndex}\r\n */\r\nexport class BinaryIndex extends BaseIndex {\r\n    /**\r\n     * @implements {BaseIndex}\r\n     * @param  {string} name name of this index\r\n     * @param  {keyCallback} keyFn function to call to get the index key of the items in this index\r\n     * @param  {itemCallback} itemFn function to call to get the unique item key of the items in this index\r\n     * @param  {comparerCallback} [comparer] comparer to use when comparing one index value to another\r\n     */\r\n    constructor (name, itemFn, keyFn, comparer) {\r\n        this.comparer = comparer || mem.defaultComparer;\r\n        this.index = new BinaryArray(this.comparer);\r\n        super(name, itemFn, keyFn);\r\n    }\r\n\r\n    /**\r\n     * Returns whether or not this index is empty\r\n     * @abstract\r\n     * @return {boolean}\r\n     */\r\n    get isEmpty() {\r\n        return this.index.length === 0;\r\n    }\r\n\r\n    /**\r\n     * Returns all keys\r\n     * @return {Array<Key>}\r\n     */\r\n    get keys() {\r\n        return this.index.keys;\r\n    }\r\n\r\n    /**\r\n     * Removes all items from the index\r\n     */\r\n    clear() {\r\n        this.index = new BinaryArray(this.comparer);\r\n    }\r\n\r\n    /**\r\n     * Returns all entries less than the passed key according to the\r\n     * indexes comparer.\r\n     * @param {any} key \r\n     */\r\n    $lt(key) {\r\n        let data = this.index.lt(key);\r\n        return [].concat.apply([], data);\r\n    }\r\n\r\n    /**\r\n     * Returns all entries less or equal to the passed key according to the\r\n     * indexes comparer.\r\n     * @param {any} key \r\n     */\r\n    $lte(key) {\r\n        let data = this.index.lte(key);\r\n        return [].concat.apply([], data);\r\n    }\r\n\r\n    /**\r\n     * Returns all entries greater than the passed key according to the\r\n     * indexes comparer.\r\n     * @param {any} key \r\n     */\r\n    $gt(key) {\r\n        let data = this.index.gt(key);\r\n        return [].concat.apply([], data);\r\n    }\r\n\r\n    /**\r\n     * Returns all entries greater than or equal to the passed key according to the\r\n     * indexes comparer.\r\n     * @param {any} key \r\n     */\r\n    $gte(key) {\r\n        let data = this.index.gte(key);\r\n        return [].concat.apply([], data);\r\n    }\r\n\r\n    /**\r\n     * Returns items matching passed index key\r\n     * @param  {any} key specified index key\r\n     * @return {Array<any>} values found\r\n     */\r\n    $eq(key) {\r\n        return this.index.get(key);\r\n    }\r\n\r\n    /**\r\n     * Returns items matching passed index keys\r\n     * @param  {Array<any>} key specified index keys\r\n     * @return {Array<any>} values found\r\n     */\r\n    $in(keys) {\r\n        return this.findMany(keys);\r\n    }\r\n\r\n    /**\r\n     * Returns items matching passed index key\r\n     * @param  {any} key specified index key\r\n     * @return {Array<any>} values found\r\n     */\r\n    find(key) {\r\n        return this.index.get(key);\r\n    }\r\n\r\n    /**\r\n     * Removes an item\r\n     * @param  {any} item item to remove\r\n     */\r\n    remove(item) {\r\n        const key = this.keyFn(item);\r\n        const pos = this.index.indexOf(key);\r\n        \r\n        if (pos > -1) {\r\n            const entry = this.index.getAt(pos);\r\n            const it = this.itemFn(item);\r\n            const i = entry.value.indexOf(it);\r\n            if (i > -1) {\r\n                entry.value.splice(i, 1);\r\n            }\r\n            if (entry.value.length === 0) {\r\n                this.index.removeAt(pos);\r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Adds an item with indexes as per itemFn and keyFn defined on index creation\r\n     * @param  {any} item item to add to index\r\n     */\r\n    insert(item) {\r\n        const key = this.keyFn(item);\r\n        const it = this.itemFn(item);\r\n        const pos = this.index.insertPos(key);\r\n        const entry = this.index.getAt(pos);\r\n        \r\n        if (entry && mem.eq(this.comparer, entry.key, key)) {\r\n            entry.value.push(it);\r\n        } else {\r\n            this.index.addAt(pos, key, [it]); \r\n        }\r\n    }\r\n}","// Exports all modules needed for our benchmark test\r\n// Includes modules not packaged with in-memory-store\r\nimport { InMemoryStore } from '../src/in-memory-store';\r\nimport { AVLIndex } from '../src/indexes/avlindex';\r\nimport { RBIndex } from './rbindex';\r\nimport { HashIndex } from '../src/indexes/hashindex';\r\nimport { BinaryIndex } from '../src/indexes/binaryindex';\r\n\r\nexport { InMemoryStore, AVLIndex, RBIndex, HashIndex, BinaryIndex };"],"names":["const","let","mem.intersect","this","mem.oneOrMany","mem.extract","prototypeAccessors","mem.defaultComparer","super","mem.eq","TreeBase","Node","require$$0","require$$1","mem.keyWrapComparer","RBTree","mem.lt","mem.lte","mem.gt","mem.gte"],"mappings":"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"}