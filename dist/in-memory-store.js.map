{"version":3,"file":"in-memory-store.js","sources":["../src/common.js","../src/indexes/hashindex.js","../src/indexes/binaryarray.js","../src/indexes/binaryindex.js","../src/indexes/avlindex.js","../src/in-memory-store.js"],"sourcesContent":["export function oneOrMany(items) {\r\n    if (!items) {\r\n        return [];\r\n    } else if (items instanceof Map) {\r\n        return Array.from(items.values());\r\n    } else if (!Array.isArray(items)) {\r\n        return [items];\r\n    } else {\r\n        return items;\r\n    }\r\n}\r\n\r\nexport function lt(comparer, a, b) {\r\n    return comparer(a, b) === -1;\r\n}\r\n\r\nexport function gt(comparer, a, b) {\r\n    return comparer(a, b) === 1;\r\n}\r\n\r\nexport function eq(comparer, a, b) {\r\n    return comparer(a, b) === 0;\r\n}\r\n\r\nexport function defaultComparer(a, b) {\r\n    return a > b ? 1 : a < b ? -1 : 0;\r\n}\r\n\r\nexport function keyWrapComparer(comparer) {\r\n    return function(a, b) {\r\n        return comparer(a.key, b.key);\r\n    };\r\n}\r\n\r\nexport function intersect(arrays) {\r\n    const ordered = (arrays.length===1\r\n        ? arrays : \r\n        arrays.sort((a1,a2) => a1.length - a2.length));\r\n    const shortest = ordered[0],\r\n        set = new Set(), \r\n        result = [];\r\n\r\n    for (let i=0; i < shortest.length; i++) {\r\n        const item = shortest[i];\r\n        let every = true; // don't use ordered.every ... it is slow\r\n        for(let j=1;j<ordered.length;j++) {\r\n            if(ordered[j].includes(item)) continue;\r\n            every = false;\r\n            break;\r\n        }\r\n        // ignore if not in every other array, or if already captured\r\n        if(!every || set.has(item)) continue;\r\n        // otherwise, add to bookeeping set and the result\r\n        set.add(item);\r\n        result[result.length] = item;\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function extract(map, keys) {\r\n    const r = [];\r\n    keys = oneOrMany(keys);\r\n    map = map || new Map([]);\r\n    \r\n    keys.forEach((key) => {\r\n        if (map.has(key)) {\r\n            r.push(map.get(key));\r\n        }\r\n    });    \r\n    return r;\r\n}","import * as mem from '../common';\r\n\r\nexport class HashIndex {\r\n    constructor (name, itemFn, keyFn, comparer) {\r\n        this.comparer = comparer || mem.defaultComparer;\r\n        this.index = new Map([]);\r\n        this.name = name;\r\n        this.itemFn = itemFn;\r\n        this.keyFn = keyFn;\r\n    }\r\n    \r\n    static build(name, itemFn, keyFn, items, comparer) {\r\n        let bin = new HashIndex(name, itemFn, keyFn, comparer);\r\n        bin.populate(items);\r\n        return bin;\r\n    }\r\n\r\n    get keys() {\r\n        return Array.from(this.index.keys());\r\n    }\r\n\r\n    clear() {\r\n        this.index = new Map([]);\r\n    }\r\n\r\n    findMany(keys) {\r\n        keys = mem.oneOrMany(keys);\r\n        let data = keys.map(m => this.find(m));\r\n        return [].concat.apply([], data);\r\n    }\r\n\r\n    find(key) {\r\n        return this.index.get(key);\r\n    }\r\n\r\n    remove(item) {\r\n        const key = this.keyFn(item);\r\n        if (this.index.has(key)) {\r\n            const col = this.index.get(key);\r\n            const it = this.itemFn(item);\r\n            const i = col.indexOf(it);\r\n            if (i > -1) {\r\n                col.splice(i, 1);\r\n            }\r\n            if (col.length === 0) {\r\n                this.index.delete(key);\r\n            }\r\n        }\r\n    }\r\n\r\n    populate(items) {\r\n        items = mem.oneOrMany(items);\r\n        items.forEach(item => this.insert(item));\r\n    }\r\n\r\n    insert(item) {\r\n        const key = this.keyFn(item);\r\n        const it = this.itemFn(item);\r\n        if (it && key) {\r\n            if (this.index.has(key)) {\r\n                this.index.get(key).push(it);\r\n            } else {\r\n                this.index.set(key, [it]);\r\n            }\r\n        }\r\n    }\r\n\r\n    update(item, olditem) {\r\n        this.remove(olditem);\r\n        this.insert(item);\r\n    }\r\n}","import * as mem from '../common';\r\n\r\nexport class BinaryArray {\r\n    constructor (comparer) {\r\n        this.arr = [];\r\n        this.comparer = comparer || mem.defaultComparer;\r\n    }\r\n    \r\n    clear() {\r\n        this.arr = [];\r\n    }\r\n\r\n    get keys() {\r\n        return this.arr.map(m => m.key);\r\n    }\r\n\r\n    indexOf(key) {\r\n        let i = this.insertPos(key);\r\n        if (this.arr[i] && mem.eq(this.comparer, this.arr[i].key, key)) {\r\n            return i;\r\n        } else {\r\n            return -1;\r\n        }\r\n    }\r\n\r\n    insertPos(key) {\r\n        let low = 0, high = this.arr.length, mid;\r\n        while (low < high) {\r\n            // faster version of Math.floor((low + high) / 2)\r\n            mid = (low + high) >>> 1; \r\n            mem.lt(this.comparer, this.arr[mid].key, key) ? low = mid + 1 : high = mid\r\n        }\r\n        return low;\r\n    }\r\n\r\n    get(key) {\r\n        const i = this.indexOf(key);\r\n        if (i > -1) {\r\n            return this.arr[i].value;\r\n        }\r\n    }\r\n\r\n    remove(key) {\r\n        const i = this.indexOf(key);\r\n        if (i > -1) {\r\n            this.removeAt(i);\r\n        }\r\n    }\r\n\r\n    add(key, value) {\r\n        const ix = this.insertPos(key);\r\n        let item = { key: key, value: value };\r\n        this.addAt(ix, key, value);\r\n    }\r\n\r\n    addAt(pos, key, value) {\r\n        let item = { key: key, value: value };\r\n        this.arr.splice(pos, 0, item);\r\n    }\r\n\r\n    removeAt(pos) {\r\n        this.arr.splice(pos, 1);\r\n    }\r\n\r\n    getAt(pos) {\r\n        return this.arr[pos];\r\n    }\r\n\r\n    update(item) {\r\n        this.indexOf(item.key);\r\n        if (i !== undefined) {\r\n            this.arr[i].value = item;\r\n        }\r\n    }\r\n}","import * as mem from '../common';\r\nimport { BinaryArray } from './binaryarray';\r\n\r\nexport class BinaryIndex {\r\n    constructor (name, itemFn, keyFn, comparer) {\r\n        this.comparer = comparer || mem.defaultComparer;\r\n        this.index = new BinaryArray(this.comparer);\r\n        this.name = name;\r\n        this.itemFn = itemFn;\r\n        this.keyFn = keyFn;\r\n    }\r\n    \r\n    static build(name, itemFn, keyFn, items, comparer) {\r\n        let bin = new BinaryIndex(name, itemFn, keyFn, comparer);\r\n        bin.populate(items);\r\n        return bin;\r\n    }\r\n\r\n    get keys() {\r\n        return this.index.keys;\r\n    }\r\n\r\n    clear() {\r\n        this.index = new BinaryArray(this.comparer);\r\n    }\r\n\r\n    findMany(keys) {\r\n        keys = mem.oneOrMany(keys);\r\n        let data = keys.map(m => this.find(m));\r\n        return [].concat.apply([], data);\r\n    }\r\n\r\n    find(key) {\r\n        return this.index.get(key);\r\n    }\r\n\r\n    remove(item) {\r\n        const key = this.keyFn(item);\r\n        const pos = this.index.indexOf(key);\r\n        \r\n        if (pos > -1) {\r\n            const entry = this.index.getAt(pos);\r\n            const it = this.itemFn(item);\r\n            const i = entry.value.indexOf(it);\r\n            if (i > -1) {\r\n                entry.value.splice(i, 1);\r\n            }\r\n            if (entry.value.length === 0) {\r\n                this.index.removeAt(pos);\r\n            }\r\n        }\r\n    }\r\n\r\n    populate(items) {\r\n        items = mem.oneOrMany(items);\r\n        items.forEach(item => this.insert(item));\r\n    }\r\n    \r\n    insert(item) {\r\n        const key = this.keyFn(item);\r\n        const it = this.itemFn(item);\r\n        const pos = this.index.insertPos(key);\r\n        const entry = this.index.getAt(pos);\r\n        \r\n        if (entry && mem.eq(this.comparer, entry.key, key)) {\r\n            entry.value.push(it);\r\n        } else {\r\n            this.index.addAt(pos, key, [it]); \r\n        }\r\n    }\r\n\r\n    update(item, olditem) {\r\n        this.remove(olditem);\r\n        this.insert(item);\r\n    }\r\n}","import * as mem from '../common';\r\nimport AVLTree from 'avl';\r\n\r\nexport class AVLIndex {\r\n    constructor (name, itemFn, keyFn, comparer) {\r\n        this.comparer = comparer || mem.defaultComparer;\r\n        this.index = new AVLTree(comparer);\r\n        this.name = name;\r\n        this.itemFn = itemFn;\r\n        this.keyFn = keyFn;\r\n    }\r\n    \r\n    static build(name, itemFn, keyFn, items, comparer) {\r\n        let bin = new AVLIndex(name, itemFn, keyFn, comparer);\r\n        bin.populate(items);\r\n        return bin;\r\n    }\r\n\r\n    get keys() {\r\n        return this.index.keys();\r\n    }\r\n\r\n    clear() {\r\n        this.index.clear();\r\n    }\r\n\r\n    findMany(keys) {\r\n        keys = mem.oneOrMany(keys);\r\n        let data = keys.map(m => this.find(m));\r\n        return [].concat.apply([], data);\r\n    }\r\n\r\n    find(key) {\r\n        let found = this.index.find(key);\r\n        if (found) {\r\n            return found.data;\r\n        } else {\r\n            return [];\r\n        }\r\n    }\r\n\r\n    remove(item) {\r\n        const key = this.keyFn(item);\r\n        const entry = this.index.find(key);\r\n\r\n        if (entry) {\r\n            const it = this.itemFn(item);\r\n            const arr = entry.data;\r\n            const i = arr.indexOf(it);\r\n            if (i > -1) {\r\n                arr.splice(i, 1);\r\n            }\r\n            if (arr.length === 0) {\r\n                this.index.remove(key);\r\n            }\r\n        }\r\n    }\r\n\r\n    populate(items) {\r\n        items = mem.oneOrMany(items);\r\n        items.forEach(item => this.insert(item));\r\n    }\r\n    \r\n    insert(item) {\r\n        const key = this.keyFn(item);\r\n        const it = this.itemFn(item);\r\n        const entry = this.index.find(key);\r\n        \r\n        if (entry) {\r\n            entry.data.push(it);\r\n        } else {\r\n            this.index.insert(key, [it]);\r\n        }\r\n    }\r\n\r\n    update(item, olditem) {\r\n        this.remove(olditem);\r\n        this.insert(item);\r\n    }\r\n}","import { HashIndex } from './indexes/hashindex';\r\nimport { BinaryIndex } from './indexes/binaryindex';\r\nimport { AVLIndex } from './indexes/avlindex';\r\nimport * as mem from './common';\r\n\r\nexport class InMemoryStore {\r\n    constructor(keyFn, comparer) {\r\n        this.indexes = new Map([]);\r\n        this.entries = new Map([]);\r\n        this.keyFn = keyFn;\r\n        this.comparer = comparer || mem.defaultComparer;\r\n    }\r\n\r\n    get isEmpty() {\r\n        return this.entries.size === 0;\r\n    }\r\n\r\n    getIndexKeys(indexName) {\r\n        return this.indexes.get(indexName).keys;\r\n    }\r\n\r\n    populate(items) {\r\n        items = mem.oneOrMany(items);\r\n        this.indexes.forEach(index => index.populate(items));\r\n        const data = items.map(item => [this.keyFn(item), item]);\r\n        this.entries = new Map(data);\r\n    }\r\n\r\n    rebuild(items) {\r\n        this.entries = new Map([]);\r\n        this.indexes.forEach(index => index.clear());\r\n        this.populate(items);\r\n    }\r\n\r\n    destroy() {\r\n        this.indexes = new Map([]);\r\n        this.entries = new Map([]);\r\n        this.keyFn = undefined;\r\n    }\r\n\t\r\n\tget(indexName, values) {\r\n        const data = this.indexes.has(indexName) ? \r\n            this.indexes.get(indexName).findMany(values) : [];\r\n        return mem.extract(this.entries, data);\r\n    }\r\n\r\n    getOne(indexName, value) {\r\n        const data = this.indexes.has(indexName) ? \r\n            this.indexes.get(indexName).find(value) : [];\r\n        return mem.extract(this.entries, data);\r\n    }\r\n\r\n    // Takes array of [indexName, [exactMatch, exactMatch]]\r\n    getFromSet(valueSet) {\r\n        const dataSets = valueSet.map((q) => {\r\n            return this.get(q[0], q[1]);\r\n        });\r\n        const data = mem.intersect(dataSets);\r\n        return mem.extract(this.entries, data);\r\n    }\r\n\r\n    buildIndex(indexName, ixFn) {\r\n        return this.buildBinaryIndex(indexName, ixFn, this.comparer);\r\n    }\r\n\r\n    buildHashIndex(indexName, ixFn) {\r\n        const newIndex = HashIndex.build(indexName, this.keyFn, ixFn, this.entries, this.comparer);\r\n        this.indexes.set(indexName, newIndex);\r\n        return newIndex;\r\n    }\r\n\r\n    buildBinaryIndex(indexName, ixFn) {\r\n        const newIndex = BinaryIndex.build(indexName, this.keyFn, ixFn, this.entries, this.comparer);\r\n        this.indexes.set(indexName, newIndex);\r\n        return newIndex;\r\n    }\r\n\r\n    buildAVLIndex(indexName, ixFn) {\r\n        const newIndex = AVLIndex.build(indexName, this.keyFn, ixFn, this.entries, this.comparer);\r\n        this.indexes.set(indexName, newIndex);\r\n        return newIndex;\r\n    }\r\n\r\n    remove(items) {\r\n        items = mem.oneOrMany(items);\r\n        items.forEach(item => {\r\n            this.removeOne(item);\r\n        });\r\n    }\r\n\r\n    removeOne(item) {\r\n        if (this.indexes.size > 0) {\r\n            this.indexes.forEach(index => index.remove(item));\r\n        }\r\n        return this.entries.delete(this.keyFn(item));\r\n    }\r\n\r\n    removeKey(key) {\r\n        const item = this.entries.get(key);\r\n        if (this.indexes.size > 0) {\r\n            this.indexes.forEach(index => index.remove(item));\r\n        }\r\n        return this.entries.delete(key);\r\n    }\r\n\r\n    add(items) {\r\n        items = mem.oneOrMany(items);\r\n        items.forEach(item => {\r\n            this.updateOne(item);\r\n        });\r\n    }\r\n\r\n    addOne(item) {\r\n        this.updateOne(item);\r\n    }\r\n\r\n    update(items) {\r\n        items = mem.oneOrMany(items);\r\n        items.forEach(item => {\r\n            this.updateOne(item);\r\n        });\r\n    }\r\n\r\n    updateOne(item) {\r\n        let old;\r\n        const key = this.keyFn(item);\r\n        if (this.entries.has(key)) {\r\n            old = this.entries.get(key);\r\n        }\r\n        if (this.indexes.size > 0) {\r\n            this.indexes.forEach(index => index.update(item, old));\r\n        }\r\n        this.entries.set(key, item);\r\n    }\r\n}"],"names":["const","let","mem.defaultComparer","mem.oneOrMany","this","prototypeAccessors","mem.eq","mem.lt","mem.extract","mem.intersect"],"mappings":"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"}