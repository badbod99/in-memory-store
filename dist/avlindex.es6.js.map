{"version":3,"file":"avlindex.es6.js","sources":["../src/common.js","../node_modules/avl/src/utils.js","../node_modules/avl/src/index.js","../src/indexes/avlindex.js"],"sourcesContent":["export function oneOrMany(items) {\r\n    if (!items) {\r\n        return [];\r\n    } else if (items instanceof Map) {\r\n        return Array.from(items.values());\r\n    } else if (!Array.isArray(items)) {\r\n        return [items];\r\n    } else {\r\n        return items;\r\n    }\r\n}\r\n\r\nexport function lt(comparer, a, b) {\r\n    return comparer(a, b) === -1;\r\n}\r\n\r\nexport function gt(comparer, a, b) {\r\n    return comparer(a, b) === 1;\r\n}\r\n\r\nexport function eq(comparer, a, b) {\r\n    return comparer(a, b) === 0;\r\n}\r\n\r\nexport function defaultComparer(a, b) {\r\n    return a > b ? 1 : a < b ? -1 : 0;\r\n}\r\n\r\nexport function keyWrapComparer(comparer) {\r\n    return function(a, b) {\r\n        return comparer(a.key, b.key);\r\n    };\r\n}\r\n\r\nexport function intersect(arrays) {\r\n    const ordered = (arrays.length===1\r\n        ? arrays : \r\n        arrays.sort((a1,a2) => a1.length - a2.length));\r\n    const shortest = ordered[0],\r\n        set = new Set(), \r\n        result = [];\r\n\r\n    for (let i=0; i < shortest.length; i++) {\r\n        const item = shortest[i];\r\n        let every = true; // don't use ordered.every ... it is slow\r\n        for(let j=1;j<ordered.length;j++) {\r\n            if(ordered[j].includes(item)) continue;\r\n            every = false;\r\n            break;\r\n        }\r\n        // ignore if not in every other array, or if already captured\r\n        if(!every || set.has(item)) continue;\r\n        // otherwise, add to bookeeping set and the result\r\n        set.add(item);\r\n        result[result.length] = item;\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function extract(map, keys) {\r\n    const r = [];\r\n    keys.forEach((key) => {\r\n        if (map.has(key)) {\r\n            r.push(map.get(key));\r\n        }\r\n    });    \r\n    return r;\r\n}","\n/**\n * Prints tree horizontally\n * @param  {Node}                       root\n * @param  {Function(node:Node):String} [printNode]\n * @return {String}\n */\nexport function print (root, printNode = (n) => n.key) {\n  var out = [];\n  row(root, '', true, (v) => out.push(v), printNode);\n  return out.join('');\n}\n\n/**\n * Prints level of the tree\n * @param  {Node}                        root\n * @param  {String}                      prefix\n * @param  {Boolean}                     isTail\n * @param  {Function(in:string):void}    out\n * @param  {Function(node:Node):String}  printNode\n */\nfunction row (root, prefix, isTail, out, printNode) {\n  if (root) {\n    out(`${ prefix }${ isTail ? '└── ' : '├── ' }${ printNode(root) }\\n`);\n    const indent = prefix + (isTail ? '    ' : '│   ');\n    if (root.left)  row(root.left,  indent, false, out, printNode);\n    if (root.right) row(root.right, indent, true,  out, printNode);\n  }\n}\n\n\n/**\n * Is the tree balanced (none of the subtrees differ in height by more than 1)\n * @param  {Node}    root\n * @return {Boolean}\n */\nexport function isBalanced(root) {\n  if (root === null) return true; // If node is empty then return true\n\n  // Get the height of left and right sub trees\n  var lh = height(root.left);\n  var rh = height(root.right);\n\n  if (Math.abs(lh - rh) <= 1 &&\n      isBalanced(root.left)  &&\n      isBalanced(root.right)) return true;\n\n  // If we reach here then tree is not height-balanced\n  return false;\n}\n\n/**\n * The function Compute the 'height' of a tree.\n * Height is the number of nodes along the longest path\n * from the root node down to the farthest leaf node.\n *\n * @param  {Node} node\n * @return {Number}\n */\nfunction height(node) {\n  return node ? (1 + Math.max(height(node.left), height(node.right))) : 0;\n}\n\n\nexport function loadRecursive (parent, keys, values, start, end) {\n  const size = end - start;\n  if (size > 0) {\n    const middle = start + Math.floor(size / 2);\n    const key    = keys[middle];\n    const data   = values[middle];\n    const node   = { key, data, parent };\n    node.left    = loadRecursive(node, keys, values, start, middle);\n    node.right   = loadRecursive(node, keys, values, middle + 1, end);\n    return node;\n  }\n  return null;\n}\n\n\nexport function markBalance(node) {\n  if (node === null) return 0;\n  const lh = markBalance(node.left);\n  const rh = markBalance(node.right);\n\n  node.balanceFactor = lh - rh;\n  return Math.max(lh, rh) + 1;\n}\n\n\nexport function sort(keys, values, left, right, compare) {\n  if (left >= right) return;\n\n  // eslint-disable-next-line no-bitwise\n  const pivot = keys[(left + right) >> 1];\n  let i = left - 1;\n  let j = right + 1;\n\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    do i++; while (compare(keys[i], pivot) < 0);\n    do j--; while (compare(keys[j], pivot) > 0);\n    if (i >= j) break;\n\n    let tmp = keys[i];\n    keys[i] = keys[j];\n    keys[j] = tmp;\n\n    tmp = values[i];\n    values[i] = values[j];\n    values[j] = tmp;\n  }\n\n  sort(keys, values,  left,     j, compare);\n  sort(keys, values, j + 1, right, compare);\n}\n","import { print, isBalanced, loadRecursive, markBalance, sort } from './utils';\n\n\n// function createNode (parent, left, right, height, key, data) {\n//   return { parent, left, right, balanceFactor: height, key, data };\n// }\n\n/**\n * @typedef {{\n *   parent:        ?Node,\n *   left:          ?Node,\n *   right:         ?Node,\n *   balanceFactor: number,\n *   key:           Key,\n *   data:          Value\n * }} Node\n */\n\n/**\n * @typedef {*} Key\n */\n\n/**\n * @typedef {*} Value\n */\n\n/**\n * Default comparison function\n * @param {Key} a\n * @param {Key} b\n * @returns {number}\n */\nfunction DEFAULT_COMPARE (a, b) { return a > b ? 1 : a < b ? -1 : 0; }\n\n\n/**\n * Single left rotation\n * @param  {Node} node\n * @return {Node}\n */\nfunction rotateLeft (node) {\n  var rightNode = node.right;\n  node.right    = rightNode.left;\n\n  if (rightNode.left) rightNode.left.parent = node;\n\n  rightNode.parent = node.parent;\n  if (rightNode.parent) {\n    if (rightNode.parent.left === node) {\n      rightNode.parent.left = rightNode;\n    } else {\n      rightNode.parent.right = rightNode;\n    }\n  }\n\n  node.parent    = rightNode;\n  rightNode.left = node;\n\n  node.balanceFactor += 1;\n  if (rightNode.balanceFactor < 0) {\n    node.balanceFactor -= rightNode.balanceFactor;\n  }\n\n  rightNode.balanceFactor += 1;\n  if (node.balanceFactor > 0) {\n    rightNode.balanceFactor += node.balanceFactor;\n  }\n  return rightNode;\n}\n\n\nfunction rotateRight (node) {\n  var leftNode = node.left;\n  node.left = leftNode.right;\n  if (node.left) node.left.parent = node;\n\n  leftNode.parent = node.parent;\n  if (leftNode.parent) {\n    if (leftNode.parent.left === node) {\n      leftNode.parent.left = leftNode;\n    } else {\n      leftNode.parent.right = leftNode;\n    }\n  }\n\n  node.parent    = leftNode;\n  leftNode.right = node;\n\n  node.balanceFactor -= 1;\n  if (leftNode.balanceFactor > 0) {\n    node.balanceFactor -= leftNode.balanceFactor;\n  }\n\n  leftNode.balanceFactor -= 1;\n  if (node.balanceFactor < 0) {\n    leftNode.balanceFactor += node.balanceFactor;\n  }\n\n  return leftNode;\n}\n\n\n// function leftBalance (node) {\n//   if (node.left.balanceFactor === -1) rotateLeft(node.left);\n//   return rotateRight(node);\n// }\n\n\n// function rightBalance (node) {\n//   if (node.right.balanceFactor === 1) rotateRight(node.right);\n//   return rotateLeft(node);\n// }\n\n\nexport default class AVLTree {\n  /**\n   * Callback for comparator\n   * @callback comparatorCallback\n   * @param {Key} a\n   * @param {Key} b\n   * @returns {number}\n   */\n\n  /**\n   * @class AVLTree\n   * @constructor\n   * @param  {comparatorCallback} [comparator]\n   * @param  {boolean}            [noDuplicates=false] Disallow duplicates\n   */\n  constructor (comparator, noDuplicates = false) {\n    this._comparator = comparator || DEFAULT_COMPARE;\n    this._root = null;\n    this._size = 0;\n    this._noDuplicates = !!noDuplicates;\n  }\n\n\n  /**\n   * Clear the tree\n   * @return {AVLTree}\n   */\n  destroy() {\n    return this.clear();\n  }\n\n\n  /**\n   * Clear the tree\n   * @return {AVLTree}\n   */\n  clear() {\n    this._root = null;\n    this._size = 0;\n    return this;\n  }\n\n  /**\n   * Number of nodes\n   * @return {number}\n   */\n  get size () {\n    return this._size;\n  }\n\n\n  /**\n   * Whether the tree contains a node with the given key\n   * @param  {Key} key\n   * @return {boolean} true/false\n   */\n  contains (key) {\n    if (this._root)  {\n      var node       = this._root;\n      var comparator = this._comparator;\n      while (node)  {\n        var cmp = comparator(key, node.key);\n        if      (cmp === 0) return true;\n        else if (cmp < 0)   node = node.left;\n        else                node = node.right;\n      }\n    }\n    return false;\n  }\n\n\n  /* eslint-disable class-methods-use-this */\n\n  /**\n   * Successor node\n   * @param  {Node} node\n   * @return {?Node}\n   */\n  next (node) {\n    var successor = node;\n    if (successor) {\n      if (successor.right) {\n        successor = successor.right;\n        while (successor.left) successor = successor.left;\n      } else {\n        successor = node.parent;\n        while (successor && successor.right === node) {\n          node = successor; successor = successor.parent;\n        }\n      }\n    }\n    return successor;\n  }\n\n\n  /**\n   * Predecessor node\n   * @param  {Node} node\n   * @return {?Node}\n   */\n  prev (node) {\n    var predecessor = node;\n    if (predecessor) {\n      if (predecessor.left) {\n        predecessor = predecessor.left;\n        while (predecessor.right) predecessor = predecessor.right;\n      } else {\n        predecessor = node.parent;\n        while (predecessor && predecessor.left === node) {\n          node = predecessor;\n          predecessor = predecessor.parent;\n        }\n      }\n    }\n    return predecessor;\n  }\n  /* eslint-enable class-methods-use-this */\n\n\n  /**\n   * Callback for forEach\n   * @callback forEachCallback\n   * @param {Node} node\n   * @param {number} index\n   */\n\n  /**\n   * @param  {forEachCallback} callback\n   * @return {AVLTree}\n   */\n  forEach(callback) {\n    var current = this._root;\n    var s = [], done = false, i = 0;\n\n    while (!done) {\n      // Reach the left most Node of the current Node\n      if (current) {\n        // Place pointer to a tree node on the stack\n        // before traversing the node's left subtree\n        s.push(current);\n        current = current.left;\n      } else {\n        // BackTrack from the empty subtree and visit the Node\n        // at the top of the stack; however, if the stack is\n        // empty you are done\n        if (s.length > 0) {\n          current = s.pop();\n          callback(current, i++);\n\n          // We have visited the node and its left\n          // subtree. Now, it's right subtree's turn\n          current = current.right;\n        } else done = true;\n      }\n    }\n    return this;\n  }\n\n\n  /**\n   * Walk key range from `low` to `high`. Stops if `fn` returns a value.\n   * @param  {Key}      low\n   * @param  {Key}      high\n   * @param  {Function} fn\n   * @param  {*?}       ctx\n   * @return {SplayTree}\n   */\n  range(low, high, fn, ctx) {\n    const Q = [];\n    const compare = this._comparator;\n    let node = this._root, cmp;\n\n    while (Q.length !== 0 || node) {\n      if (node) {\n        Q.push(node);\n        node = node.left;\n      } else {\n        node = Q.pop();\n        cmp = compare(node.key, high);\n        if (cmp > 0) {\n          break;\n        } else if (compare(node.key, low) >= 0) {\n          if (fn.call(ctx, node)) return this; // stop if smth is returned\n        }\n        node = node.right;\n      }\n    }\n    return this;\n  }\n\n\n  /**\n   * Returns all keys in order\n   * @return {Array<Key>}\n   */\n  keys () {\n    var current = this._root;\n    var s = [], r = [], done = false;\n\n    while (!done) {\n      if (current) {\n        s.push(current);\n        current = current.left;\n      } else {\n        if (s.length > 0) {\n          current = s.pop();\n          r.push(current.key);\n          current = current.right;\n        } else done = true;\n      }\n    }\n    return r;\n  }\n\n\n  /**\n   * Returns `data` fields of all nodes in order.\n   * @return {Array<Value>}\n   */\n  values () {\n    var current = this._root;\n    var s = [], r = [], done = false;\n\n    while (!done) {\n      if (current) {\n        s.push(current);\n        current = current.left;\n      } else {\n        if (s.length > 0) {\n          current = s.pop();\n          r.push(current.data);\n          current = current.right;\n        } else done = true;\n      }\n    }\n    return r;\n  }\n\n\n  /**\n   * Returns node at given index\n   * @param  {number} index\n   * @return {?Node}\n   */\n  at (index) {\n    // removed after a consideration, more misleading than useful\n    // index = index % this.size;\n    // if (index < 0) index = this.size - index;\n\n    var current = this._root;\n    var s = [], done = false, i = 0;\n\n    while (!done) {\n      if (current) {\n        s.push(current);\n        current = current.left;\n      } else {\n        if (s.length > 0) {\n          current = s.pop();\n          if (i === index) return current;\n          i++;\n          current = current.right;\n        } else done = true;\n      }\n    }\n    return null;\n  }\n\n\n  /**\n   * Returns node with the minimum key\n   * @return {?Node}\n   */\n  minNode () {\n    var node = this._root;\n    if (!node) return null;\n    while (node.left) node = node.left;\n    return node;\n  }\n\n\n  /**\n   * Returns node with the max key\n   * @return {?Node}\n   */\n  maxNode () {\n    var node = this._root;\n    if (!node) return null;\n    while (node.right) node = node.right;\n    return node;\n  }\n\n\n  /**\n   * Min key\n   * @return {?Key}\n   */\n  min () {\n    var node = this._root;\n    if (!node) return null;\n    while (node.left) node = node.left;\n    return node.key;\n  }\n\n\n  /**\n   * Max key\n   * @return {?Key}\n   */\n  max () {\n    var node = this._root;\n    if (!node) return null;\n    while (node.right) node = node.right;\n    return node.key;\n  }\n\n\n  /**\n   * @return {boolean} true/false\n   */\n  isEmpty() {\n    return !this._root;\n  }\n\n\n  /**\n   * Removes and returns the node with smallest key\n   * @return {?Node}\n   */\n  pop () {\n    var node = this._root, returnValue = null;\n    if (node) {\n      while (node.left) node = node.left;\n      returnValue = { key: node.key, data: node.data };\n      this.remove(node.key);\n    }\n    return returnValue;\n  }\n\n\n  /**\n   * Find node by key\n   * @param  {Key} key\n   * @return {?Node}\n   */\n  find (key) {\n    var root = this._root;\n    // if (root === null)    return null;\n    // if (key === root.key) return root;\n\n    var subtree = root, cmp;\n    var compare = this._comparator;\n    while (subtree) {\n      cmp = compare(key, subtree.key);\n      if      (cmp === 0) return subtree;\n      else if (cmp < 0)   subtree = subtree.left;\n      else                subtree = subtree.right;\n    }\n\n    return null;\n  }\n\n\n  /**\n   * Insert a node into the tree\n   * @param  {Key} key\n   * @param  {Value} [data]\n   * @return {?Node}\n   */\n  insert (key, data) {\n    if (!this._root) {\n      this._root = {\n        parent: null, left: null, right: null, balanceFactor: 0,\n        key, data\n      };\n      this._size++;\n      return this._root;\n    }\n\n    var compare = this._comparator;\n    var node    = this._root;\n    var parent  = null;\n    var cmp     = 0;\n\n    if (this._noDuplicates) {\n      while (node) {\n        cmp = compare(key, node.key);\n        parent = node;\n        if      (cmp === 0) return null;\n        else if (cmp < 0)   node = node.left;\n        else                node = node.right;\n      }\n    } else {\n      while (node) {\n        cmp = compare(key, node.key);\n        parent = node;\n        if      (cmp <= 0)  node = node.left; //return null;\n        else                node = node.right;\n      }\n    }\n\n    var newNode = {\n      left: null,\n      right: null,\n      balanceFactor: 0,\n      parent, key, data\n    };\n    var newRoot;\n    if (cmp <= 0) parent.left  = newNode;\n    else         parent.right = newNode;\n\n    while (parent) {\n      cmp = compare(parent.key, key);\n      if (cmp < 0) parent.balanceFactor -= 1;\n      else         parent.balanceFactor += 1;\n\n      if        (parent.balanceFactor === 0) break;\n      else if   (parent.balanceFactor < -1) {\n        // inlined\n        //var newRoot = rightBalance(parent);\n        if (parent.right.balanceFactor === 1) rotateRight(parent.right);\n        newRoot = rotateLeft(parent);\n\n        if (parent === this._root) this._root = newRoot;\n        break;\n      } else if (parent.balanceFactor > 1) {\n        // inlined\n        // var newRoot = leftBalance(parent);\n        if (parent.left.balanceFactor === -1) rotateLeft(parent.left);\n        newRoot = rotateRight(parent);\n\n        if (parent === this._root) this._root = newRoot;\n        break;\n      }\n      parent = parent.parent;\n    }\n\n    this._size++;\n    return newNode;\n  }\n\n\n  /**\n   * Removes the node from the tree. If not found, returns null.\n   * @param  {Key} key\n   * @return {?Node}\n   */\n  remove (key) {\n    if (!this._root) return null;\n\n    var node = this._root;\n    var compare = this._comparator;\n    var cmp = 0;\n\n    while (node) {\n      cmp = compare(key, node.key);\n      if      (cmp === 0) break;\n      else if (cmp < 0)   node = node.left;\n      else                node = node.right;\n    }\n    if (!node) return null;\n\n    var returnValue = node.key;\n    var max, min;\n\n    if (node.left) {\n      max = node.left;\n\n      while (max.left || max.right) {\n        while (max.right) max = max.right;\n\n        node.key = max.key;\n        node.data = max.data;\n        if (max.left) {\n          node = max;\n          max = max.left;\n        }\n      }\n\n      node.key  = max.key;\n      node.data = max.data;\n      node = max;\n    }\n\n    if (node.right) {\n      min = node.right;\n\n      while (min.left || min.right) {\n        while (min.left) min = min.left;\n\n        node.key  = min.key;\n        node.data = min.data;\n        if (min.right) {\n          node = min;\n          min = min.right;\n        }\n      }\n\n      node.key  = min.key;\n      node.data = min.data;\n      node = min;\n    }\n\n    var parent = node.parent;\n    var pp     = node;\n    var newRoot;\n\n    while (parent) {\n      if (parent.left === pp) parent.balanceFactor -= 1;\n      else                    parent.balanceFactor += 1;\n\n      if        (parent.balanceFactor < -1) {\n        // inlined\n        //var newRoot = rightBalance(parent);\n        if (parent.right.balanceFactor === 1) rotateRight(parent.right);\n        newRoot = rotateLeft(parent);\n\n        if (parent === this._root) this._root = newRoot;\n        parent = newRoot;\n      } else if (parent.balanceFactor > 1) {\n        // inlined\n        // var newRoot = leftBalance(parent);\n        if (parent.left.balanceFactor === -1) rotateLeft(parent.left);\n        newRoot = rotateRight(parent);\n\n        if (parent === this._root) this._root = newRoot;\n        parent = newRoot;\n      }\n\n      if (parent.balanceFactor === -1 || parent.balanceFactor === 1) break;\n\n      pp     = parent;\n      parent = parent.parent;\n    }\n\n    if (node.parent) {\n      if (node.parent.left === node) node.parent.left  = null;\n      else                           node.parent.right = null;\n    }\n\n    if (node === this._root) this._root = null;\n\n    this._size--;\n    return returnValue;\n  }\n\n\n  /**\n   * Bulk-load items\n   * @param  {Array<Key>}  keys\n   * @param  {Array<Value>}  [values]\n   * @return {AVLTree}\n   */\n  load(keys = [], values = [], presort) {\n    if (this._size !== 0) throw new Error('bulk-load: tree is not empty');\n    const size = keys.length;\n    if (presort) sort(keys, values, 0, size - 1, this._comparator);\n    this._root = loadRecursive(null, keys, values, 0, size);\n    markBalance(this._root);\n    this._size = size;\n    return this;\n  }\n\n\n  /**\n   * Returns true if the tree is balanced\n   * @return {boolean}\n   */\n  isBalanced() {\n    return isBalanced(this._root);\n  }\n\n\n  /**\n   * String representation of the tree - primitive horizontal print-out\n   * @param  {Function(Node):string} [printNode]\n   * @return {string}\n   */\n  toString (printNode) {\n    return print(this._root, printNode);\n  }\n}\n\nAVLTree.default = AVLTree;\n","import * as mem from '../common';\r\nimport AVLTree from 'avl';\r\n\r\nclass AVLIndex {\r\n    constructor (name, itemFn, keyFn, comparer) {\r\n        this.comparer = comparer || mem.defaultComparer;\r\n        this.index = new AVLTree(comparer);\r\n        this.name = name;\r\n        this.itemFn = itemFn;\r\n        this.keyFn = keyFn;\r\n    }\r\n    \r\n    static build(name, itemFn, keyFn, items, comparer) {\r\n        let bin = new AVLIndex(name, itemFn, keyFn, comparer);\r\n        bin.populate(items);\r\n        return bin;\r\n    }\r\n\r\n    get keys() {\r\n        return this.index.keys();\r\n    }\r\n\r\n    clear() {\r\n        this.index.clear();\r\n    }\r\n\r\n    findMany(keys) {\r\n        keys = mem.oneOrMany(keys);\r\n        let data = keys.map(m => this.find(m));\r\n        return [].concat.apply([], data);\r\n    }\r\n\r\n    find(key) {\r\n        let found = this.index.find(key);\r\n        if (found) {\r\n            return found.data;\r\n        } else {\r\n            return [];\r\n        }\r\n    }\r\n\r\n    remove(item) {\r\n        const key = this.keyFn(item);\r\n        const entry = this.index.find(key);\r\n\r\n        if (entry) {\r\n            const it = this.itemFn(item);\r\n            const arr = entry.data;\r\n            const i = arr.indexOf(it);\r\n            if (i > -1) {\r\n                arr.splice(i, 1);\r\n            }\r\n            if (arr.length === 0) {\r\n                this.index.remove(key);\r\n            }\r\n        }\r\n    }\r\n\r\n    populate(items) {\r\n        items = mem.oneOrMany(items);\r\n        items.forEach(item => this.insert(item));\r\n    }\r\n    \r\n    insert(item) {\r\n        const key = this.keyFn(item);\r\n        const it = this.itemFn(item);\r\n        const entry = this.index.find(key);\r\n        \r\n        if (entry) {\r\n            entry.data.push(it);\r\n        } else {\r\n            this.index.insert(key, [it]);\r\n        }\r\n    }\r\n\r\n    update(item, olditem) {\r\n        this.remove(olditem);\r\n        this.insert(item);\r\n    }\r\n}\r\n\r\nexport default AVLIndex;"],"names":["const","let","mem.defaultComparer","prototypeAccessors","mem.oneOrMany","this"],"mappings":"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"}