{"version":3,"file":"binaryarray.js","sources":["../src/common.js","../src/indexes/binaryarray.js"],"sourcesContent":["export function oneOrMany(items) {\r\n    if (!items) {\r\n        return [];\r\n    } else if (items instanceof Map) {\r\n        return Array.from(items.values());\r\n    } else if (!Array.isArray(items)) {\r\n        return [items];\r\n    } else {\r\n        return items;\r\n    }\r\n}\r\n\r\nexport function lt(comparer, a, b) {\r\n    return comparer(a, b) === -1;\r\n}\r\n\r\nexport function gt(comparer, a, b) {\r\n    return comparer(a, b) === 1;\r\n}\r\n\r\nexport function eq(comparer, a, b) {\r\n    return comparer(a, b) === 0;\r\n}\r\n\r\nexport function defaultComparer(a, b) {\r\n    return a > b ? 1 : a < b ? -1 : 0;\r\n}\r\n\r\nexport function intersect(arrays) {\r\n    const ordered = (arrays.length===1\r\n        ? arrays : \r\n        arrays.sort((a1,a2) => a1.length - a2.length));\r\n    const shortest = ordered[0],\r\n        set = new Set(), \r\n        result = [];\r\n\r\n    for (let i=0; i < shortest.length; i++) {\r\n        const item = shortest[i];\r\n        let every = true; // don't use ordered.every ... it is slow\r\n        for(let j=1;j<ordered.length;j++) {\r\n            if(ordered[j].includes(item)) continue;\r\n            every = false;\r\n            break;\r\n        }\r\n        // ignore if not in every other array, or if already captured\r\n        if(!every || set.has(item)) continue;\r\n        // otherwise, add to bookeeping set and the result\r\n        set.add(item);\r\n        result[result.length] = item;\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function extract(map, keys) {\r\n    const r = [];\r\n    keys.forEach((key) => {\r\n        if (map.has(key)) {\r\n            r.push(map.get(key));\r\n        }\r\n    });    \r\n    return r;\r\n}","import * as mem from '../common';\r\n\r\nclass BinaryArray {\r\n    constructor (comparer) {\r\n        this.arr = [];\r\n        this.comparer = comparer || mem.defaultComparer;\r\n    }\r\n    \r\n    clear() {\r\n        this.arr = [];\r\n    }\r\n\r\n    get keys() {\r\n        return this.arr.map(m => m.key);\r\n    }\r\n\r\n    indexOf(key) {\r\n        let i = this.insertPos(key);\r\n        if (this.arr[i] && mem.eq(this.comparer, this.arr[i].key, key)) {\r\n            return i;\r\n        } else {\r\n            return -1;\r\n        }\r\n    }\r\n\r\n    insertPos(key) {\r\n        let low = 0, high = this.arr.length, mid;\r\n        while (low < high) {\r\n            // faster version of Math.floor((low + high) / 2)\r\n            mid = (low + high) >>> 1; \r\n            mem.lt(this.comparer, this.arr[mid].key, key) ? low = mid + 1 : high = mid\r\n        }\r\n        return low;\r\n    }\r\n\r\n    get(key) {\r\n        const i = this.indexOf(key);\r\n        if (i > -1) {\r\n            return this.arr[i].value;\r\n        }\r\n    }\r\n\r\n    remove(key) {\r\n        const i = this.indexOf(key);\r\n        if (i > -1) {\r\n            this.removeAt(i);\r\n        }\r\n    }\r\n\r\n    add(key, value) {\r\n        const ix = this.insertPos(key);\r\n        let item = { key: key, value: value };\r\n        this.addAt(ix, key, value);\r\n    }\r\n\r\n    addAt(pos, key, value) {\r\n        let item = { key: key, value: value };\r\n        this.arr.splice(pos, 0, item);\r\n    }\r\n\r\n    removeAt(pos) {\r\n        this.arr.splice(pos, 1);\r\n    }\r\n\r\n    getAt(pos) {\r\n        return this.arr[pos];\r\n    }\r\n\r\n    update(item) {\r\n        this.indexOf(item.key);\r\n        if (i !== undefined) {\r\n            this.arr[i].value = item;\r\n        }\r\n    }\r\n}\r\n\r\nexport default BinaryArray;"],"names":["mem.defaultComparer","mem.eq","let","mem.lt"],"mappings":";;;;;;;;;;;;;;;IAYO,SAAS,EAAE,CAAC,QAAQ,EAAE,CAAC,EAAE,CAAC,EAAE;QAC/B,OAAO,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;KAChC;;AAMD,IAAO,SAAS,EAAE,CAAC,QAAQ,EAAE,CAAC,EAAE,CAAC,EAAE;QAC/B,OAAO,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC;KAC/B;;AAED,IAAO,SAAS,eAAe,CAAC,CAAC,EAAE,CAAC,EAAE;QAClC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;KACrC;;ICxBD,IAAM,WAAW,GACb,oBAAW,EAAE,QAAQ,EAAE;QACnB,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC;QAClB,IAAQ,CAAC,QAAQ,GAAG,QAAQ,IAAIA,eAAmB,CAAC;IACxD;;8DAAK;;IAEL,sBAAI,0BAAQ;QACJ,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC;IAClB,EAAC;;IAEL,mBAAQ,uBAAO;QACP,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,WAAC,GAAE,SAAG,CAAC,CAAC,MAAG,CAAC,CAAC;IACpC,EAAC;;IAEL,sBAAI,4BAAQ,GAAG,EAAE;QACb,IAAQ,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;QAChC,IAAQ,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,IAAIC,EAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE;YAChE,OAAW,CAAC,CAAC;SACZ,MAAM;YACP,OAAW,CAAC,CAAC,CAAC;SACb;IACL,EAAC;;IAEL,sBAAI,gCAAU,GAAG,EAAE;QACXC,IAAI,GAAG,GAAG,CAAC,EAAE,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC;QACzC,OAAO,GAAG,GAAG,IAAI,EAAE;;YAEnB,GAAO,GAAG,CAAC,GAAG,GAAG,IAAI,MAAM,CAAC,CAAC;YACzBC,EAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,IAAI,GAAG,IAAG;SAC7E;QACL,OAAW,GAAG,CAAC;IACf,EAAC;;IAEL,sBAAI,oBAAI,GAAG,EAAE;QACT,IAAU,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QAC5B,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE;YACZ,OAAW,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;SAC5B;IACL,EAAC;;IAEL,sBAAI,0BAAO,GAAG,EAAE;QACZ,IAAU,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QAC5B,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE;YACR,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;SACpB;IACL,EAAC;;IAEL,sBAAI,oBAAI,GAAG,EAAE,KAAK,EAAE;QAChB,IAAU,EAAE,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;QAEnC,IAAQ,CAAC,KAAK,CAAC,EAAE,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;IAC/B,EAAC;;IAEL,sBAAI,wBAAM,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE;QACnBD,IAAI,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC;QACtC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;IAClC,EAAC;;IAEL,sBAAI,8BAAS,GAAG,EAAE;QACd,IAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;IAC5B,EAAC;;IAEL,sBAAI,wBAAM,GAAG,EAAE;QACP,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IACzB,EAAC;;IAEL,sBAAI,0BAAO,IAAI,EAAE;QACb,IAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACvB,IAAI,CAAC,KAAK,SAAS,EAAE;YACrB,IAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC;SAC5B;IACL,CAAC;;yEACJ;;;;;;;;"}