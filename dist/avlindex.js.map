{"version":3,"file":"avlindex.js","sources":["../src/common.js","../node_modules/avl/src/utils.js","../node_modules/avl/src/index.js","../src/indexes/avlindex.js"],"sourcesContent":["export function oneOrMany(items) {\r\n    if (!items) {\r\n        return [];\r\n    } else if (items instanceof Map) {\r\n        return Array.from(items.values());\r\n    } else if (!Array.isArray(items)) {\r\n        return [items];\r\n    } else {\r\n        return items;\r\n    }\r\n}\r\n\r\nexport function lt(comparer, a, b) {\r\n    return comparer(a, b) === -1;\r\n}\r\n\r\nexport function gt(comparer, a, b) {\r\n    return comparer(a, b) === 1;\r\n}\r\n\r\nexport function eq(comparer, a, b) {\r\n    return comparer(a, b) === 0;\r\n}\r\n\r\nexport function defaultComparer(a, b) {\r\n    return a > b ? 1 : a < b ? -1 : 0;\r\n}\r\n\r\nexport function keyWrapComparer(comparer) {\r\n    return function(a, b) {\r\n        return comparer(a.key, b.key);\r\n    };\r\n}\r\n\r\nexport function intersect(arrays) {\r\n    const ordered = (arrays.length===1\r\n        ? arrays : \r\n        arrays.sort((a1,a2) => a1.length - a2.length));\r\n    const shortest = ordered[0],\r\n        set = new Set(), \r\n        result = [];\r\n\r\n    for (let i=0; i < shortest.length; i++) {\r\n        const item = shortest[i];\r\n        let every = true; // don't use ordered.every ... it is slow\r\n        for(let j=1;j<ordered.length;j++) {\r\n            if(ordered[j].includes(item)) continue;\r\n            every = false;\r\n            break;\r\n        }\r\n        // ignore if not in every other array, or if already captured\r\n        if(!every || set.has(item)) continue;\r\n        // otherwise, add to bookeeping set and the result\r\n        set.add(item);\r\n        result[result.length] = item;\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function extract(map, keys) {\r\n    const r = [];\r\n    keys.forEach((key) => {\r\n        if (map.has(key)) {\r\n            r.push(map.get(key));\r\n        }\r\n    });    \r\n    return r;\r\n}","\n/**\n * Prints tree horizontally\n * @param  {Node}                       root\n * @param  {Function(node:Node):String} [printNode]\n * @return {String}\n */\nexport function print (root, printNode = (n) => n.key) {\n  var out = [];\n  row(root, '', true, (v) => out.push(v), printNode);\n  return out.join('');\n}\n\n/**\n * Prints level of the tree\n * @param  {Node}                        root\n * @param  {String}                      prefix\n * @param  {Boolean}                     isTail\n * @param  {Function(in:string):void}    out\n * @param  {Function(node:Node):String}  printNode\n */\nfunction row (root, prefix, isTail, out, printNode) {\n  if (root) {\n    out(`${ prefix }${ isTail ? '└── ' : '├── ' }${ printNode(root) }\\n`);\n    const indent = prefix + (isTail ? '    ' : '│   ');\n    if (root.left)  row(root.left,  indent, false, out, printNode);\n    if (root.right) row(root.right, indent, true,  out, printNode);\n  }\n}\n\n\n/**\n * Is the tree balanced (none of the subtrees differ in height by more than 1)\n * @param  {Node}    root\n * @return {Boolean}\n */\nexport function isBalanced(root) {\n  if (root === null) return true; // If node is empty then return true\n\n  // Get the height of left and right sub trees\n  var lh = height(root.left);\n  var rh = height(root.right);\n\n  if (Math.abs(lh - rh) <= 1 &&\n      isBalanced(root.left)  &&\n      isBalanced(root.right)) return true;\n\n  // If we reach here then tree is not height-balanced\n  return false;\n}\n\n/**\n * The function Compute the 'height' of a tree.\n * Height is the number of nodes along the longest path\n * from the root node down to the farthest leaf node.\n *\n * @param  {Node} node\n * @return {Number}\n */\nfunction height(node) {\n  return node ? (1 + Math.max(height(node.left), height(node.right))) : 0;\n}\n\n\nexport function loadRecursive (parent, keys, values, start, end) {\n  const size = end - start;\n  if (size > 0) {\n    const middle = start + Math.floor(size / 2);\n    const key    = keys[middle];\n    const data   = values[middle];\n    const node   = { key, data, parent };\n    node.left    = loadRecursive(node, keys, values, start, middle);\n    node.right   = loadRecursive(node, keys, values, middle + 1, end);\n    return node;\n  }\n  return null;\n}\n\n\nexport function markBalance(node) {\n  if (node === null) return 0;\n  const lh = markBalance(node.left);\n  const rh = markBalance(node.right);\n\n  node.balanceFactor = lh - rh;\n  return Math.max(lh, rh) + 1;\n}\n\n\nexport function sort(keys, values, left, right, compare) {\n  if (left >= right) return;\n\n  // eslint-disable-next-line no-bitwise\n  const pivot = keys[(left + right) >> 1];\n  let i = left - 1;\n  let j = right + 1;\n\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    do i++; while (compare(keys[i], pivot) < 0);\n    do j--; while (compare(keys[j], pivot) > 0);\n    if (i >= j) break;\n\n    let tmp = keys[i];\n    keys[i] = keys[j];\n    keys[j] = tmp;\n\n    tmp = values[i];\n    values[i] = values[j];\n    values[j] = tmp;\n  }\n\n  sort(keys, values,  left,     j, compare);\n  sort(keys, values, j + 1, right, compare);\n}\n","import { print, isBalanced, loadRecursive, markBalance, sort } from './utils';\n\n\n// function createNode (parent, left, right, height, key, data) {\n//   return { parent, left, right, balanceFactor: height, key, data };\n// }\n\n/**\n * @typedef {{\n *   parent:        ?Node,\n *   left:          ?Node,\n *   right:         ?Node,\n *   balanceFactor: number,\n *   key:           Key,\n *   data:          Value\n * }} Node\n */\n\n/**\n * @typedef {*} Key\n */\n\n/**\n * @typedef {*} Value\n */\n\n/**\n * Default comparison function\n * @param {Key} a\n * @param {Key} b\n * @returns {number}\n */\nfunction DEFAULT_COMPARE (a, b) { return a > b ? 1 : a < b ? -1 : 0; }\n\n\n/**\n * Single left rotation\n * @param  {Node} node\n * @return {Node}\n */\nfunction rotateLeft (node) {\n  var rightNode = node.right;\n  node.right    = rightNode.left;\n\n  if (rightNode.left) rightNode.left.parent = node;\n\n  rightNode.parent = node.parent;\n  if (rightNode.parent) {\n    if (rightNode.parent.left === node) {\n      rightNode.parent.left = rightNode;\n    } else {\n      rightNode.parent.right = rightNode;\n    }\n  }\n\n  node.parent    = rightNode;\n  rightNode.left = node;\n\n  node.balanceFactor += 1;\n  if (rightNode.balanceFactor < 0) {\n    node.balanceFactor -= rightNode.balanceFactor;\n  }\n\n  rightNode.balanceFactor += 1;\n  if (node.balanceFactor > 0) {\n    rightNode.balanceFactor += node.balanceFactor;\n  }\n  return rightNode;\n}\n\n\nfunction rotateRight (node) {\n  var leftNode = node.left;\n  node.left = leftNode.right;\n  if (node.left) node.left.parent = node;\n\n  leftNode.parent = node.parent;\n  if (leftNode.parent) {\n    if (leftNode.parent.left === node) {\n      leftNode.parent.left = leftNode;\n    } else {\n      leftNode.parent.right = leftNode;\n    }\n  }\n\n  node.parent    = leftNode;\n  leftNode.right = node;\n\n  node.balanceFactor -= 1;\n  if (leftNode.balanceFactor > 0) {\n    node.balanceFactor -= leftNode.balanceFactor;\n  }\n\n  leftNode.balanceFactor -= 1;\n  if (node.balanceFactor < 0) {\n    leftNode.balanceFactor += node.balanceFactor;\n  }\n\n  return leftNode;\n}\n\n\n// function leftBalance (node) {\n//   if (node.left.balanceFactor === -1) rotateLeft(node.left);\n//   return rotateRight(node);\n// }\n\n\n// function rightBalance (node) {\n//   if (node.right.balanceFactor === 1) rotateRight(node.right);\n//   return rotateLeft(node);\n// }\n\n\nexport default class AVLTree {\n  /**\n   * Callback for comparator\n   * @callback comparatorCallback\n   * @param {Key} a\n   * @param {Key} b\n   * @returns {number}\n   */\n\n  /**\n   * @class AVLTree\n   * @constructor\n   * @param  {comparatorCallback} [comparator]\n   * @param  {boolean}            [noDuplicates=false] Disallow duplicates\n   */\n  constructor (comparator, noDuplicates = false) {\n    this._comparator = comparator || DEFAULT_COMPARE;\n    this._root = null;\n    this._size = 0;\n    this._noDuplicates = !!noDuplicates;\n  }\n\n\n  /**\n   * Clear the tree\n   * @return {AVLTree}\n   */\n  destroy() {\n    return this.clear();\n  }\n\n\n  /**\n   * Clear the tree\n   * @return {AVLTree}\n   */\n  clear() {\n    this._root = null;\n    this._size = 0;\n    return this;\n  }\n\n  /**\n   * Number of nodes\n   * @return {number}\n   */\n  get size () {\n    return this._size;\n  }\n\n\n  /**\n   * Whether the tree contains a node with the given key\n   * @param  {Key} key\n   * @return {boolean} true/false\n   */\n  contains (key) {\n    if (this._root)  {\n      var node       = this._root;\n      var comparator = this._comparator;\n      while (node)  {\n        var cmp = comparator(key, node.key);\n        if      (cmp === 0) return true;\n        else if (cmp < 0)   node = node.left;\n        else                node = node.right;\n      }\n    }\n    return false;\n  }\n\n\n  /* eslint-disable class-methods-use-this */\n\n  /**\n   * Successor node\n   * @param  {Node} node\n   * @return {?Node}\n   */\n  next (node) {\n    var successor = node;\n    if (successor) {\n      if (successor.right) {\n        successor = successor.right;\n        while (successor.left) successor = successor.left;\n      } else {\n        successor = node.parent;\n        while (successor && successor.right === node) {\n          node = successor; successor = successor.parent;\n        }\n      }\n    }\n    return successor;\n  }\n\n\n  /**\n   * Predecessor node\n   * @param  {Node} node\n   * @return {?Node}\n   */\n  prev (node) {\n    var predecessor = node;\n    if (predecessor) {\n      if (predecessor.left) {\n        predecessor = predecessor.left;\n        while (predecessor.right) predecessor = predecessor.right;\n      } else {\n        predecessor = node.parent;\n        while (predecessor && predecessor.left === node) {\n          node = predecessor;\n          predecessor = predecessor.parent;\n        }\n      }\n    }\n    return predecessor;\n  }\n  /* eslint-enable class-methods-use-this */\n\n\n  /**\n   * Callback for forEach\n   * @callback forEachCallback\n   * @param {Node} node\n   * @param {number} index\n   */\n\n  /**\n   * @param  {forEachCallback} callback\n   * @return {AVLTree}\n   */\n  forEach(callback) {\n    var current = this._root;\n    var s = [], done = false, i = 0;\n\n    while (!done) {\n      // Reach the left most Node of the current Node\n      if (current) {\n        // Place pointer to a tree node on the stack\n        // before traversing the node's left subtree\n        s.push(current);\n        current = current.left;\n      } else {\n        // BackTrack from the empty subtree and visit the Node\n        // at the top of the stack; however, if the stack is\n        // empty you are done\n        if (s.length > 0) {\n          current = s.pop();\n          callback(current, i++);\n\n          // We have visited the node and its left\n          // subtree. Now, it's right subtree's turn\n          current = current.right;\n        } else done = true;\n      }\n    }\n    return this;\n  }\n\n\n  /**\n   * Walk key range from `low` to `high`. Stops if `fn` returns a value.\n   * @param  {Key}      low\n   * @param  {Key}      high\n   * @param  {Function} fn\n   * @param  {*?}       ctx\n   * @return {SplayTree}\n   */\n  range(low, high, fn, ctx) {\n    const Q = [];\n    const compare = this._comparator;\n    let node = this._root, cmp;\n\n    while (Q.length !== 0 || node) {\n      if (node) {\n        Q.push(node);\n        node = node.left;\n      } else {\n        node = Q.pop();\n        cmp = compare(node.key, high);\n        if (cmp > 0) {\n          break;\n        } else if (compare(node.key, low) >= 0) {\n          if (fn.call(ctx, node)) return this; // stop if smth is returned\n        }\n        node = node.right;\n      }\n    }\n    return this;\n  }\n\n\n  /**\n   * Returns all keys in order\n   * @return {Array<Key>}\n   */\n  keys () {\n    var current = this._root;\n    var s = [], r = [], done = false;\n\n    while (!done) {\n      if (current) {\n        s.push(current);\n        current = current.left;\n      } else {\n        if (s.length > 0) {\n          current = s.pop();\n          r.push(current.key);\n          current = current.right;\n        } else done = true;\n      }\n    }\n    return r;\n  }\n\n\n  /**\n   * Returns `data` fields of all nodes in order.\n   * @return {Array<Value>}\n   */\n  values () {\n    var current = this._root;\n    var s = [], r = [], done = false;\n\n    while (!done) {\n      if (current) {\n        s.push(current);\n        current = current.left;\n      } else {\n        if (s.length > 0) {\n          current = s.pop();\n          r.push(current.data);\n          current = current.right;\n        } else done = true;\n      }\n    }\n    return r;\n  }\n\n\n  /**\n   * Returns node at given index\n   * @param  {number} index\n   * @return {?Node}\n   */\n  at (index) {\n    // removed after a consideration, more misleading than useful\n    // index = index % this.size;\n    // if (index < 0) index = this.size - index;\n\n    var current = this._root;\n    var s = [], done = false, i = 0;\n\n    while (!done) {\n      if (current) {\n        s.push(current);\n        current = current.left;\n      } else {\n        if (s.length > 0) {\n          current = s.pop();\n          if (i === index) return current;\n          i++;\n          current = current.right;\n        } else done = true;\n      }\n    }\n    return null;\n  }\n\n\n  /**\n   * Returns node with the minimum key\n   * @return {?Node}\n   */\n  minNode () {\n    var node = this._root;\n    if (!node) return null;\n    while (node.left) node = node.left;\n    return node;\n  }\n\n\n  /**\n   * Returns node with the max key\n   * @return {?Node}\n   */\n  maxNode () {\n    var node = this._root;\n    if (!node) return null;\n    while (node.right) node = node.right;\n    return node;\n  }\n\n\n  /**\n   * Min key\n   * @return {?Key}\n   */\n  min () {\n    var node = this._root;\n    if (!node) return null;\n    while (node.left) node = node.left;\n    return node.key;\n  }\n\n\n  /**\n   * Max key\n   * @return {?Key}\n   */\n  max () {\n    var node = this._root;\n    if (!node) return null;\n    while (node.right) node = node.right;\n    return node.key;\n  }\n\n\n  /**\n   * @return {boolean} true/false\n   */\n  isEmpty() {\n    return !this._root;\n  }\n\n\n  /**\n   * Removes and returns the node with smallest key\n   * @return {?Node}\n   */\n  pop () {\n    var node = this._root, returnValue = null;\n    if (node) {\n      while (node.left) node = node.left;\n      returnValue = { key: node.key, data: node.data };\n      this.remove(node.key);\n    }\n    return returnValue;\n  }\n\n\n  /**\n   * Find node by key\n   * @param  {Key} key\n   * @return {?Node}\n   */\n  find (key) {\n    var root = this._root;\n    // if (root === null)    return null;\n    // if (key === root.key) return root;\n\n    var subtree = root, cmp;\n    var compare = this._comparator;\n    while (subtree) {\n      cmp = compare(key, subtree.key);\n      if      (cmp === 0) return subtree;\n      else if (cmp < 0)   subtree = subtree.left;\n      else                subtree = subtree.right;\n    }\n\n    return null;\n  }\n\n\n  /**\n   * Insert a node into the tree\n   * @param  {Key} key\n   * @param  {Value} [data]\n   * @return {?Node}\n   */\n  insert (key, data) {\n    if (!this._root) {\n      this._root = {\n        parent: null, left: null, right: null, balanceFactor: 0,\n        key, data\n      };\n      this._size++;\n      return this._root;\n    }\n\n    var compare = this._comparator;\n    var node    = this._root;\n    var parent  = null;\n    var cmp     = 0;\n\n    if (this._noDuplicates) {\n      while (node) {\n        cmp = compare(key, node.key);\n        parent = node;\n        if      (cmp === 0) return null;\n        else if (cmp < 0)   node = node.left;\n        else                node = node.right;\n      }\n    } else {\n      while (node) {\n        cmp = compare(key, node.key);\n        parent = node;\n        if      (cmp <= 0)  node = node.left; //return null;\n        else                node = node.right;\n      }\n    }\n\n    var newNode = {\n      left: null,\n      right: null,\n      balanceFactor: 0,\n      parent, key, data\n    };\n    var newRoot;\n    if (cmp <= 0) parent.left  = newNode;\n    else         parent.right = newNode;\n\n    while (parent) {\n      cmp = compare(parent.key, key);\n      if (cmp < 0) parent.balanceFactor -= 1;\n      else         parent.balanceFactor += 1;\n\n      if        (parent.balanceFactor === 0) break;\n      else if   (parent.balanceFactor < -1) {\n        // inlined\n        //var newRoot = rightBalance(parent);\n        if (parent.right.balanceFactor === 1) rotateRight(parent.right);\n        newRoot = rotateLeft(parent);\n\n        if (parent === this._root) this._root = newRoot;\n        break;\n      } else if (parent.balanceFactor > 1) {\n        // inlined\n        // var newRoot = leftBalance(parent);\n        if (parent.left.balanceFactor === -1) rotateLeft(parent.left);\n        newRoot = rotateRight(parent);\n\n        if (parent === this._root) this._root = newRoot;\n        break;\n      }\n      parent = parent.parent;\n    }\n\n    this._size++;\n    return newNode;\n  }\n\n\n  /**\n   * Removes the node from the tree. If not found, returns null.\n   * @param  {Key} key\n   * @return {?Node}\n   */\n  remove (key) {\n    if (!this._root) return null;\n\n    var node = this._root;\n    var compare = this._comparator;\n    var cmp = 0;\n\n    while (node) {\n      cmp = compare(key, node.key);\n      if      (cmp === 0) break;\n      else if (cmp < 0)   node = node.left;\n      else                node = node.right;\n    }\n    if (!node) return null;\n\n    var returnValue = node.key;\n    var max, min;\n\n    if (node.left) {\n      max = node.left;\n\n      while (max.left || max.right) {\n        while (max.right) max = max.right;\n\n        node.key = max.key;\n        node.data = max.data;\n        if (max.left) {\n          node = max;\n          max = max.left;\n        }\n      }\n\n      node.key  = max.key;\n      node.data = max.data;\n      node = max;\n    }\n\n    if (node.right) {\n      min = node.right;\n\n      while (min.left || min.right) {\n        while (min.left) min = min.left;\n\n        node.key  = min.key;\n        node.data = min.data;\n        if (min.right) {\n          node = min;\n          min = min.right;\n        }\n      }\n\n      node.key  = min.key;\n      node.data = min.data;\n      node = min;\n    }\n\n    var parent = node.parent;\n    var pp     = node;\n    var newRoot;\n\n    while (parent) {\n      if (parent.left === pp) parent.balanceFactor -= 1;\n      else                    parent.balanceFactor += 1;\n\n      if        (parent.balanceFactor < -1) {\n        // inlined\n        //var newRoot = rightBalance(parent);\n        if (parent.right.balanceFactor === 1) rotateRight(parent.right);\n        newRoot = rotateLeft(parent);\n\n        if (parent === this._root) this._root = newRoot;\n        parent = newRoot;\n      } else if (parent.balanceFactor > 1) {\n        // inlined\n        // var newRoot = leftBalance(parent);\n        if (parent.left.balanceFactor === -1) rotateLeft(parent.left);\n        newRoot = rotateRight(parent);\n\n        if (parent === this._root) this._root = newRoot;\n        parent = newRoot;\n      }\n\n      if (parent.balanceFactor === -1 || parent.balanceFactor === 1) break;\n\n      pp     = parent;\n      parent = parent.parent;\n    }\n\n    if (node.parent) {\n      if (node.parent.left === node) node.parent.left  = null;\n      else                           node.parent.right = null;\n    }\n\n    if (node === this._root) this._root = null;\n\n    this._size--;\n    return returnValue;\n  }\n\n\n  /**\n   * Bulk-load items\n   * @param  {Array<Key>}  keys\n   * @param  {Array<Value>}  [values]\n   * @return {AVLTree}\n   */\n  load(keys = [], values = [], presort) {\n    if (this._size !== 0) throw new Error('bulk-load: tree is not empty');\n    const size = keys.length;\n    if (presort) sort(keys, values, 0, size - 1, this._comparator);\n    this._root = loadRecursive(null, keys, values, 0, size);\n    markBalance(this._root);\n    this._size = size;\n    return this;\n  }\n\n\n  /**\n   * Returns true if the tree is balanced\n   * @return {boolean}\n   */\n  isBalanced() {\n    return isBalanced(this._root);\n  }\n\n\n  /**\n   * String representation of the tree - primitive horizontal print-out\n   * @param  {Function(Node):string} [printNode]\n   * @return {string}\n   */\n  toString (printNode) {\n    return print(this._root, printNode);\n  }\n}\n\nAVLTree.default = AVLTree;\n","import * as mem from '../common';\r\nimport AVLTree from 'avl';\r\n\r\nclass AVLIndex {\r\n    constructor (name, itemFn, keyFn, comparer) {\r\n        this.comparer = comparer || mem.defaultComparer;\r\n        this.index = new AVLTree(comparer);\r\n        this.name = name;\r\n        this.itemFn = itemFn;\r\n        this.keyFn = keyFn;\r\n    }\r\n    \r\n    static build(name, itemFn, keyFn, items, comparer) {\r\n        let bin = new AVLIndex(name, itemFn, keyFn, comparer);\r\n        bin.populate(items);\r\n        return bin;\r\n    }\r\n\r\n    get keys() {\r\n        return this.index.keys();\r\n    }\r\n\r\n    clear() {\r\n        this.index.clear();\r\n    }\r\n\r\n    findMany(keys) {\r\n        keys = mem.oneOrMany(keys);\r\n        let data = keys.map(m => this.find(m));\r\n        return [].concat.apply([], data);\r\n    }\r\n\r\n    find(key) {\r\n        let found = this.index.find(key);\r\n        if (found) {\r\n            return found.data;\r\n        } else {\r\n            return [];\r\n        }\r\n    }\r\n\r\n    remove(item) {\r\n        const key = this.keyFn(item);\r\n        const entry = this.index.find(key);\r\n\r\n        if (entry) {\r\n            const it = this.itemFn(item);\r\n            const arr = entry.data;\r\n            const i = arr.indexOf(it);\r\n            if (i > -1) {\r\n                arr.splice(i, 1);\r\n            }\r\n            if (arr.length === 0) {\r\n                this.index.remove(key);\r\n            }\r\n        }\r\n    }\r\n\r\n    populate(items) {\r\n        items = mem.oneOrMany(items);\r\n        items.forEach(item => this.insert(item));\r\n    }\r\n    \r\n    insert(item) {\r\n        const key = this.keyFn(item);\r\n        const it = this.itemFn(item);\r\n        const entry = this.index.find(key);\r\n        \r\n        if (entry) {\r\n            entry.data.push(it);\r\n        } else {\r\n            this.index.insert(key, [it]);\r\n        }\r\n    }\r\n\r\n    update(item, olditem) {\r\n        this.remove(olditem);\r\n        this.insert(item);\r\n    }\r\n}\r\n\r\nexport default AVLIndex;"],"names":["mem.defaultComparer","mem.oneOrMany"],"mappings":";;;;;;;;;;;;;;;IAAO,SAAS,SAAS,CAAC,KAAK,EAAE;IACjC,IAAI,IAAI,CAAC,KAAK,EAAE;IAChB,QAAQ,OAAO,EAAE,CAAC;IAClB,KAAK,MAAM,IAAI,KAAK,YAAY,GAAG,EAAE;IACrC,QAAQ,OAAO,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC;IAC1C,KAAK,MAAM,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;IACtC,QAAQ,OAAO,CAAC,KAAK,CAAC,CAAC;IACvB,KAAK,MAAM;IACX,QAAQ,OAAO,KAAK,CAAC;IACrB,KAAK;IACL,CAAC;AACD,AAYA;AACA,IAAO,SAAS,eAAe,CAAC,CAAC,EAAE,CAAC,EAAE;IACtC,IAAI,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;IACtC,CAAC;;ICzBD;IACA;IACA;IACA;IACA;IACA;AACA,IAAO,SAAS,KAAK,EAAE,IAAI,EAAE,SAAS,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE;IACvD,EAAE,IAAI,GAAG,GAAG,EAAE,CAAC;IACf,EAAE,GAAG,CAAC,IAAI,EAAE,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC,KAAK,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC;IACrD,EAAE,OAAO,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IACtB,CAAC;;IAED;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,SAAS,GAAG,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,EAAE,SAAS,EAAE;IACpD,EAAE,IAAI,IAAI,EAAE;IACZ,IAAI,GAAG,CAAC,CAAC,GAAG,MAAM,EAAE,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,EAAE,GAAG,SAAS,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;IAC1E,IAAI,MAAM,MAAM,GAAG,MAAM,IAAI,MAAM,GAAG,MAAM,GAAG,MAAM,CAAC,CAAC;IACvD,IAAI,IAAI,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC,IAAI,GAAG,MAAM,EAAE,KAAK,EAAE,GAAG,EAAE,SAAS,CAAC,CAAC;IACnE,IAAI,IAAI,IAAI,CAAC,KAAK,EAAE,GAAG,CAAC,IAAI,CAAC,KAAK,EAAE,MAAM,EAAE,IAAI,GAAG,GAAG,EAAE,SAAS,CAAC,CAAC;IACnE,GAAG;IACH,CAAC;;;IAGD;IACA;IACA;IACA;IACA;AACA,IAAO,SAAS,UAAU,CAAC,IAAI,EAAE;IACjC,EAAE,IAAI,IAAI,KAAK,IAAI,EAAE,OAAO,IAAI,CAAC;;IAEjC;IACA,EAAE,IAAI,EAAE,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC7B,EAAE,IAAI,EAAE,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;;IAE9B,EAAE,IAAI,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC;IAC5B,MAAM,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC;IAC3B,MAAM,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,OAAO,IAAI,CAAC;;IAE1C;IACA,EAAE,OAAO,KAAK,CAAC;IACf,CAAC;;IAED;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,SAAS,MAAM,CAAC,IAAI,EAAE;IACtB,EAAE,OAAO,IAAI,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC;IAC1E,CAAC;;;AAGD,IAAO,SAAS,aAAa,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,GAAG,EAAE;IACjE,EAAE,MAAM,IAAI,GAAG,GAAG,GAAG,KAAK,CAAC;IAC3B,EAAE,IAAI,IAAI,GAAG,CAAC,EAAE;IAChB,IAAI,MAAM,MAAM,GAAG,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC;IAChD,IAAI,MAAM,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,CAAC;IAChC,IAAI,MAAM,IAAI,KAAK,MAAM,CAAC,MAAM,CAAC,CAAC;IAClC,IAAI,MAAM,IAAI,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;IACzC,IAAI,IAAI,CAAC,IAAI,MAAM,aAAa,CAAC,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;IACpE,IAAI,IAAI,CAAC,KAAK,KAAK,aAAa,CAAC,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC;IACtE,IAAI,OAAO,IAAI,CAAC;IAChB,GAAG;IACH,EAAE,OAAO,IAAI,CAAC;IACd,CAAC;;;AAGD,IAAO,SAAS,WAAW,CAAC,IAAI,EAAE;IAClC,EAAE,IAAI,IAAI,KAAK,IAAI,EAAE,OAAO,CAAC,CAAC;IAC9B,EAAE,MAAM,EAAE,GAAG,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACpC,EAAE,MAAM,EAAE,GAAG,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;;IAErC,EAAE,IAAI,CAAC,aAAa,GAAG,EAAE,GAAG,EAAE,CAAC;IAC/B,EAAE,OAAO,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC;IAC9B,CAAC;;;AAGD,IAAO,SAAS,IAAI,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE;IACzD,EAAE,IAAI,IAAI,IAAI,KAAK,EAAE,OAAO;;IAE5B;IACA,EAAE,MAAM,KAAK,GAAG,IAAI,CAAC,CAAC,IAAI,GAAG,KAAK,KAAK,CAAC,CAAC,CAAC;IAC1C,EAAE,IAAI,CAAC,GAAG,IAAI,GAAG,CAAC,CAAC;IACnB,EAAE,IAAI,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC;;IAEpB;IACA,EAAE,OAAO,IAAI,EAAE;IACf,IAAI,GAAG,CAAC,EAAE,CAAC,QAAQ,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,GAAG,CAAC,EAAE;IAChD,IAAI,GAAG,CAAC,EAAE,CAAC,QAAQ,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,GAAG,CAAC,EAAE;IAChD,IAAI,IAAI,CAAC,IAAI,CAAC,EAAE,MAAM;;IAEtB,IAAI,IAAI,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;IACtB,IAAI,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;IACtB,IAAI,IAAI,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;;IAElB,IAAI,GAAG,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IACpB,IAAI,MAAM,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IAC1B,IAAI,MAAM,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;IACpB,GAAG;;IAEH,EAAE,IAAI,CAAC,IAAI,EAAE,MAAM,GAAG,IAAI,MAAM,CAAC,EAAE,OAAO,CAAC,CAAC;IAC5C,EAAE,IAAI,CAAC,IAAI,EAAE,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;IAC5C,CAAC;;IC/GD;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;;IAEA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA,SAAS,eAAe,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE;;;IAGtE;IACA;IACA;IACA;IACA;IACA,SAAS,UAAU,EAAE,IAAI,EAAE;IAC3B,EAAE,IAAI,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC;IAC7B,EAAE,IAAI,CAAC,KAAK,MAAM,SAAS,CAAC,IAAI,CAAC;;IAEjC,EAAE,IAAI,SAAS,CAAC,IAAI,EAAE,SAAS,CAAC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;;IAEnD,EAAE,SAAS,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;IACjC,EAAE,IAAI,SAAS,CAAC,MAAM,EAAE;IACxB,IAAI,IAAI,SAAS,CAAC,MAAM,CAAC,IAAI,KAAK,IAAI,EAAE;IACxC,MAAM,SAAS,CAAC,MAAM,CAAC,IAAI,GAAG,SAAS,CAAC;IACxC,KAAK,MAAM;IACX,MAAM,SAAS,CAAC,MAAM,CAAC,KAAK,GAAG,SAAS,CAAC;IACzC,KAAK;IACL,GAAG;;IAEH,EAAE,IAAI,CAAC,MAAM,MAAM,SAAS,CAAC;IAC7B,EAAE,SAAS,CAAC,IAAI,GAAG,IAAI,CAAC;;IAExB,EAAE,IAAI,CAAC,aAAa,IAAI,CAAC,CAAC;IAC1B,EAAE,IAAI,SAAS,CAAC,aAAa,GAAG,CAAC,EAAE;IACnC,IAAI,IAAI,CAAC,aAAa,IAAI,SAAS,CAAC,aAAa,CAAC;IAClD,GAAG;;IAEH,EAAE,SAAS,CAAC,aAAa,IAAI,CAAC,CAAC;IAC/B,EAAE,IAAI,IAAI,CAAC,aAAa,GAAG,CAAC,EAAE;IAC9B,IAAI,SAAS,CAAC,aAAa,IAAI,IAAI,CAAC,aAAa,CAAC;IAClD,GAAG;IACH,EAAE,OAAO,SAAS,CAAC;IACnB,CAAC;;;IAGD,SAAS,WAAW,EAAE,IAAI,EAAE;IAC5B,EAAE,IAAI,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC;IAC3B,EAAE,IAAI,CAAC,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC;IAC7B,EAAE,IAAI,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;;IAEzC,EAAE,QAAQ,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;IAChC,EAAE,IAAI,QAAQ,CAAC,MAAM,EAAE;IACvB,IAAI,IAAI,QAAQ,CAAC,MAAM,CAAC,IAAI,KAAK,IAAI,EAAE;IACvC,MAAM,QAAQ,CAAC,MAAM,CAAC,IAAI,GAAG,QAAQ,CAAC;IACtC,KAAK,MAAM;IACX,MAAM,QAAQ,CAAC,MAAM,CAAC,KAAK,GAAG,QAAQ,CAAC;IACvC,KAAK;IACL,GAAG;;IAEH,EAAE,IAAI,CAAC,MAAM,MAAM,QAAQ,CAAC;IAC5B,EAAE,QAAQ,CAAC,KAAK,GAAG,IAAI,CAAC;;IAExB,EAAE,IAAI,CAAC,aAAa,IAAI,CAAC,CAAC;IAC1B,EAAE,IAAI,QAAQ,CAAC,aAAa,GAAG,CAAC,EAAE;IAClC,IAAI,IAAI,CAAC,aAAa,IAAI,QAAQ,CAAC,aAAa,CAAC;IACjD,GAAG;;IAEH,EAAE,QAAQ,CAAC,aAAa,IAAI,CAAC,CAAC;IAC9B,EAAE,IAAI,IAAI,CAAC,aAAa,GAAG,CAAC,EAAE;IAC9B,IAAI,QAAQ,CAAC,aAAa,IAAI,IAAI,CAAC,aAAa,CAAC;IACjD,GAAG;;IAEH,EAAE,OAAO,QAAQ,CAAC;IAClB,CAAC;;;IAGD;IACA;IACA;IACA;;;IAGA;IACA;IACA;IACA;;;AAGA,IAAe,MAAM,OAAO,CAAC;IAC7B;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA,EAAE,WAAW,CAAC,CAAC,UAAU,EAAE,YAAY,GAAG,KAAK,EAAE;IACjD,IAAI,IAAI,CAAC,WAAW,GAAG,UAAU,IAAI,eAAe,CAAC;IACrD,IAAI,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;IACtB,IAAI,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;IACnB,IAAI,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC,YAAY,CAAC;IACxC,GAAG;;;IAGH;IACA;IACA;IACA;IACA,EAAE,OAAO,GAAG;IACZ,IAAI,OAAO,IAAI,CAAC,KAAK,EAAE,CAAC;IACxB,GAAG;;;IAGH;IACA;IACA;IACA;IACA,EAAE,KAAK,GAAG;IACV,IAAI,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;IACtB,IAAI,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;IACnB,IAAI,OAAO,IAAI,CAAC;IAChB,GAAG;;IAEH;IACA;IACA;IACA;IACA,EAAE,IAAI,IAAI,CAAC,GAAG;IACd,IAAI,OAAO,IAAI,CAAC,KAAK,CAAC;IACtB,GAAG;;;IAGH;IACA;IACA;IACA;IACA;IACA,EAAE,QAAQ,CAAC,CAAC,GAAG,EAAE;IACjB,IAAI,IAAI,IAAI,CAAC,KAAK,GAAG;IACrB,MAAM,IAAI,IAAI,SAAS,IAAI,CAAC,KAAK,CAAC;IAClC,MAAM,IAAI,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC;IACxC,MAAM,OAAO,IAAI,GAAG;IACpB,QAAQ,IAAI,GAAG,GAAG,UAAU,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;IAC5C,QAAQ,SAAS,GAAG,KAAK,CAAC,EAAE,OAAO,IAAI,CAAC;IACxC,aAAa,IAAI,GAAG,GAAG,CAAC,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;IAC7C,4BAA4B,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;IAC9C,OAAO;IACP,KAAK;IACL,IAAI,OAAO,KAAK,CAAC;IACjB,GAAG;;;IAGH;;IAEA;IACA;IACA;IACA;IACA;IACA,EAAE,IAAI,CAAC,CAAC,IAAI,EAAE;IACd,IAAI,IAAI,SAAS,GAAG,IAAI,CAAC;IACzB,IAAI,IAAI,SAAS,EAAE;IACnB,MAAM,IAAI,SAAS,CAAC,KAAK,EAAE;IAC3B,QAAQ,SAAS,GAAG,SAAS,CAAC,KAAK,CAAC;IACpC,QAAQ,OAAO,SAAS,CAAC,IAAI,EAAE,SAAS,GAAG,SAAS,CAAC,IAAI,CAAC;IAC1D,OAAO,MAAM;IACb,QAAQ,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC;IAChC,QAAQ,OAAO,SAAS,IAAI,SAAS,CAAC,KAAK,KAAK,IAAI,EAAE;IACtD,UAAU,IAAI,GAAG,SAAS,CAAC,CAAC,SAAS,GAAG,SAAS,CAAC,MAAM,CAAC;IACzD,SAAS;IACT,OAAO;IACP,KAAK;IACL,IAAI,OAAO,SAAS,CAAC;IACrB,GAAG;;;IAGH;IACA;IACA;IACA;IACA;IACA,EAAE,IAAI,CAAC,CAAC,IAAI,EAAE;IACd,IAAI,IAAI,WAAW,GAAG,IAAI,CAAC;IAC3B,IAAI,IAAI,WAAW,EAAE;IACrB,MAAM,IAAI,WAAW,CAAC,IAAI,EAAE;IAC5B,QAAQ,WAAW,GAAG,WAAW,CAAC,IAAI,CAAC;IACvC,QAAQ,OAAO,WAAW,CAAC,KAAK,EAAE,WAAW,GAAG,WAAW,CAAC,KAAK,CAAC;IAClE,OAAO,MAAM;IACb,QAAQ,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC;IAClC,QAAQ,OAAO,WAAW,IAAI,WAAW,CAAC,IAAI,KAAK,IAAI,EAAE;IACzD,UAAU,IAAI,GAAG,WAAW,CAAC;IAC7B,UAAU,WAAW,GAAG,WAAW,CAAC,MAAM,CAAC;IAC3C,SAAS;IACT,OAAO;IACP,KAAK;IACL,IAAI,OAAO,WAAW,CAAC;IACvB,GAAG;IACH;;;IAGA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA,EAAE,OAAO,CAAC,QAAQ,EAAE;IACpB,IAAI,IAAI,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC;IAC7B,IAAI,IAAI,CAAC,GAAG,EAAE,EAAE,IAAI,GAAG,KAAK,EAAE,CAAC,GAAG,CAAC,CAAC;;IAEpC,IAAI,OAAO,CAAC,IAAI,EAAE;IAClB;IACA,MAAM,IAAI,OAAO,EAAE;IACnB;IACA;IACA,QAAQ,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACxB,QAAQ,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC;IAC/B,OAAO,MAAM;IACb;IACA;IACA;IACA,QAAQ,IAAI,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;IAC1B,UAAU,OAAO,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC;IAC5B,UAAU,QAAQ,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC;;IAEjC;IACA;IACA,UAAU,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC;IAClC,SAAS,MAAM,IAAI,GAAG,IAAI,CAAC;IAC3B,OAAO;IACP,KAAK;IACL,IAAI,OAAO,IAAI,CAAC;IAChB,GAAG;;;IAGH;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,EAAE,KAAK,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE,EAAE,GAAG,EAAE;IAC5B,IAAI,MAAM,CAAC,GAAG,EAAE,CAAC;IACjB,IAAI,MAAM,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC;IACrC,IAAI,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,EAAE,GAAG,CAAC;;IAE/B,IAAI,OAAO,CAAC,CAAC,MAAM,KAAK,CAAC,IAAI,IAAI,EAAE;IACnC,MAAM,IAAI,IAAI,EAAE;IAChB,QAAQ,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACrB,QAAQ,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;IACzB,OAAO,MAAM;IACb,QAAQ,IAAI,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC;IACvB,QAAQ,GAAG,GAAG,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;IACtC,QAAQ,IAAI,GAAG,GAAG,CAAC,EAAE;IACrB,UAAU,MAAM;IAChB,SAAS,MAAM,IAAI,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,IAAI,CAAC,EAAE;IAChD,UAAU,IAAI,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,EAAE,OAAO,IAAI,CAAC;IAC9C,SAAS;IACT,QAAQ,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;IAC1B,OAAO;IACP,KAAK;IACL,IAAI,OAAO,IAAI,CAAC;IAChB,GAAG;;;IAGH;IACA;IACA;IACA;IACA,EAAE,IAAI,CAAC,GAAG;IACV,IAAI,IAAI,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC;IAC7B,IAAI,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,IAAI,GAAG,KAAK,CAAC;;IAErC,IAAI,OAAO,CAAC,IAAI,EAAE;IAClB,MAAM,IAAI,OAAO,EAAE;IACnB,QAAQ,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACxB,QAAQ,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC;IAC/B,OAAO,MAAM;IACb,QAAQ,IAAI,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;IAC1B,UAAU,OAAO,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC;IAC5B,UAAU,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;IAC9B,UAAU,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC;IAClC,SAAS,MAAM,IAAI,GAAG,IAAI,CAAC;IAC3B,OAAO;IACP,KAAK;IACL,IAAI,OAAO,CAAC,CAAC;IACb,GAAG;;;IAGH;IACA;IACA;IACA;IACA,EAAE,MAAM,CAAC,GAAG;IACZ,IAAI,IAAI,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC;IAC7B,IAAI,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,IAAI,GAAG,KAAK,CAAC;;IAErC,IAAI,OAAO,CAAC,IAAI,EAAE;IAClB,MAAM,IAAI,OAAO,EAAE;IACnB,QAAQ,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACxB,QAAQ,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC;IAC/B,OAAO,MAAM;IACb,QAAQ,IAAI,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;IAC1B,UAAU,OAAO,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC;IAC5B,UAAU,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAC/B,UAAU,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC;IAClC,SAAS,MAAM,IAAI,GAAG,IAAI,CAAC;IAC3B,OAAO;IACP,KAAK;IACL,IAAI,OAAO,CAAC,CAAC;IACb,GAAG;;;IAGH;IACA;IACA;IACA;IACA;IACA,EAAE,EAAE,CAAC,CAAC,KAAK,EAAE;IACb;IACA;IACA;;IAEA,IAAI,IAAI,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC;IAC7B,IAAI,IAAI,CAAC,GAAG,EAAE,EAAE,IAAI,GAAG,KAAK,EAAE,CAAC,GAAG,CAAC,CAAC;;IAEpC,IAAI,OAAO,CAAC,IAAI,EAAE;IAClB,MAAM,IAAI,OAAO,EAAE;IACnB,QAAQ,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACxB,QAAQ,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC;IAC/B,OAAO,MAAM;IACb,QAAQ,IAAI,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;IAC1B,UAAU,OAAO,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC;IAC5B,UAAU,IAAI,CAAC,KAAK,KAAK,EAAE,OAAO,OAAO,CAAC;IAC1C,UAAU,CAAC,EAAE,CAAC;IACd,UAAU,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC;IAClC,SAAS,MAAM,IAAI,GAAG,IAAI,CAAC;IAC3B,OAAO;IACP,KAAK;IACL,IAAI,OAAO,IAAI,CAAC;IAChB,GAAG;;;IAGH;IACA;IACA;IACA;IACA,EAAE,OAAO,CAAC,GAAG;IACb,IAAI,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;IAC1B,IAAI,IAAI,CAAC,IAAI,EAAE,OAAO,IAAI,CAAC;IAC3B,IAAI,OAAO,IAAI,CAAC,IAAI,EAAE,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;IACvC,IAAI,OAAO,IAAI,CAAC;IAChB,GAAG;;;IAGH;IACA;IACA;IACA;IACA,EAAE,OAAO,CAAC,GAAG;IACb,IAAI,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;IAC1B,IAAI,IAAI,CAAC,IAAI,EAAE,OAAO,IAAI,CAAC;IAC3B,IAAI,OAAO,IAAI,CAAC,KAAK,EAAE,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;IACzC,IAAI,OAAO,IAAI,CAAC;IAChB,GAAG;;;IAGH;IACA;IACA;IACA;IACA,EAAE,GAAG,CAAC,GAAG;IACT,IAAI,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;IAC1B,IAAI,IAAI,CAAC,IAAI,EAAE,OAAO,IAAI,CAAC;IAC3B,IAAI,OAAO,IAAI,CAAC,IAAI,EAAE,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;IACvC,IAAI,OAAO,IAAI,CAAC,GAAG,CAAC;IACpB,GAAG;;;IAGH;IACA;IACA;IACA;IACA,EAAE,GAAG,CAAC,GAAG;IACT,IAAI,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;IAC1B,IAAI,IAAI,CAAC,IAAI,EAAE,OAAO,IAAI,CAAC;IAC3B,IAAI,OAAO,IAAI,CAAC,KAAK,EAAE,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;IACzC,IAAI,OAAO,IAAI,CAAC,GAAG,CAAC;IACpB,GAAG;;;IAGH;IACA;IACA;IACA,EAAE,OAAO,GAAG;IACZ,IAAI,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC;IACvB,GAAG;;;IAGH;IACA;IACA;IACA;IACA,EAAE,GAAG,CAAC,GAAG;IACT,IAAI,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,EAAE,WAAW,GAAG,IAAI,CAAC;IAC9C,IAAI,IAAI,IAAI,EAAE;IACd,MAAM,OAAO,IAAI,CAAC,IAAI,EAAE,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;IACzC,MAAM,WAAW,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,CAAC;IACvD,MAAM,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAC5B,KAAK;IACL,IAAI,OAAO,WAAW,CAAC;IACvB,GAAG;;;IAGH;IACA;IACA;IACA;IACA;IACA,EAAE,IAAI,CAAC,CAAC,GAAG,EAAE;IACb,IAAI,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;IAC1B;IACA;;IAEA,IAAI,IAAI,OAAO,GAAG,IAAI,EAAE,GAAG,CAAC;IAC5B,IAAI,IAAI,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC;IACnC,IAAI,OAAO,OAAO,EAAE;IACpB,MAAM,GAAG,GAAG,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC;IACtC,MAAM,SAAS,GAAG,KAAK,CAAC,EAAE,OAAO,OAAO,CAAC;IACzC,WAAW,IAAI,GAAG,GAAG,CAAC,IAAI,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC;IACjD,0BAA0B,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC;IAClD,KAAK;;IAEL,IAAI,OAAO,IAAI,CAAC;IAChB,GAAG;;;IAGH;IACA;IACA;IACA;IACA;IACA;IACA,EAAE,MAAM,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE;IACrB,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;IACrB,MAAM,IAAI,CAAC,KAAK,GAAG;IACnB,QAAQ,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,aAAa,EAAE,CAAC;IAC/D,QAAQ,GAAG,EAAE,IAAI;IACjB,OAAO,CAAC;IACR,MAAM,IAAI,CAAC,KAAK,EAAE,CAAC;IACnB,MAAM,OAAO,IAAI,CAAC,KAAK,CAAC;IACxB,KAAK;;IAEL,IAAI,IAAI,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC;IACnC,IAAI,IAAI,IAAI,MAAM,IAAI,CAAC,KAAK,CAAC;IAC7B,IAAI,IAAI,MAAM,IAAI,IAAI,CAAC;IACvB,IAAI,IAAI,GAAG,OAAO,CAAC,CAAC;;IAEpB,IAAI,IAAI,IAAI,CAAC,aAAa,EAAE;IAC5B,MAAM,OAAO,IAAI,EAAE;IACnB,QAAQ,GAAG,GAAG,OAAO,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;IACrC,QAAQ,MAAM,GAAG,IAAI,CAAC;IACtB,QAAQ,SAAS,GAAG,KAAK,CAAC,EAAE,OAAO,IAAI,CAAC;IACxC,aAAa,IAAI,GAAG,GAAG,CAAC,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;IAC7C,4BAA4B,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;IAC9C,OAAO;IACP,KAAK,MAAM;IACX,MAAM,OAAO,IAAI,EAAE;IACnB,QAAQ,GAAG,GAAG,OAAO,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;IACrC,QAAQ,MAAM,GAAG,IAAI,CAAC;IACtB,QAAQ,SAAS,GAAG,IAAI,CAAC,GAAG,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;IAC7C,4BAA4B,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;IAC9C,OAAO;IACP,KAAK;;IAEL,IAAI,IAAI,OAAO,GAAG;IAClB,MAAM,IAAI,EAAE,IAAI;IAChB,MAAM,KAAK,EAAE,IAAI;IACjB,MAAM,aAAa,EAAE,CAAC;IACtB,MAAM,MAAM,EAAE,GAAG,EAAE,IAAI;IACvB,KAAK,CAAC;IACN,IAAI,IAAI,OAAO,CAAC;IAChB,IAAI,IAAI,GAAG,IAAI,CAAC,EAAE,MAAM,CAAC,IAAI,IAAI,OAAO,CAAC;IACzC,iBAAiB,MAAM,CAAC,KAAK,GAAG,OAAO,CAAC;;IAExC,IAAI,OAAO,MAAM,EAAE;IACnB,MAAM,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;IACrC,MAAM,IAAI,GAAG,GAAG,CAAC,EAAE,MAAM,CAAC,aAAa,IAAI,CAAC,CAAC;IAC7C,mBAAmB,MAAM,CAAC,aAAa,IAAI,CAAC,CAAC;;IAE7C,MAAM,WAAW,MAAM,CAAC,aAAa,KAAK,CAAC,EAAE,MAAM;IACnD,WAAW,MAAM,MAAM,CAAC,aAAa,GAAG,CAAC,CAAC,EAAE;IAC5C;IACA;IACA,QAAQ,IAAI,MAAM,CAAC,KAAK,CAAC,aAAa,KAAK,CAAC,EAAE,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IACxE,QAAQ,OAAO,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC;;IAErC,QAAQ,IAAI,MAAM,KAAK,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC;IACxD,QAAQ,MAAM;IACd,OAAO,MAAM,IAAI,MAAM,CAAC,aAAa,GAAG,CAAC,EAAE;IAC3C;IACA;IACA,QAAQ,IAAI,MAAM,CAAC,IAAI,CAAC,aAAa,KAAK,CAAC,CAAC,EAAE,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IACtE,QAAQ,OAAO,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC;;IAEtC,QAAQ,IAAI,MAAM,KAAK,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC;IACxD,QAAQ,MAAM;IACd,OAAO;IACP,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;IAC7B,KAAK;;IAEL,IAAI,IAAI,CAAC,KAAK,EAAE,CAAC;IACjB,IAAI,OAAO,OAAO,CAAC;IACnB,GAAG;;;IAGH;IACA;IACA;IACA;IACA;IACA,EAAE,MAAM,CAAC,CAAC,GAAG,EAAE;IACf,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,OAAO,IAAI,CAAC;;IAEjC,IAAI,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;IAC1B,IAAI,IAAI,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC;IACnC,IAAI,IAAI,GAAG,GAAG,CAAC,CAAC;;IAEhB,IAAI,OAAO,IAAI,EAAE;IACjB,MAAM,GAAG,GAAG,OAAO,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;IACnC,MAAM,SAAS,GAAG,KAAK,CAAC,EAAE,MAAM;IAChC,WAAW,IAAI,GAAG,GAAG,CAAC,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;IAC3C,0BAA0B,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;IAC5C,KAAK;IACL,IAAI,IAAI,CAAC,IAAI,EAAE,OAAO,IAAI,CAAC;;IAE3B,IAAI,IAAI,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC;IAC/B,IAAI,IAAI,GAAG,EAAE,GAAG,CAAC;;IAEjB,IAAI,IAAI,IAAI,CAAC,IAAI,EAAE;IACnB,MAAM,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC;;IAEtB,MAAM,OAAO,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC,KAAK,EAAE;IACpC,QAAQ,OAAO,GAAG,CAAC,KAAK,EAAE,GAAG,GAAG,GAAG,CAAC,KAAK,CAAC;;IAE1C,QAAQ,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC;IAC3B,QAAQ,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC;IAC7B,QAAQ,IAAI,GAAG,CAAC,IAAI,EAAE;IACtB,UAAU,IAAI,GAAG,GAAG,CAAC;IACrB,UAAU,GAAG,GAAG,GAAG,CAAC,IAAI,CAAC;IACzB,SAAS;IACT,OAAO;;IAEP,MAAM,IAAI,CAAC,GAAG,IAAI,GAAG,CAAC,GAAG,CAAC;IAC1B,MAAM,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC;IAC3B,MAAM,IAAI,GAAG,GAAG,CAAC;IACjB,KAAK;;IAEL,IAAI,IAAI,IAAI,CAAC,KAAK,EAAE;IACpB,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC;;IAEvB,MAAM,OAAO,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC,KAAK,EAAE;IACpC,QAAQ,OAAO,GAAG,CAAC,IAAI,EAAE,GAAG,GAAG,GAAG,CAAC,IAAI,CAAC;;IAExC,QAAQ,IAAI,CAAC,GAAG,IAAI,GAAG,CAAC,GAAG,CAAC;IAC5B,QAAQ,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC;IAC7B,QAAQ,IAAI,GAAG,CAAC,KAAK,EAAE;IACvB,UAAU,IAAI,GAAG,GAAG,CAAC;IACrB,UAAU,GAAG,GAAG,GAAG,CAAC,KAAK,CAAC;IAC1B,SAAS;IACT,OAAO;;IAEP,MAAM,IAAI,CAAC,GAAG,IAAI,GAAG,CAAC,GAAG,CAAC;IAC1B,MAAM,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC;IAC3B,MAAM,IAAI,GAAG,GAAG,CAAC;IACjB,KAAK;;IAEL,IAAI,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;IAC7B,IAAI,IAAI,EAAE,OAAO,IAAI,CAAC;IACtB,IAAI,IAAI,OAAO,CAAC;;IAEhB,IAAI,OAAO,MAAM,EAAE;IACnB,MAAM,IAAI,MAAM,CAAC,IAAI,KAAK,EAAE,EAAE,MAAM,CAAC,aAAa,IAAI,CAAC,CAAC;IACxD,8BAA8B,MAAM,CAAC,aAAa,IAAI,CAAC,CAAC;;IAExD,MAAM,WAAW,MAAM,CAAC,aAAa,GAAG,CAAC,CAAC,EAAE;IAC5C;IACA;IACA,QAAQ,IAAI,MAAM,CAAC,KAAK,CAAC,aAAa,KAAK,CAAC,EAAE,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IACxE,QAAQ,OAAO,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC;;IAErC,QAAQ,IAAI,MAAM,KAAK,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC;IACxD,QAAQ,MAAM,GAAG,OAAO,CAAC;IACzB,OAAO,MAAM,IAAI,MAAM,CAAC,aAAa,GAAG,CAAC,EAAE;IAC3C;IACA;IACA,QAAQ,IAAI,MAAM,CAAC,IAAI,CAAC,aAAa,KAAK,CAAC,CAAC,EAAE,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IACtE,QAAQ,OAAO,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC;;IAEtC,QAAQ,IAAI,MAAM,KAAK,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC;IACxD,QAAQ,MAAM,GAAG,OAAO,CAAC;IACzB,OAAO;;IAEP,MAAM,IAAI,MAAM,CAAC,aAAa,KAAK,CAAC,CAAC,IAAI,MAAM,CAAC,aAAa,KAAK,CAAC,EAAE,MAAM;;IAE3E,MAAM,EAAE,OAAO,MAAM,CAAC;IACtB,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;IAC7B,KAAK;;IAEL,IAAI,IAAI,IAAI,CAAC,MAAM,EAAE;IACrB,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,KAAK,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,IAAI,IAAI,CAAC;IAC9D,qCAAqC,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC;IAC9D,KAAK;;IAEL,IAAI,IAAI,IAAI,KAAK,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;;IAE/C,IAAI,IAAI,CAAC,KAAK,EAAE,CAAC;IACjB,IAAI,OAAO,WAAW,CAAC;IACvB,GAAG;;;IAGH;IACA;IACA;IACA;IACA;IACA;IACA,EAAE,IAAI,CAAC,IAAI,GAAG,EAAE,EAAE,MAAM,GAAG,EAAE,EAAE,OAAO,EAAE;IACxC,IAAI,IAAI,IAAI,CAAC,KAAK,KAAK,CAAC,EAAE,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC;IAC1E,IAAI,MAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC;IAC7B,IAAI,IAAI,OAAO,EAAE,IAAI,CAAC,IAAI,EAAE,MAAM,EAAE,CAAC,EAAE,IAAI,GAAG,CAAC,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;IACnE,IAAI,IAAI,CAAC,KAAK,GAAG,aAAa,CAAC,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;IAC5D,IAAI,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC5B,IAAI,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;IACtB,IAAI,OAAO,IAAI,CAAC;IAChB,GAAG;;;IAGH;IACA;IACA;IACA;IACA,EAAE,UAAU,GAAG;IACf,IAAI,OAAO,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAClC,GAAG;;;IAGH;IACA;IACA;IACA;IACA;IACA,EAAE,QAAQ,CAAC,CAAC,SAAS,EAAE;IACvB,IAAI,OAAO,KAAK,CAAC,IAAI,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;IACxC,GAAG;IACH,CAAC;;IAED,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC;;ICtrB1B,MAAM,QAAQ,CAAC;IACf,IAAI,WAAW,CAAC,CAAC,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE;IAChD,QAAQ,IAAI,CAAC,QAAQ,GAAG,QAAQ,IAAIA,eAAmB,CAAC;IACxD,QAAQ,IAAI,CAAC,KAAK,GAAG,IAAI,OAAO,CAAC,QAAQ,CAAC,CAAC;IAC3C,QAAQ,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACzB,QAAQ,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IAC7B,QAAQ,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IAC3B,KAAK;IACL;IACA,IAAI,OAAO,KAAK,CAAC,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,QAAQ,EAAE;IACvD,QAAQ,IAAI,GAAG,GAAG,IAAI,QAAQ,CAAC,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;IAC9D,QAAQ,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IAC5B,QAAQ,OAAO,GAAG,CAAC;IACnB,KAAK;;IAEL,IAAI,IAAI,IAAI,GAAG;IACf,QAAQ,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;IACjC,KAAK;;IAEL,IAAI,KAAK,GAAG;IACZ,QAAQ,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;IAC3B,KAAK;;IAEL,IAAI,QAAQ,CAAC,IAAI,EAAE;IACnB,QAAQ,IAAI,GAAGC,SAAa,CAAC,IAAI,CAAC,CAAC;IACnC,QAAQ,IAAI,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IAC/C,QAAQ,OAAO,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;IACzC,KAAK;;IAEL,IAAI,IAAI,CAAC,GAAG,EAAE;IACd,QAAQ,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACzC,QAAQ,IAAI,KAAK,EAAE;IACnB,YAAY,OAAO,KAAK,CAAC,IAAI,CAAC;IAC9B,SAAS,MAAM;IACf,YAAY,OAAO,EAAE,CAAC;IACtB,SAAS;IACT,KAAK;;IAEL,IAAI,MAAM,CAAC,IAAI,EAAE;IACjB,QAAQ,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IACrC,QAAQ,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;;IAE3C,QAAQ,IAAI,KAAK,EAAE;IACnB,YAAY,MAAM,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IACzC,YAAY,MAAM,GAAG,GAAG,KAAK,CAAC,IAAI,CAAC;IACnC,YAAY,MAAM,CAAC,GAAG,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IACtC,YAAY,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE;IACxB,gBAAgB,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACjC,aAAa;IACb,YAAY,IAAI,GAAG,CAAC,MAAM,KAAK,CAAC,EAAE;IAClC,gBAAgB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;IACvC,aAAa;IACb,SAAS;IACT,KAAK;;IAEL,IAAI,QAAQ,CAAC,KAAK,EAAE;IACpB,QAAQ,KAAK,GAAGA,SAAa,CAAC,KAAK,CAAC,CAAC;IACrC,QAAQ,KAAK,CAAC,OAAO,CAAC,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;IACjD,KAAK;IACL;IACA,IAAI,MAAM,CAAC,IAAI,EAAE;IACjB,QAAQ,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IACrC,QAAQ,MAAM,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IACrC,QAAQ,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAC3C;IACA,QAAQ,IAAI,KAAK,EAAE;IACnB,YAAY,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAChC,SAAS,MAAM;IACf,YAAY,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IACzC,SAAS;IACT,KAAK;;IAEL,IAAI,MAAM,CAAC,IAAI,EAAE,OAAO,EAAE;IAC1B,QAAQ,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IAC7B,QAAQ,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAC1B,KAAK;IACL,CAAC;;;;;;;;"}