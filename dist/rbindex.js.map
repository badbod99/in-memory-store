{"version":3,"file":"rbindex.js","sources":["../src/common.js","../node_modules/bintrees/lib/treebase.js","../node_modules/bintrees/lib/rbtree.js","../node_modules/bintrees/lib/bintree.js","../node_modules/bintrees/index.js","../src/indexes/rbindex.js"],"sourcesContent":["export function oneOrMany(items) {\r\n    if (!items) {\r\n        return [];\r\n    } else if (items instanceof Map) {\r\n        return Array.from(items.values());\r\n    } else if (!Array.isArray(items)) {\r\n        return [items];\r\n    } else {\r\n        return items;\r\n    }\r\n}\r\n\r\nexport function lt(comparer, a, b) {\r\n    return comparer(a, b) === -1;\r\n}\r\n\r\nexport function gt(comparer, a, b) {\r\n    return comparer(a, b) === 1;\r\n}\r\n\r\nexport function eq(comparer, a, b) {\r\n    return comparer(a, b) === 0;\r\n}\r\n\r\nexport function defaultComparer(a, b) {\r\n    return a > b ? 1 : a < b ? -1 : 0;\r\n}\r\n\r\nexport function keyWrapComparer(comparer) {\r\n    return function(a, b) {\r\n        return comparer(a.key, b.key);\r\n    };\r\n}\r\n\r\nexport function intersect(arrays) {\r\n    const ordered = (arrays.length===1\r\n        ? arrays : \r\n        arrays.sort((a1,a2) => a1.length - a2.length));\r\n    const shortest = ordered[0],\r\n        set = new Set(), \r\n        result = [];\r\n\r\n    for (let i=0; i < shortest.length; i++) {\r\n        const item = shortest[i];\r\n        let every = true; // don't use ordered.every ... it is slow\r\n        for(let j=1;j<ordered.length;j++) {\r\n            if(ordered[j].includes(item)) continue;\r\n            every = false;\r\n            break;\r\n        }\r\n        // ignore if not in every other array, or if already captured\r\n        if(!every || set.has(item)) continue;\r\n        // otherwise, add to bookeeping set and the result\r\n        set.add(item);\r\n        result[result.length] = item;\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function extract(map, keys) {\r\n    const r = [];\r\n    keys.forEach((key) => {\r\n        if (map.has(key)) {\r\n            r.push(map.get(key));\r\n        }\r\n    });    \r\n    return r;\r\n}","\nfunction TreeBase() {}\n\n// removes all nodes from the tree\nTreeBase.prototype.clear = function() {\n    this._root = null;\n    this.size = 0;\n};\n\n// returns node data if found, null otherwise\nTreeBase.prototype.find = function(data) {\n    var res = this._root;\n\n    while(res !== null) {\n        var c = this._comparator(data, res.data);\n        if(c === 0) {\n            return res.data;\n        }\n        else {\n            res = res.get_child(c > 0);\n        }\n    }\n\n    return null;\n};\n\n// returns iterator to node if found, null otherwise\nTreeBase.prototype.findIter = function(data) {\n    var res = this._root;\n    var iter = this.iterator();\n\n    while(res !== null) {\n        var c = this._comparator(data, res.data);\n        if(c === 0) {\n            iter._cursor = res;\n            return iter;\n        }\n        else {\n            iter._ancestors.push(res);\n            res = res.get_child(c > 0);\n        }\n    }\n\n    return null;\n};\n\n// Returns an iterator to the tree node at or immediately after the item\nTreeBase.prototype.lowerBound = function(item) {\n    var cur = this._root;\n    var iter = this.iterator();\n    var cmp = this._comparator;\n\n    while(cur !== null) {\n        var c = cmp(item, cur.data);\n        if(c === 0) {\n            iter._cursor = cur;\n            return iter;\n        }\n        iter._ancestors.push(cur);\n        cur = cur.get_child(c > 0);\n    }\n\n    for(var i=iter._ancestors.length - 1; i >= 0; --i) {\n        cur = iter._ancestors[i];\n        if(cmp(item, cur.data) < 0) {\n            iter._cursor = cur;\n            iter._ancestors.length = i;\n            return iter;\n        }\n    }\n\n    iter._ancestors.length = 0;\n    return iter;\n};\n\n// Returns an iterator to the tree node immediately after the item\nTreeBase.prototype.upperBound = function(item) {\n    var iter = this.lowerBound(item);\n    var cmp = this._comparator;\n\n    while(iter.data() !== null && cmp(iter.data(), item) === 0) {\n        iter.next();\n    }\n\n    return iter;\n};\n\n// returns null if tree is empty\nTreeBase.prototype.min = function() {\n    var res = this._root;\n    if(res === null) {\n        return null;\n    }\n\n    while(res.left !== null) {\n        res = res.left;\n    }\n\n    return res.data;\n};\n\n// returns null if tree is empty\nTreeBase.prototype.max = function() {\n    var res = this._root;\n    if(res === null) {\n        return null;\n    }\n\n    while(res.right !== null) {\n        res = res.right;\n    }\n\n    return res.data;\n};\n\n// returns a null iterator\n// call next() or prev() to point to an element\nTreeBase.prototype.iterator = function() {\n    return new Iterator(this);\n};\n\n// calls cb on each node's data, in order\nTreeBase.prototype.each = function(cb) {\n    var it=this.iterator(), data;\n    while((data = it.next()) !== null) {\n        if(cb(data) === false) {\n            return;\n        }\n    }\n};\n\n// calls cb on each node's data, in reverse order\nTreeBase.prototype.reach = function(cb) {\n    var it=this.iterator(), data;\n    while((data = it.prev()) !== null) {\n        if(cb(data) === false) {\n            return;\n        }\n    }\n};\n\n\nfunction Iterator(tree) {\n    this._tree = tree;\n    this._ancestors = [];\n    this._cursor = null;\n}\n\nIterator.prototype.data = function() {\n    return this._cursor !== null ? this._cursor.data : null;\n};\n\n// if null-iterator, returns first node\n// otherwise, returns next node\nIterator.prototype.next = function() {\n    if(this._cursor === null) {\n        var root = this._tree._root;\n        if(root !== null) {\n            this._minNode(root);\n        }\n    }\n    else {\n        if(this._cursor.right === null) {\n            // no greater node in subtree, go up to parent\n            // if coming from a right child, continue up the stack\n            var save;\n            do {\n                save = this._cursor;\n                if(this._ancestors.length) {\n                    this._cursor = this._ancestors.pop();\n                }\n                else {\n                    this._cursor = null;\n                    break;\n                }\n            } while(this._cursor.right === save);\n        }\n        else {\n            // get the next node from the subtree\n            this._ancestors.push(this._cursor);\n            this._minNode(this._cursor.right);\n        }\n    }\n    return this._cursor !== null ? this._cursor.data : null;\n};\n\n// if null-iterator, returns last node\n// otherwise, returns previous node\nIterator.prototype.prev = function() {\n    if(this._cursor === null) {\n        var root = this._tree._root;\n        if(root !== null) {\n            this._maxNode(root);\n        }\n    }\n    else {\n        if(this._cursor.left === null) {\n            var save;\n            do {\n                save = this._cursor;\n                if(this._ancestors.length) {\n                    this._cursor = this._ancestors.pop();\n                }\n                else {\n                    this._cursor = null;\n                    break;\n                }\n            } while(this._cursor.left === save);\n        }\n        else {\n            this._ancestors.push(this._cursor);\n            this._maxNode(this._cursor.left);\n        }\n    }\n    return this._cursor !== null ? this._cursor.data : null;\n};\n\nIterator.prototype._minNode = function(start) {\n    while(start.left !== null) {\n        this._ancestors.push(start);\n        start = start.left;\n    }\n    this._cursor = start;\n};\n\nIterator.prototype._maxNode = function(start) {\n    while(start.right !== null) {\n        this._ancestors.push(start);\n        start = start.right;\n    }\n    this._cursor = start;\n};\n\nmodule.exports = TreeBase;\n\n","\nvar TreeBase = require('./treebase');\n\nfunction Node(data) {\n    this.data = data;\n    this.left = null;\n    this.right = null;\n    this.red = true;\n}\n\nNode.prototype.get_child = function(dir) {\n    return dir ? this.right : this.left;\n};\n\nNode.prototype.set_child = function(dir, val) {\n    if(dir) {\n        this.right = val;\n    }\n    else {\n        this.left = val;\n    }\n};\n\nfunction RBTree(comparator) {\n    this._root = null;\n    this._comparator = comparator;\n    this.size = 0;\n}\n\nRBTree.prototype = new TreeBase();\n\n// returns true if inserted, false if duplicate\nRBTree.prototype.insert = function(data) {\n    var ret = false;\n\n    if(this._root === null) {\n        // empty tree\n        this._root = new Node(data);\n        ret = true;\n        this.size++;\n    }\n    else {\n        var head = new Node(undefined); // fake tree root\n\n        var dir = 0;\n        var last = 0;\n\n        // setup\n        var gp = null; // grandparent\n        var ggp = head; // grand-grand-parent\n        var p = null; // parent\n        var node = this._root;\n        ggp.right = this._root;\n\n        // search down\n        while(true) {\n            if(node === null) {\n                // insert new node at the bottom\n                node = new Node(data);\n                p.set_child(dir, node);\n                ret = true;\n                this.size++;\n            }\n            else if(is_red(node.left) && is_red(node.right)) {\n                // color flip\n                node.red = true;\n                node.left.red = false;\n                node.right.red = false;\n            }\n\n            // fix red violation\n            if(is_red(node) && is_red(p)) {\n                var dir2 = ggp.right === gp;\n\n                if(node === p.get_child(last)) {\n                    ggp.set_child(dir2, single_rotate(gp, !last));\n                }\n                else {\n                    ggp.set_child(dir2, double_rotate(gp, !last));\n                }\n            }\n\n            var cmp = this._comparator(node.data, data);\n\n            // stop if found\n            if(cmp === 0) {\n                break;\n            }\n\n            last = dir;\n            dir = cmp < 0;\n\n            // update helpers\n            if(gp !== null) {\n                ggp = gp;\n            }\n            gp = p;\n            p = node;\n            node = node.get_child(dir);\n        }\n\n        // update root\n        this._root = head.right;\n    }\n\n    // make root black\n    this._root.red = false;\n\n    return ret;\n};\n\n// returns true if removed, false if not found\nRBTree.prototype.remove = function(data) {\n    if(this._root === null) {\n        return false;\n    }\n\n    var head = new Node(undefined); // fake tree root\n    var node = head;\n    node.right = this._root;\n    var p = null; // parent\n    var gp = null; // grand parent\n    var found = null; // found item\n    var dir = 1;\n\n    while(node.get_child(dir) !== null) {\n        var last = dir;\n\n        // update helpers\n        gp = p;\n        p = node;\n        node = node.get_child(dir);\n\n        var cmp = this._comparator(data, node.data);\n\n        dir = cmp > 0;\n\n        // save found node\n        if(cmp === 0) {\n            found = node;\n        }\n\n        // push the red node down\n        if(!is_red(node) && !is_red(node.get_child(dir))) {\n            if(is_red(node.get_child(!dir))) {\n                var sr = single_rotate(node, dir);\n                p.set_child(last, sr);\n                p = sr;\n            }\n            else if(!is_red(node.get_child(!dir))) {\n                var sibling = p.get_child(!last);\n                if(sibling !== null) {\n                    if(!is_red(sibling.get_child(!last)) && !is_red(sibling.get_child(last))) {\n                        // color flip\n                        p.red = false;\n                        sibling.red = true;\n                        node.red = true;\n                    }\n                    else {\n                        var dir2 = gp.right === p;\n\n                        if(is_red(sibling.get_child(last))) {\n                            gp.set_child(dir2, double_rotate(p, last));\n                        }\n                        else if(is_red(sibling.get_child(!last))) {\n                            gp.set_child(dir2, single_rotate(p, last));\n                        }\n\n                        // ensure correct coloring\n                        var gpc = gp.get_child(dir2);\n                        gpc.red = true;\n                        node.red = true;\n                        gpc.left.red = false;\n                        gpc.right.red = false;\n                    }\n                }\n            }\n        }\n    }\n\n    // replace and remove if found\n    if(found !== null) {\n        found.data = node.data;\n        p.set_child(p.right === node, node.get_child(node.left === null));\n        this.size--;\n    }\n\n    // update root and make it black\n    this._root = head.right;\n    if(this._root !== null) {\n        this._root.red = false;\n    }\n\n    return found !== null;\n};\n\nfunction is_red(node) {\n    return node !== null && node.red;\n}\n\nfunction single_rotate(root, dir) {\n    var save = root.get_child(!dir);\n\n    root.set_child(!dir, save.get_child(dir));\n    save.set_child(dir, root);\n\n    root.red = true;\n    save.red = false;\n\n    return save;\n}\n\nfunction double_rotate(root, dir) {\n    root.set_child(!dir, single_rotate(root.get_child(!dir), !dir));\n    return single_rotate(root, dir);\n}\n\nmodule.exports = RBTree;\n","\nvar TreeBase = require('./treebase');\n\nfunction Node(data) {\n    this.data = data;\n    this.left = null;\n    this.right = null;\n}\n\nNode.prototype.get_child = function(dir) {\n    return dir ? this.right : this.left;\n};\n\nNode.prototype.set_child = function(dir, val) {\n    if(dir) {\n        this.right = val;\n    }\n    else {\n        this.left = val;\n    }\n};\n\nfunction BinTree(comparator) {\n    this._root = null;\n    this._comparator = comparator;\n    this.size = 0;\n}\n\nBinTree.prototype = new TreeBase();\n\n// returns true if inserted, false if duplicate\nBinTree.prototype.insert = function(data) {\n    if(this._root === null) {\n        // empty tree\n        this._root = new Node(data);\n        this.size++;\n        return true;\n    }\n\n    var dir = 0;\n\n    // setup\n    var p = null; // parent\n    var node = this._root;\n\n    // search down\n    while(true) {\n        if(node === null) {\n            // insert new node at the bottom\n            node = new Node(data);\n            p.set_child(dir, node);\n            ret = true;\n            this.size++;\n            return true;\n        }\n\n        // stop if found\n        if(this._comparator(node.data, data) === 0) {\n            return false;\n        }\n\n        dir = this._comparator(node.data, data) < 0;\n\n        // update helpers\n        p = node;\n        node = node.get_child(dir);\n    }\n};\n\n// returns true if removed, false if not found\nBinTree.prototype.remove = function(data) {\n    if(this._root === null) {\n        return false;\n    }\n\n    var head = new Node(undefined); // fake tree root\n    var node = head;\n    node.right = this._root;\n    var p = null; // parent\n    var found = null; // found item\n    var dir = 1;\n\n    while(node.get_child(dir) !== null) {\n        p = node;\n        node = node.get_child(dir);\n        var cmp = this._comparator(data, node.data);\n        dir = cmp > 0;\n\n        if(cmp === 0) {\n            found = node;\n        }\n    }\n\n    if(found !== null) {\n        found.data = node.data;\n        p.set_child(p.right === node, node.get_child(node.left === null));\n\n        this._root = head.right;\n        this.size--;\n        return true;\n    }\n    else {\n        return false;\n    }\n};\n\nmodule.exports = BinTree;\n\n","module.exports = {\n    RBTree: require('./lib/rbtree'),\n    BinTree: require('./lib/bintree')\n};\n","import * as mem from '../common';\r\nimport { RBTree } from 'bintrees';\r\n\r\nclass RBIndex {\r\n    constructor (name, itemFn, keyFn, comparer) {\r\n        this.comparer = mem.keyWrapComparer(comparer || mem.defaultComparer);\r\n        this.index = new RBTree(this.comparer);\r\n        this.name = name;\r\n        this.itemFn = itemFn;\r\n        this.keyFn = keyFn;\r\n    }\r\n    \r\n    static build(name, itemFn, keyFn, items, comparer) {\r\n        let bin = new RBIndex(name, itemFn, keyFn, comparer);\r\n        bin.populate(items);\r\n        return bin;\r\n    }\r\n\r\n    get keys() {\r\n        let arr = [];\r\n        this.index.each(f => arr.push(f.key));\r\n        return arr;\r\n    }\r\n\r\n    clear() {\r\n        this.index.clear();\r\n    }\r\n\r\n    findMany(keys) {\r\n        keys = mem.oneOrMany(keys);\r\n        let data = keys.map(m => this.find(m));\r\n        return [].concat.apply([], data);\r\n    }\r\n\r\n    find(key) {\r\n        let found = this.index.find({ key: key });\r\n        if (found) {\r\n            return found.value;\r\n        } else {\r\n            return [];\r\n        }\r\n    }\r\n\r\n    remove(item) {\r\n        const key = this.keyFn(item);\r\n        const entry = this.index.find({ key: key });\r\n\r\n        if (entry) {\r\n            const it = this.itemFn(item);\r\n            const arr = entry.value;\r\n            const i = arr.indexOf(it);\r\n            if (i > -1) {\r\n                arr.splice(i, 1);\r\n            }\r\n            if (entry.value.length === 0) {\r\n                this.index.remove({ key: key });\r\n            }\r\n        }\r\n    }\r\n\r\n    populate(items) {\r\n        items = mem.oneOrMany(items);\r\n        items.forEach(item => this.insert(item));\r\n    }\r\n    \r\n    insert(item) {\r\n        const key = this.keyFn(item);\r\n        const it = this.itemFn(item);\r\n        const entry = this.index.find({ key: key });\r\n        \r\n        if (entry) {\r\n            entry.value.push(it);\r\n        } else {\r\n            this.index.insert({key: key, value: [it]});\r\n        }\r\n    }\r\n\r\n    update(item, olditem) {\r\n        this.remove(olditem);\r\n        this.insert(item);\r\n    }\r\n}\r\n\r\nexport default RBIndex;"],"names":["TreeBase","Node","require$$0","require$$1","mem.keyWrapComparer","mem.defaultComparer","RBTree","mem.oneOrMany"],"mappings":";;;;;;;;;;;;;;;IAAO,SAAS,SAAS,CAAC,KAAK,EAAE;IACjC,IAAI,IAAI,CAAC,KAAK,EAAE;IAChB,QAAQ,OAAO,EAAE,CAAC;IAClB,KAAK,MAAM,IAAI,KAAK,YAAY,GAAG,EAAE;IACrC,QAAQ,OAAO,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC;IAC1C,KAAK,MAAM,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;IACtC,QAAQ,OAAO,CAAC,KAAK,CAAC,CAAC;IACvB,KAAK,MAAM;IACX,QAAQ,OAAO,KAAK,CAAC;IACrB,KAAK;IACL,CAAC;AACD,AAYA;AACA,IAAO,SAAS,eAAe,CAAC,CAAC,EAAE,CAAC,EAAE;IACtC,IAAI,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;IACtC,CAAC;;AAED,IAAO,SAAS,eAAe,CAAC,QAAQ,EAAE;IAC1C,IAAI,OAAO,SAAS,CAAC,EAAE,CAAC,EAAE;IAC1B,QAAQ,OAAO,QAAQ,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC;IACtC,KAAK,CAAC;IACN,CAAC;;IC/BD,SAAS,QAAQ,GAAG,EAAE;;;IAGtB,QAAQ,CAAC,SAAS,CAAC,KAAK,GAAG,WAAW;QAClC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;KACjB,CAAC;;;IAGF,QAAQ,CAAC,SAAS,CAAC,IAAI,GAAG,SAAS,IAAI,EAAE;QACrC,IAAI,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC;;QAErB,MAAM,GAAG,KAAK,IAAI,EAAE;YAChB,IAAI,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC;YACzC,GAAG,CAAC,KAAK,CAAC,EAAE;gBACR,OAAO,GAAG,CAAC,IAAI,CAAC;aACnB;iBACI;gBACD,GAAG,GAAG,GAAG,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;aAC9B;SACJ;;QAED,OAAO,IAAI,CAAC;KACf,CAAC;;;IAGF,QAAQ,CAAC,SAAS,CAAC,QAAQ,GAAG,SAAS,IAAI,EAAE;QACzC,IAAI,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC;QACrB,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;;QAE3B,MAAM,GAAG,KAAK,IAAI,EAAE;YAChB,IAAI,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC;YACzC,GAAG,CAAC,KAAK,CAAC,EAAE;gBACR,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC;gBACnB,OAAO,IAAI,CAAC;aACf;iBACI;gBACD,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;gBAC1B,GAAG,GAAG,GAAG,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;aAC9B;SACJ;;QAED,OAAO,IAAI,CAAC;KACf,CAAC;;;IAGF,QAAQ,CAAC,SAAS,CAAC,UAAU,GAAG,SAAS,IAAI,EAAE;QAC3C,IAAI,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC;QACrB,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;QAC3B,IAAI,GAAG,GAAG,IAAI,CAAC,WAAW,CAAC;;QAE3B,MAAM,GAAG,KAAK,IAAI,EAAE;YAChB,IAAI,CAAC,GAAG,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC;YAC5B,GAAG,CAAC,KAAK,CAAC,EAAE;gBACR,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC;gBACnB,OAAO,IAAI,CAAC;aACf;YACD,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAC1B,GAAG,GAAG,GAAG,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;SAC9B;;QAED,IAAI,IAAI,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,EAAE;YAC/C,GAAG,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YACzB,GAAG,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;gBACxB,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC;gBACnB,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC;gBAC3B,OAAO,IAAI,CAAC;aACf;SACJ;;QAED,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC;QAC3B,OAAO,IAAI,CAAC;KACf,CAAC;;;IAGF,QAAQ,CAAC,SAAS,CAAC,UAAU,GAAG,SAAS,IAAI,EAAE;QAC3C,IAAI,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QACjC,IAAI,GAAG,GAAG,IAAI,CAAC,WAAW,CAAC;;QAE3B,MAAM,IAAI,CAAC,IAAI,EAAE,KAAK,IAAI,IAAI,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,EAAE;YACxD,IAAI,CAAC,IAAI,EAAE,CAAC;SACf;;QAED,OAAO,IAAI,CAAC;KACf,CAAC;;;IAGF,QAAQ,CAAC,SAAS,CAAC,GAAG,GAAG,WAAW;QAChC,IAAI,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC;QACrB,GAAG,GAAG,KAAK,IAAI,EAAE;YACb,OAAO,IAAI,CAAC;SACf;;QAED,MAAM,GAAG,CAAC,IAAI,KAAK,IAAI,EAAE;YACrB,GAAG,GAAG,GAAG,CAAC,IAAI,CAAC;SAClB;;QAED,OAAO,GAAG,CAAC,IAAI,CAAC;KACnB,CAAC;;;IAGF,QAAQ,CAAC,SAAS,CAAC,GAAG,GAAG,WAAW;QAChC,IAAI,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC;QACrB,GAAG,GAAG,KAAK,IAAI,EAAE;YACb,OAAO,IAAI,CAAC;SACf;;QAED,MAAM,GAAG,CAAC,KAAK,KAAK,IAAI,EAAE;YACtB,GAAG,GAAG,GAAG,CAAC,KAAK,CAAC;SACnB;;QAED,OAAO,GAAG,CAAC,IAAI,CAAC;KACnB,CAAC;;;;IAIF,QAAQ,CAAC,SAAS,CAAC,QAAQ,GAAG,WAAW;QACrC,OAAO,IAAI,QAAQ,CAAC,IAAI,CAAC,CAAC;KAC7B,CAAC;;;IAGF,QAAQ,CAAC,SAAS,CAAC,IAAI,GAAG,SAAS,EAAE,EAAE;QACnC,IAAI,EAAE,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC;QAC7B,MAAM,CAAC,IAAI,GAAG,EAAE,CAAC,IAAI,EAAE,MAAM,IAAI,EAAE;YAC/B,GAAG,EAAE,CAAC,IAAI,CAAC,KAAK,KAAK,EAAE;gBACnB,OAAO;aACV;SACJ;KACJ,CAAC;;;IAGF,QAAQ,CAAC,SAAS,CAAC,KAAK,GAAG,SAAS,EAAE,EAAE;QACpC,IAAI,EAAE,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC;QAC7B,MAAM,CAAC,IAAI,GAAG,EAAE,CAAC,IAAI,EAAE,MAAM,IAAI,EAAE;YAC/B,GAAG,EAAE,CAAC,IAAI,CAAC,KAAK,KAAK,EAAE;gBACnB,OAAO;aACV;SACJ;KACJ,CAAC;;;IAGF,SAAS,QAAQ,CAAC,IAAI,EAAE;QACpB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;QACrB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;KACvB;;IAED,QAAQ,CAAC,SAAS,CAAC,IAAI,GAAG,WAAW;QACjC,OAAO,IAAI,CAAC,OAAO,KAAK,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC;KAC3D,CAAC;;;;IAIF,QAAQ,CAAC,SAAS,CAAC,IAAI,GAAG,WAAW;QACjC,GAAG,IAAI,CAAC,OAAO,KAAK,IAAI,EAAE;YACtB,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC;YAC5B,GAAG,IAAI,KAAK,IAAI,EAAE;gBACd,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;aACvB;SACJ;aACI;YACD,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,KAAK,IAAI,EAAE;;;gBAG5B,IAAI,IAAI,CAAC;gBACT,GAAG;oBACC,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC;oBACpB,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE;wBACvB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC;qBACxC;yBACI;wBACD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;wBACpB,MAAM;qBACT;iBACJ,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,KAAK,IAAI,EAAE;aACxC;iBACI;;gBAED,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBACnC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;aACrC;SACJ;QACD,OAAO,IAAI,CAAC,OAAO,KAAK,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC;KAC3D,CAAC;;;;IAIF,QAAQ,CAAC,SAAS,CAAC,IAAI,GAAG,WAAW;QACjC,GAAG,IAAI,CAAC,OAAO,KAAK,IAAI,EAAE;YACtB,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC;YAC5B,GAAG,IAAI,KAAK,IAAI,EAAE;gBACd,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;aACvB;SACJ;aACI;YACD,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,KAAK,IAAI,EAAE;gBAC3B,IAAI,IAAI,CAAC;gBACT,GAAG;oBACC,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC;oBACpB,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE;wBACvB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC;qBACxC;yBACI;wBACD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;wBACpB,MAAM;qBACT;iBACJ,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,KAAK,IAAI,EAAE;aACvC;iBACI;gBACD,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBACnC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;aACpC;SACJ;QACD,OAAO,IAAI,CAAC,OAAO,KAAK,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC;KAC3D,CAAC;;IAEF,QAAQ,CAAC,SAAS,CAAC,QAAQ,GAAG,SAAS,KAAK,EAAE;QAC1C,MAAM,KAAK,CAAC,IAAI,KAAK,IAAI,EAAE;YACvB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC5B,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC;SACtB;QACD,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;KACxB,CAAC;;IAEF,QAAQ,CAAC,SAAS,CAAC,QAAQ,GAAG,SAAS,KAAK,EAAE;QAC1C,MAAM,KAAK,CAAC,KAAK,KAAK,IAAI,EAAE;YACxB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC5B,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC;SACvB;QACD,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;KACxB,CAAC;;IAEF,YAAc,GAAG,QAAQ,CAAC;;ICtO1B,SAAS,IAAI,CAAC,IAAI,EAAE;QAChB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC;KACnB;;IAED,IAAI,CAAC,SAAS,CAAC,SAAS,GAAG,SAAS,GAAG,EAAE;QACrC,OAAO,GAAG,GAAG,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC;KACvC,CAAC;;IAEF,IAAI,CAAC,SAAS,CAAC,SAAS,GAAG,SAAS,GAAG,EAAE,GAAG,EAAE;QAC1C,GAAG,GAAG,EAAE;YACJ,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC;SACpB;aACI;YACD,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;SACnB;KACJ,CAAC;;IAEF,SAAS,MAAM,CAAC,UAAU,EAAE;QACxB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;QAC9B,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;KACjB;;IAED,MAAM,CAAC,SAAS,GAAG,IAAIA,QAAQ,EAAE,CAAC;;;IAGlC,MAAM,CAAC,SAAS,CAAC,MAAM,GAAG,SAAS,IAAI,EAAE;QACrC,IAAI,GAAG,GAAG,KAAK,CAAC;;QAEhB,GAAG,IAAI,CAAC,KAAK,KAAK,IAAI,EAAE;;YAEpB,IAAI,CAAC,KAAK,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC;YAC5B,GAAG,GAAG,IAAI,CAAC;YACX,IAAI,CAAC,IAAI,EAAE,CAAC;SACf;aACI;YACD,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC;;YAE/B,IAAI,GAAG,GAAG,CAAC,CAAC;YACZ,IAAI,IAAI,GAAG,CAAC,CAAC;;;YAGb,IAAI,EAAE,GAAG,IAAI,CAAC;YACd,IAAI,GAAG,GAAG,IAAI,CAAC;YACf,IAAI,CAAC,GAAG,IAAI,CAAC;YACb,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;YACtB,GAAG,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;;;YAGvB,MAAM,IAAI,EAAE;gBACR,GAAG,IAAI,KAAK,IAAI,EAAE;;oBAEd,IAAI,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC;oBACtB,CAAC,CAAC,SAAS,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;oBACvB,GAAG,GAAG,IAAI,CAAC;oBACX,IAAI,CAAC,IAAI,EAAE,CAAC;iBACf;qBACI,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;;oBAE7C,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC;oBAChB,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG,KAAK,CAAC;oBACtB,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC;iBAC1B;;;gBAGD,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,EAAE;oBAC1B,IAAI,IAAI,GAAG,GAAG,CAAC,KAAK,KAAK,EAAE,CAAC;;oBAE5B,GAAG,IAAI,KAAK,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;wBAC3B,GAAG,CAAC,SAAS,CAAC,IAAI,EAAE,aAAa,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;qBACjD;yBACI;wBACD,GAAG,CAAC,SAAS,CAAC,IAAI,EAAE,aAAa,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;qBACjD;iBACJ;;gBAED,IAAI,GAAG,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;;;gBAG5C,GAAG,GAAG,KAAK,CAAC,EAAE;oBACV,MAAM;iBACT;;gBAED,IAAI,GAAG,GAAG,CAAC;gBACX,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;;;gBAGd,GAAG,EAAE,KAAK,IAAI,EAAE;oBACZ,GAAG,GAAG,EAAE,CAAC;iBACZ;gBACD,EAAE,GAAG,CAAC,CAAC;gBACP,CAAC,GAAG,IAAI,CAAC;gBACT,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;aAC9B;;;YAGD,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;SAC3B;;;QAGD,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC;;QAEvB,OAAO,GAAG,CAAC;KACd,CAAC;;;IAGF,MAAM,CAAC,SAAS,CAAC,MAAM,GAAG,SAAS,IAAI,EAAE;QACrC,GAAG,IAAI,CAAC,KAAK,KAAK,IAAI,EAAE;YACpB,OAAO,KAAK,CAAC;SAChB;;QAED,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC;QAC/B,IAAI,IAAI,GAAG,IAAI,CAAC;QAChB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QACxB,IAAI,CAAC,GAAG,IAAI,CAAC;QACb,IAAI,EAAE,GAAG,IAAI,CAAC;QACd,IAAI,KAAK,GAAG,IAAI,CAAC;QACjB,IAAI,GAAG,GAAG,CAAC,CAAC;;QAEZ,MAAM,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,IAAI,EAAE;YAChC,IAAI,IAAI,GAAG,GAAG,CAAC;;;YAGf,EAAE,GAAG,CAAC,CAAC;YACP,CAAC,GAAG,IAAI,CAAC;YACT,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;;YAE3B,IAAI,GAAG,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;;YAE5C,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;;;YAGd,GAAG,GAAG,KAAK,CAAC,EAAE;gBACV,KAAK,GAAG,IAAI,CAAC;aAChB;;;YAGD,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,EAAE;gBAC9C,GAAG,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE;oBAC7B,IAAI,EAAE,GAAG,aAAa,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;oBAClC,CAAC,CAAC,SAAS,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;oBACtB,CAAC,GAAG,EAAE,CAAC;iBACV;qBACI,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE;oBACnC,IAAI,OAAO,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC;oBACjC,GAAG,OAAO,KAAK,IAAI,EAAE;wBACjB,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,EAAE;;4BAEtE,CAAC,CAAC,GAAG,GAAG,KAAK,CAAC;4BACd,OAAO,CAAC,GAAG,GAAG,IAAI,CAAC;4BACnB,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC;yBACnB;6BACI;4BACD,IAAI,IAAI,GAAG,EAAE,CAAC,KAAK,KAAK,CAAC,CAAC;;4BAE1B,GAAG,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,EAAE;gCAChC,EAAE,CAAC,SAAS,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;6BAC9C;iCACI,GAAG,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE;gCACtC,EAAE,CAAC,SAAS,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;6BAC9C;;;4BAGD,IAAI,GAAG,GAAG,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;4BAC7B,GAAG,CAAC,GAAG,GAAG,IAAI,CAAC;4BACf,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC;4BAChB,GAAG,CAAC,IAAI,CAAC,GAAG,GAAG,KAAK,CAAC;4BACrB,GAAG,CAAC,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC;yBACzB;qBACJ;iBACJ;aACJ;SACJ;;;QAGD,GAAG,KAAK,KAAK,IAAI,EAAE;YACf,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;YACvB,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,KAAK,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC,CAAC;YAClE,IAAI,CAAC,IAAI,EAAE,CAAC;SACf;;;QAGD,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QACxB,GAAG,IAAI,CAAC,KAAK,KAAK,IAAI,EAAE;YACpB,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC;SAC1B;;QAED,OAAO,KAAK,KAAK,IAAI,CAAC;KACzB,CAAC;;IAEF,SAAS,MAAM,CAAC,IAAI,EAAE;QAClB,OAAO,IAAI,KAAK,IAAI,IAAI,IAAI,CAAC,GAAG,CAAC;KACpC;;IAED,SAAS,aAAa,CAAC,IAAI,EAAE,GAAG,EAAE;QAC9B,IAAI,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC;;QAEhC,IAAI,CAAC,SAAS,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;QAC1C,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;;QAE1B,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC;QAChB,IAAI,CAAC,GAAG,GAAG,KAAK,CAAC;;QAEjB,OAAO,IAAI,CAAC;KACf;;IAED,SAAS,aAAa,CAAC,IAAI,EAAE,GAAG,EAAE;QAC9B,IAAI,CAAC,SAAS,CAAC,CAAC,GAAG,EAAE,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;QAChE,OAAO,aAAa,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;KACnC;;IAED,UAAc,GAAG,MAAM,CAAC;;ICtNxB,SAASC,MAAI,CAAC,IAAI,EAAE;QAChB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;KACrB;;AAEDA,UAAI,CAAC,SAAS,CAAC,SAAS,GAAG,SAAS,GAAG,EAAE;QACrC,OAAO,GAAG,GAAG,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC;KACvC,CAAC;;AAEFA,UAAI,CAAC,SAAS,CAAC,SAAS,GAAG,SAAS,GAAG,EAAE,GAAG,EAAE;QAC1C,GAAG,GAAG,EAAE;YACJ,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC;SACpB;aACI;YACD,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;SACnB;KACJ,CAAC;;IAEF,SAAS,OAAO,CAAC,UAAU,EAAE;QACzB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;QAC9B,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;KACjB;;IAED,OAAO,CAAC,SAAS,GAAG,IAAID,QAAQ,EAAE,CAAC;;;IAGnC,OAAO,CAAC,SAAS,CAAC,MAAM,GAAG,SAAS,IAAI,EAAE;QACtC,GAAG,IAAI,CAAC,KAAK,KAAK,IAAI,EAAE;;YAEpB,IAAI,CAAC,KAAK,GAAG,IAAIC,MAAI,CAAC,IAAI,CAAC,CAAC;YAC5B,IAAI,CAAC,IAAI,EAAE,CAAC;YACZ,OAAO,IAAI,CAAC;SACf;;QAED,IAAI,GAAG,GAAG,CAAC,CAAC;;;QAGZ,IAAI,CAAC,GAAG,IAAI,CAAC;QACb,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;;;QAGtB,MAAM,IAAI,EAAE;YACR,GAAG,IAAI,KAAK,IAAI,EAAE;;gBAEd,IAAI,GAAG,IAAIA,MAAI,CAAC,IAAI,CAAC,CAAC;gBACtB,CAAC,CAAC,SAAS,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;gBACvB,GAAG,GAAG,IAAI,CAAC;gBACX,IAAI,CAAC,IAAI,EAAE,CAAC;gBACZ,OAAO,IAAI,CAAC;aACf;;;YAGD,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,EAAE;gBACxC,OAAO,KAAK,CAAC;aAChB;;YAED,GAAG,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;;;YAG5C,CAAC,GAAG,IAAI,CAAC;YACT,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;SAC9B;KACJ,CAAC;;;IAGF,OAAO,CAAC,SAAS,CAAC,MAAM,GAAG,SAAS,IAAI,EAAE;QACtC,GAAG,IAAI,CAAC,KAAK,KAAK,IAAI,EAAE;YACpB,OAAO,KAAK,CAAC;SAChB;;QAED,IAAI,IAAI,GAAG,IAAIA,MAAI,CAAC,SAAS,CAAC,CAAC;QAC/B,IAAI,IAAI,GAAG,IAAI,CAAC;QAChB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QACxB,IAAI,CAAC,GAAG,IAAI,CAAC;QACb,IAAI,KAAK,GAAG,IAAI,CAAC;QACjB,IAAI,GAAG,GAAG,CAAC,CAAC;;QAEZ,MAAM,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,IAAI,EAAE;YAChC,CAAC,GAAG,IAAI,CAAC;YACT,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;YAC3B,IAAI,GAAG,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;YAC5C,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;;YAEd,GAAG,GAAG,KAAK,CAAC,EAAE;gBACV,KAAK,GAAG,IAAI,CAAC;aAChB;SACJ;;QAED,GAAG,KAAK,KAAK,IAAI,EAAE;YACf,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;YACvB,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,KAAK,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC,CAAC;;YAElE,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;YACxB,IAAI,CAAC,IAAI,EAAE,CAAC;YACZ,OAAO,IAAI,CAAC;SACf;aACI;YACD,OAAO,KAAK,CAAC;SAChB;KACJ,CAAC;;IAEF,WAAc,GAAG,OAAO,CAAC;;IC1GzB,YAAc,GAAG;QACb,MAAM,EAAEC,MAAuB;QAC/B,OAAO,EAAEC,OAAwB;KACpC,CAAC;;;ICAF,MAAM,OAAO,CAAC;IACd,IAAI,WAAW,CAAC,CAAC,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE;IAChD,QAAQ,IAAI,CAAC,QAAQ,GAAGC,eAAmB,CAAC,QAAQ,IAAIC,eAAmB,CAAC,CAAC;IAC7E,QAAQ,IAAI,CAAC,KAAK,GAAG,IAAIC,UAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC/C,QAAQ,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACzB,QAAQ,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IAC7B,QAAQ,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IAC3B,KAAK;IACL;IACA,IAAI,OAAO,KAAK,CAAC,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,QAAQ,EAAE;IACvD,QAAQ,IAAI,GAAG,GAAG,IAAI,OAAO,CAAC,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;IAC7D,QAAQ,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IAC5B,QAAQ,OAAO,GAAG,CAAC;IACnB,KAAK;;IAEL,IAAI,IAAI,IAAI,GAAG;IACf,QAAQ,IAAI,GAAG,GAAG,EAAE,CAAC;IACrB,QAAQ,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAC9C,QAAQ,OAAO,GAAG,CAAC;IACnB,KAAK;;IAEL,IAAI,KAAK,GAAG;IACZ,QAAQ,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;IAC3B,KAAK;;IAEL,IAAI,QAAQ,CAAC,IAAI,EAAE;IACnB,QAAQ,IAAI,GAAGC,SAAa,CAAC,IAAI,CAAC,CAAC;IACnC,QAAQ,IAAI,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IAC/C,QAAQ,OAAO,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;IACzC,KAAK;;IAEL,IAAI,IAAI,CAAC,GAAG,EAAE;IACd,QAAQ,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;IAClD,QAAQ,IAAI,KAAK,EAAE;IACnB,YAAY,OAAO,KAAK,CAAC,KAAK,CAAC;IAC/B,SAAS,MAAM;IACf,YAAY,OAAO,EAAE,CAAC;IACtB,SAAS;IACT,KAAK;;IAEL,IAAI,MAAM,CAAC,IAAI,EAAE;IACjB,QAAQ,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IACrC,QAAQ,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;;IAEpD,QAAQ,IAAI,KAAK,EAAE;IACnB,YAAY,MAAM,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IACzC,YAAY,MAAM,GAAG,GAAG,KAAK,CAAC,KAAK,CAAC;IACpC,YAAY,MAAM,CAAC,GAAG,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IACtC,YAAY,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE;IACxB,gBAAgB,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACjC,aAAa;IACb,YAAY,IAAI,KAAK,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;IAC1C,gBAAgB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;IAChD,aAAa;IACb,SAAS;IACT,KAAK;;IAEL,IAAI,QAAQ,CAAC,KAAK,EAAE;IACpB,QAAQ,KAAK,GAAGA,SAAa,CAAC,KAAK,CAAC,CAAC;IACrC,QAAQ,KAAK,CAAC,OAAO,CAAC,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;IACjD,KAAK;IACL;IACA,IAAI,MAAM,CAAC,IAAI,EAAE;IACjB,QAAQ,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IACrC,QAAQ,MAAM,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IACrC,QAAQ,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;IACpD;IACA,QAAQ,IAAI,KAAK,EAAE;IACnB,YAAY,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IACjC,SAAS,MAAM;IACf,YAAY,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACvD,SAAS;IACT,KAAK;;IAEL,IAAI,MAAM,CAAC,IAAI,EAAE,OAAO,EAAE;IAC1B,QAAQ,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IAC7B,QAAQ,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAC1B,KAAK;IACL,CAAC;;;;;;;;"}