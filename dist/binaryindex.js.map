{"version":3,"file":"binaryindex.js","sources":["../src/common.js","../src/indexes/binaryindex.js"],"sourcesContent":["export function oneOrMany(items) {\r\n    if (!items) {\r\n        return [];\r\n    } else if (items instanceof Map) {\r\n        return Array.from(items.values());\r\n    } else if (!Array.isArray(items)) {\r\n        return [items];\r\n    } else {\r\n        return items;\r\n    }\r\n}\r\n\r\nexport function lt(comparer, a, b) {\r\n    return comparer(a, b) === -1;\r\n}\r\n\r\nexport function gt(comparer, a, b) {\r\n    return comparer(a, b) === 1;\r\n}\r\n\r\nexport function eq(comparer, a, b) {\r\n    return comparer(a, b) === 0;\r\n}\r\n\r\nexport function defaultComparer() {\r\n    return (a, b) => a > b ? 1 : a < b ? -1 : 0;\r\n}\r\n\r\nexport function intersect(arrays) {\r\n    const ordered = (arrays.length===1\r\n        ? arrays : \r\n        arrays.sort((a1,a2) => a1.length - a2.length));\r\n    const shortest = ordered[0],\r\n        set = new Set(), \r\n        result = [];\r\n\r\n    for (let i=0; i < shortest.length; i++) {\r\n        const item = shortest[i];\r\n        let every = true; // don't use ordered.every ... it is slow\r\n        for(let j=1;j<ordered.length;j++) {\r\n            if(ordered[j].includes(item)) continue;\r\n            every = false;\r\n            break;\r\n        }\r\n        // ignore if not in every other array, or if already captured\r\n        if(!every || set.has(item)) continue;\r\n        // otherwise, add to bookeeping set and the result\r\n        set.add(item);\r\n        result[result.length] = item;\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function extract(map, keys) {\r\n    const r = [];\r\n    keys.forEach((key) => {\r\n        if (map.has(key)) {\r\n            r.push(map.get(key));\r\n        }\r\n    });    \r\n    return r;\r\n}","import * as mem from '../common';\r\n\r\nclass BinaryIndex {\r\n    constructor (name, itemFn, keyFn, comparer) {\r\n        this.index = [];\r\n        this.name = name;\r\n        this.itemFn = itemFn;\r\n        this.keyFn = keyFn;\r\n        this.comparer = comparer || mem.defaultComparer;\r\n    }\r\n    \r\n    static build(name, itemFn, keyFn, items, comparer) {\r\n        let hash = new BinaryIndex(name, itemFn, keyFn, comparer);\r\n        hash.add(items);\r\n        return hash;\r\n    }\r\n\r\n    get keys() {\r\n        return this.index.map(m => m.key);\r\n    }\r\n\r\n    clear() {\r\n        this.index = [];\r\n    }\r\n\r\n    _positionOf(key) {\r\n        let low = 0, high = this.index.length, mid;\r\n        while (low < high) {\r\n            // faster version of Math.floor((low + high) / 2)\r\n            mid = (low + high) >>> 1; \r\n            mem.lt(this.comparer, this.index[mid].key, key) ? low = mid + 1 : high = mid\r\n        }\r\n        return low;\r\n    }\r\n\r\n    get(keys) {\r\n        keys = mem.oneOrMany(keys);\r\n        if (keys.length === 1) {\r\n            return this.getOne(keys[0]);\r\n        }\r\n        let data = keys.map(m => this.getOne(m));\r\n        return [].concat.apply([], data);\r\n    }\r\n\r\n    getOne(key) {\r\n        const i = this._positionOf(key);\r\n        const entry = this.index[i];\r\n        if (mem.eq(this.comparer, entry.key, key)) {\r\n            return entry.values;\r\n        }\r\n    }\r\n\r\n    remove(items) {\r\n        items = mem.oneOrMany(items);\r\n        items.forEach(item => {\r\n            this.removeOne(item);\r\n        });\r\n    }\r\n\r\n    removeOne(item) {\r\n        const key = this.keyFn(item);\r\n        const ix = this._positionOf(key);\r\n        const entry = this.index[ix];\r\n        \r\n        if (entry && mem.eq(this.comparer, entry.key, key)) {\r\n            const it = this.itemFn(item);\r\n            const i = entry.values.indexOf(it);\r\n            if (i > -1) {\r\n                entry.values.splice(i, 1);\r\n            }\r\n            if (entry.values.length === 0) {\r\n                this.index.splice(ix, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    add(items) {\r\n        items = mem.oneOrMany(items);\r\n        items.forEach(item => {\r\n            this.addOne(item);\r\n        });\r\n    }\r\n    \r\n    addOne(item) {\r\n        const key = this.keyFn(item);\r\n        const it = this.itemFn(item);\r\n        const ix = this._positionOf(key);\r\n        const entry = this.index[ix];\r\n        \r\n        if (entry && mem.eq(this.comparer, entry.key, key)) {\r\n            entry.values.push(it);\r\n        } else {\r\n            this.index.splice(ix, 0, {key: key, values: [it]});\r\n        }\r\n    }\r\n\r\n    update(item, olditem) {\r\n        this.removeOne(olditem);\r\n        this.addOne(item);\r\n    }\r\n}\r\n\r\nexport default BinaryIndex;"],"names":["mem.defaultComparer","let","mem.lt","mem.oneOrMany","this","mem.eq","const"],"mappings":"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"}